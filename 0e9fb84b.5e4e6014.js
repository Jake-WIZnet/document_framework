(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{582:function(e,t,o){"use strict";o.d(t,"a",(function(){return u})),o.d(t,"b",(function(){return m}));var n=o(0),r=o.n(n);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(o),d=n,m=u["".concat(c,".").concat(d)]||u[d]||b[d]||a;return o?r.a.createElement(m,i(i({ref:t},p),{},{components:o})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=o[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},86:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return c})),o.d(t,"metadata",(function(){return i})),o.d(t,"rightToc",(function(){return l})),o.d(t,"default",(function(){return s}));var n=o(2),r=o(6),a=(o(0),o(582)),c={id:"open_source_hardware_coocox",title:"CooCox",date:new Date("2020-04-03T00:00:00.000Z")},i={unversionedId:"Product/Open-Source-Hardware/open_source_hardware_coocox",id:"Product/Open-Source-Hardware/open_source_hardware_coocox",isDocsHomePage:!1,title:"CooCox",description:"CooCox",source:"@site/docs\\Product\\Open-Source-Hardware\\CooCox.md",permalink:"/docs/Product/Open-Source-Hardware/open_source_hardware_coocox",editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/Open-Source-Hardware/CooCox.md",sidebar:"docs",previous:{title:"Cookie",permalink:"/docs/Product/Open-Source-Hardware/cookie"},next:{title:"All Pages (Open Source Hardware)",permalink:"/docs/Product/Open-Source-Hardware/open_source_hardware_all_pages"}},l=[{value:"Installation",id:"installation",children:[]},{value:"CooCox Open IDE",id:"coocox-open-ide",children:[]},{value:"Tool-chains setting in CoIDE",id:"tool-chains-setting-in-coide",children:[]},{value:"CoX-Peripheral Interface",id:"cox-peripheral-interface",children:[]}],p={rightToc:l};function s(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},p,o,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"coocox"},"CooCox"),Object(a.b)("p",null,"Visit to the Web site"),Object(a.b)("p",null,"URL :\ud83c\udf0e",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.coocox.org/Index.html"}),"http://www.coocox.org/Index.html"),"]","(",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.coocox.org/Index.html"}),"http://www.coocox.org/Index.html"),"."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("hr",null),Object(a.b)("p",null,"CoIDE just provides development environment without\ntool-chains. So you need to install tool-chains at first. We use ARM gcc\n4.7 for tool-chains."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"ARM GCC 4.7 Features:")),Object(a.b)("p",null,"-"," All GCC 4.7 features, plus latest mainline features - Additional code\nsize optimizations - Newlib-nano: newlib branch optimized for code size"),Object(a.b)("p",null,Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://launchpad.net/gcc-arm-embedded/+download"}),"Download the latest\narm-gcc-embbed")),Object(a.b)("h2",{id:"coocox-open-ide"},"CooCox Open IDE"),Object(a.b)("hr",null),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"CooCox")," provides integration development environment\ncalled ",Object(a.b)("strong",{parentName:"p"},"CoIDE")," for ARM Cortex M series microcontrollers. ",Object(a.b)("strong",{parentName:"p"},"CoIDE"),"\nsupports ARM gcc based development environment of ",Object(a.b)("strong",{parentName:"p"},"eclipse"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"System requirements:")),Object(a.b)("p",null,"-"," Windows XP SP3 / Windows Vista / Windows 7"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Features:")),Object(a.b)("p",null,"-"," Free to use - Full functional IDE - Component-oriented development\nplatform - Internet-based, efficient integration of network resources -\nIntegrates CoOS - Peripheral registers"),Object(a.b)("p",null,Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.coocox.org/CooCox_CoIDE.htm"}),"CoIDE Download and learn\nmore")," "),Object(a.b)("h2",{id:"tool-chains-setting-in-coide"},"Tool-chains setting in CoIDE"),Object(a.b)("hr",null),Object(a.b)("p",null,"Before you use CoIDE to start your project, you need to\nconfig the GCC compiler at first."),Object(a.b)("p",null,Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.coocox.org/CoIDE/Compiler_Settings.html"}),"Compiler Setting in\nCoIDE")),Object(a.b)("h2",{id:"cox-peripheral-interface"},"CoX-Peripheral Interface"),Object(a.b)("hr",null),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Cox-Peripheral interface")," is Common Wrapper Interface to\nport peripheral easily which is different in each vendors. If SPI is\ndesigned by Cox-Peripheral Interface starting as x(e.g. xGPIOModeSet),\nyou can operate by changing just SPI interface PIN setting in each MCUs\nor EVB-boards."),Object(a.b)("p",null,Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.coocox.org/COX.html"}),"Learn more")))}s.isMDXComponent=!0}}]);