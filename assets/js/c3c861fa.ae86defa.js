(self.webpackChunkwi_znet_documentation=self.webpackChunkwi_znet_documentation||[]).push([[26895],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||a;return r?o.createElement(f,i(i({ref:t},u),{},{components:r})):o.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1404:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var o=r(74034),n=r(79973),a=(r(67294),r(3905)),i={id:"open_source_hardware_coocox",title:"CooCox",date:new Date("2020-04-03T00:00:00.000Z")},c={unversionedId:"Product/Open-Source-Hardware/open_source_hardware_coocox",id:"Product/Open-Source-Hardware/open_source_hardware_coocox",isDocsHomePage:!1,title:"CooCox",description:"Visit to the Web site",source:"@site/docs/Product/Open-Source-Hardware/CooCox.md",sourceDirName:"Product/Open-Source-Hardware",slug:"/Product/Open-Source-Hardware/open_source_hardware_coocox",permalink:"/Product/Open-Source-Hardware/open_source_hardware_coocox",editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/Open-Source-Hardware/CooCox.md",version:"current",frontMatter:{id:"open_source_hardware_coocox",title:"CooCox",date:"2020-04-03T00:00:00.000Z"},sidebar:"docs",previous:{title:"Cookie",permalink:"/Product/Open-Source-Hardware/cookie"},next:{title:"Overview",permalink:"/Product/Open-Source-Hardware/open_source_hardware_all_pages"}},l=[{value:"Installation",id:"installation",children:[]},{value:"CooCox Open IDE",id:"coocox-open-ide",children:[]},{value:"Tool-chains setting in CoIDE",id:"tool-chains-setting-in-coide",children:[]},{value:"CoX-Peripheral Interface",id:"cox-peripheral-interface",children:[]}],p={toc:l};function u(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Visit to the Web site"),(0,a.kt)("p",null,"URL :\ud83c\udf0e",(0,a.kt)("a",{parentName:"p",href:"http://www.coocox.org/Index.html"},"http://www.coocox.org/Index.html"),"]","(",(0,a.kt)("a",{parentName:"p",href:"http://www.coocox.org/Index.html"},"http://www.coocox.org/Index.html"),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"CoIDE just provides development environment without\ntool-chains. So you need to install tool-chains at first. We use ARM gcc\n4.7 for tool-chains."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ARM GCC 4.7 Features:")),(0,a.kt)("p",null,"-"," All GCC 4.7 features, plus latest mainline features - Additional code\nsize optimizations - Newlib-nano: newlib branch optimized for code size"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://launchpad.net/gcc-arm-embedded/+download"},"Download the latest\narm-gcc-embbed")),(0,a.kt)("h2",{id:"coocox-open-ide"},"CooCox Open IDE"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CooCox")," provides integration development environment\ncalled ",(0,a.kt)("strong",{parentName:"p"},"CoIDE")," for ARM Cortex M series microcontrollers. ",(0,a.kt)("strong",{parentName:"p"},"CoIDE"),"\nsupports ARM gcc based development environment of ",(0,a.kt)("strong",{parentName:"p"},"eclipse"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"System requirements:")),(0,a.kt)("p",null,"-"," Windows XP SP3 / Windows Vista / Windows 7"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Features:")),(0,a.kt)("p",null,"-"," Free to use - Full functional IDE - Component-oriented development\nplatform - Internet-based, efficient integration of network resources -\nIntegrates CoOS - Peripheral registers"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://www.coocox.org/CooCox_CoIDE.htm"},"CoIDE Download and learn\nmore")," "),(0,a.kt)("h2",{id:"tool-chains-setting-in-coide"},"Tool-chains setting in CoIDE"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Before you use CoIDE to start your project, you need to\nconfig the GCC compiler at first."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://www.coocox.org/CoIDE/Compiler_Settings.html"},"Compiler Setting in\nCoIDE")),(0,a.kt)("h2",{id:"cox-peripheral-interface"},"CoX-Peripheral Interface"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cox-Peripheral interface")," is Common Wrapper Interface to\nport peripheral easily which is different in each vendors. If SPI is\ndesigned by Cox-Peripheral Interface starting as x(e.g. xGPIOModeSet),\nyou can operate by changing just SPI interface PIN setting in each MCUs\nor EVB-boards."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://www.coocox.org/COX.html"},"Learn more")))}u.isMDXComponent=!0}}]);