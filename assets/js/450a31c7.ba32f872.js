"use strict";(self.webpackChunkwi_znet_documentation=self.webpackChunkwi_znet_documentation||[]).push([[3815],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99942:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(83117),i=n(80102),r=(n(67294),n(3905)),o=["components"],l={id:"i2c",title:"Inter-Integrated Circuit (I2C)",date:new Date("2020-06-10T00:00:00.000Z")},s=void 0,d={unversionedId:"Product/iMCU/W7500/Peripherals-internal/i2c",id:"Product/iMCU/W7500/Peripherals-internal/i2c",title:"Inter-Integrated Circuit (I2C)",description:"Introduction",source:"@site/docs/Product/iMCU/W7500/Peripherals-internal/i2c.md",sourceDirName:"Product/iMCU/W7500/Peripherals-internal",slug:"/Product/iMCU/W7500/Peripherals-internal/i2c",permalink:"/Product/iMCU/W7500/Peripherals-internal/i2c",draft:!1,editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iMCU/W7500/Peripherals-internal/i2c.md",tags:[],version:"current",frontMatter:{id:"i2c",title:"Inter-Integrated Circuit (I2C)",date:"2020-06-10T00:00:00.000Z"},sidebar:"docs",previous:{title:"General Purpose Input/Outputs (GPIO)",permalink:"/Product/iMCU/W7500/Peripherals-internal/gpio"},next:{title:"Flash example (IAP example)",permalink:"/Product/iMCU/W7500/Peripherals-internal/iap-example"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Functional description",id:"functional-description",level:2},{value:"Master mode",id:"master-mode",level:3},{value:"Initialization",id:"initialization",level:4},{value:"Slave mode",id:"slave-mode",level:3},{value:"Peripheral_Examples",id:"peripheral_examples",level:2}],p={toc:u};function m(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"I2C"),"(Inter-Integrated Circuit) bus interface handles communications between the microcontroller and the serial I2C bus. It supports standard speed mode(100Kbps), Fast Mode(400Kbps)."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use APB interface"),(0,r.kt)("li",{parentName:"ul"},"Supports Slave and Master Mode"),(0,r.kt)("li",{parentName:"ul"},"Standard mode (up to 100 KHz)"),(0,r.kt)("li",{parentName:"ul"},"Fast mode (up to 400 KHz)"),(0,r.kt)("li",{parentName:"ul"},"Supports 7bit Slave address mode"),(0,r.kt)("li",{parentName:"ul"},"Start/Stop/Repeated Start detection"),(0,r.kt)("li",{parentName:"ul"},"Start/Stop/Repeated Start/Acknowledge generation"),(0,r.kt)("li",{parentName:"ul"},"Control the Read/Write operation"),(0,r.kt)("li",{parentName:"ul"},"General Call enable or disable"),(0,r.kt)("li",{parentName:"ul"},"Slave busy detection"),(0,r.kt)("li",{parentName:"ul"},"Repeated START")),(0,r.kt)("h2",{id:"functional-description"},"Functional description"),(0,r.kt)("p",null,"I2C is comprised of both master and slave functions. For proper operation, the SDA and SCL pins must be configured as open-drain signals. A I2C bus configuration is shown below Figure."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Figure 1 I2C Bus Configuration",src:n(88356).Z,title:"Figure 1 I2C Bus Configuration",width:"621",height:"166"})),(0,r.kt)("p",null,"In addition to receiving and transmitting data, this interface converts it from serial to parallel format and vice versa. The interrupt is enabled or disabled by software. The interface is connected to the I2C bus by a data pin (SDA) and by a Clock pin (SCL). It can be connected with a standard (up to 100 KHz), Fast mode (up to 400 KHz) I2C bus."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Figure 2 I2C block diagram",src:n(6477).Z,title:"Figure 2 I2C block diagram",width:"628",height:"269"})),(0,r.kt)("p",null,"SDA is the bi- directions serial data line and SCL is the bi-directions serial clock line. The bus is considered idle when both lines are high. Every transaction on the I2C bus is nine bits long, consisting of eight data bits and a single acknowledge bit and data must be transferred MSB first."),(0,r.kt)("p",null,"###Data validity"),(0,r.kt)("p",null,"The data on the SDA line must be stable during the HIGH period of the SCL. The HIGH or LOW state of the data line can only change when the clock signal on the SCL line is LOW (The below Figure). One clock pulse is generated for each data bit transferred."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(52279).Z,title:"Figure 3 Data Validity",width:"1067",height:"356"})),(0,r.kt)("p",null,"###Acknowledge"),(0,r.kt)("p",null,"All bus transactions have a required acknowledge clock cycle that is generated by the master. During the acknowledge cycle, the transmitter cannot operate the next operation."),(0,r.kt)("p",null,"###Bit Command Controller"),(0,r.kt)("p",null,"The Bit command Controller handles the actual transmission of data and the generation of the specific levels for START, STOP and Repeated START signals by controlling the SCL and SDA lines. The Byte Command controller tells the Bit command Controller which operation has to be performed. For a single byte read, the Bit command Controller receives 8 separate read command. Each bit-operation is divided into 5 pieces (idle and A,B,C,and D) except for a STOP operation which is divided into 4 pieces(idle and A, B,C)"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(12867).Z,title:"Figure 4 Bit Condition",width:"955",height:"779"})),(0,r.kt)("p",null,"####START and STOP Conditions"),(0,r.kt)("p",null,"The protocol of the I2C bus defines two states to START and STOP conditions.\nA High to Low transition on the SDA line while SCL is High is one unique case and indicates a START condition. A Low to High transition on the SDA line while SCL is high defines a STOP condition."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(75843).Z,title:"Figure 5 START and STOP Conditions",width:"978",height:"353"})),(0,r.kt)("p",null,"START and STOP conditions are always generated by the master.\nThis bus is considered to be again a certain time after the STOP condition. The bus stays busy if a Repeated START is generated instead of a STOP condition."),(0,r.kt)("p",null,"####RESTART Condition"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(16830).Z,title:"Figure 6 RESTART Conditions",width:"1299",height:"314"})),(0,r.kt)("p",null,"###Slave address"),(0,r.kt)("p",null,"The SDA line must be eight bits long.\nEach byte must be followed by an Acknowledge bit. "),(0,r.kt)("p",null,"![]",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Wiznet/img/products/w7500p/peripheral/i2c_7bit_slave_addr.jpg"},"https://github.com/Wiznet/img/products/w7500p/peripheral/i2c_7bit_slave_addr.jpg"),' "Figure 7 7-bit Slave address")'),(0,r.kt)("p",null,"###Read/Write bit"),(0,r.kt)("p",null,'This address is seven bits followed by an eight bit which is a data direction bit(R/\xaf("W" )) :\n\u20180\u2019 indicates a WRITE, \u20181\u2019 indicates a READ\nThere are two methods of setting data direction bit by I2Cx_CTR.\nThe 32-bits I2Cx_CTR is reconfigured with COREEN, INTEREN, MODE, ADDR10, CTRRWN, CTREN.\nCTREN bit select the R/W \u2013 a \u2018Zero\u2019 indicates the slave address bit 0, a \u2018one\u2019 indicates a CTRRWN bit.'),(0,r.kt)("p",null,"###Acknowledge(ACK) and Acknowledge(NACK)"),(0,r.kt)("p",null,"The acknowledge bit takes place after every bytes. The acknowledge bit allows the receiver to signal the transmitter that the byte was successfully received and another byte may be sent. The master generates all clock pulses, including acknowledge ninth clock."),(0,r.kt)("p",null,"###Data transfer"),(0,r.kt)("p",null,"The data transfer is managed through the shift, transmit data, and receive data registers.\nData transfers follow the format shown in the below Figure. After START condition, a Slave address is transmitted. If CTREN bit in the I2Cx_CTR register is enable, LSB of Slave address (bit 0) is superseded by value of CTRRWN bit in the I2Cx_CTR register."),(0,r.kt)("p",null,"If CTREN bit in the I2Cx_CTR register is disable, LSB of slave address is used for Read/Write operation."),(0,r.kt)("p",null,"###Operating Modes"),(0,r.kt)("p",null,"The interface can operate in one of four following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Master Transmitter Mode "),(0,r.kt)("li",{parentName:"ul"},"Master Receiver Mode"),(0,r.kt)("li",{parentName:"ul"},"Slave Transmitter Mode"),(0,r.kt)("li",{parentName:"ul"},"Slave Receiver Mode")),(0,r.kt)("p",null,"By default, it operates in slave mode. The interface switches from slave to master when it generates the mode bit in the I2Cx_CTR. And COREEN bit in the I2Cx_CTR must be switched from 1 to 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In Master mode"),(0,r.kt)("br",{parentName:"p"}),"\n","Master Transmitter Mode:\nIn this mode, data is transmitted from master to slave before the master transmitter mode can be entered and I2Cx_CTR must be initialized   "),(0,r.kt)("p",null,"Master Receiver Mode:\nIn this mode, data is received from slave to master before the master receive mode can be entered and I2Cx_CTR must be initialized    "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In Slave mode"),(0,r.kt)("br",{parentName:"p"}),"\n","Slave Transmitter Mode:\nIn this mode, data is transmitted from slave to master and setting of I2Cx_SADDR must be done. "),(0,r.kt)("p",null,"Slave Receiver Mode:\nIn this mode, data is received from master to slave before the master transmitter mode can be entered and setting of I2Cx_SADDR must be done. "),(0,r.kt)("p",null,"###Interrupts"),(0,r.kt)("p",null,"The I2C can generate interrupt when the following conditions are observed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start conditions on bus detected"),(0,r.kt)("li",{parentName:"ul"},"Stop conditions on bus detected"),(0,r.kt)("li",{parentName:"ul"},"Timeout error"),(0,r.kt)("li",{parentName:"ul"},"Master transaction completed"),(0,r.kt)("li",{parentName:"ul"},"Slave transaction received")),(0,r.kt)("p",null,"I2C bus have separate interrupt signals."),(0,r.kt)("h3",{id:"master-mode"},"Master mode"),(0,r.kt)("h4",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"The below figures that follow show the command sequences available for the I2C master."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(46370).Z,title:"Figure 10 I2C initial setting",width:"854",height:"834"})),(0,r.kt)("p",null,"The below figure shows the master operation using a 7-bit slave address."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(6246).Z,title:"Figure 11 Master TRANSMIT with ADDR10=0 in the I2Cx_CTR",width:"568",height:"838"})),(0,r.kt)("p",null,"below Figure shows the operation of repeated START.",(0,r.kt)("br",{parentName:"p"}),"\n","The repeated START operates for data read operation execution.",(0,r.kt)("br",{parentName:"p"}),"\n","The operation sequences are Slave address, send data, repeated START, and send data.  "),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(56596).Z,title:"Figure 12 Master Transmit with Repeated START",width:"874",height:"873"})),(0,r.kt)("h3",{id:"slave-mode"},"Slave mode"),(0,r.kt)("p",null,"The below Figure shows the command sequences available for the I2C slave."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(92865).Z,title:"Figure 13 Slave Command Sequence",width:"637",height:"808"})),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"peripheral_examples"},"Peripheral_Examples"),(0,r.kt)("p",null,":!: ",(0,r.kt)("strong",{parentName:"p"},"When data read operation use,you have to use the repeat(restart condition). It use between write and read operation.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Product/iMCU/W7500/Peripherals-internal/init"},"I2C Read/Write example")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Product/iMCU/W7500/Peripherals-internal/eeprom"},"I2C and M24CXX EEPROM communication example")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Product/iMCU/W7500/Peripherals-internal/lm75-temperature"},"I2C and LM75 Temperature Sensor communication example"))))}m.isMDXComponent=!0},12867:function(e,t,n){t.Z=n.p+"assets/images/i2c_bit_condition-c9606a06ceae83b3c0686d22df8a0160.jpg"},6477:function(e,t,n){t.Z=n.p+"assets/images/i2c_block_diagram-3e578d622c1d68b2ce8e449fc7653289.jpg"},88356:function(e,t,n){t.Z=n.p+"assets/images/i2c_bus_configuration-eb3c6f4fefc1f89b30454e626bce40af.jpg"},52279:function(e,t,n){t.Z=n.p+"assets/images/i2c_data_validity-87d5fdc4f5850b6a6af461f33cd1af05.jpg"},46370:function(e,t,n){t.Z=n.p+"assets/images/i2c_init_flow_chart-fa1c3f4c19baf195da69b38c35eb429c.jpg"},16830:function(e,t,n){t.Z=n.p+"assets/images/i2c_restart_condition-0cb5077a04ac8534297acf05a809e07b.jpg"},92865:function(e,t,n){t.Z=n.p+"assets/images/i2c_slave_command_flow_chart-6b892c75a04a2d8195a95ef970504f2d.jpg"},75843:function(e,t,n){t.Z=n.p+"assets/images/i2c_start_stop_condition-532addf1fef546cddeabccc527316f83.jpg"},6246:function(e,t,n){t.Z=n.p+"assets/images/i2c_tx_flow_chart-fd93cdaf65a4d0fbe88d99f3f471ed13.jpg"},56596:function(e,t,n){t.Z=n.p+"assets/images/i2c_tx_repeat_flow_chart-714b4776f2ddda8a639475f8d797583a.jpg"}}]);