{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Open-Source-Hardware/Tutorial.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Open-Source-Hardware/Tutorial.md","mtime":1596193974237},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-open-source-hardware-tutorial-md-0dc.json","mtime":1597141330196},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17fTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiUHJvZHVjdC9PcGVuLVNvdXJjZS1IYXJkd2FyZS9UdXRvcmlhbCIsImlkIjoiUHJvZHVjdC9PcGVuLVNvdXJjZS1IYXJkd2FyZS9UdXRvcmlhbCIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJUdXRvcmlhbCIsImRlc2NyaXB0aW9uIjoiVHV0b3JpYWwiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1Byb2R1Y3QvT3Blbi1Tb3VyY2UtSGFyZHdhcmUvVHV0b3JpYWwubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L09wZW4tU291cmNlLUhhcmR3YXJlL1R1dG9yaWFsIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9XaXpuZXQvZG9jdW1lbnRfZnJhbWV3b3JrL3RyZWUvbWFzdGVyL2RvY3MvUHJvZHVjdC9PcGVuLVNvdXJjZS1IYXJkd2FyZS9UdXRvcmlhbC5tZCJ9Oy8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J1R1dG9yaWFsJyxpZDondHV0b3JpYWwnLGNoaWxkcmVuOlt7dmFsdWU6J0JlZm9yZSBUdXRvcmlhbCcsaWQ6J2JlZm9yZS10dXRvcmlhbCcsY2hpbGRyZW46W119LHt2YWx1ZTonVHV0b3JpYWwgVXNpbmcgQ29JREUnLGlkOid0dXRvcmlhbC11c2luZy1jb2lkZScsY2hpbGRyZW46W119LHt2YWx1ZTonVHV0b3JpYWwgVXNpbmcgVzU1MDAnLGlkOid0dXRvcmlhbC11c2luZy13NTUwMCcsY2hpbGRyZW46W119LHt2YWx1ZTonQ2hhbmdlIGNvZGUgYmVmb3JlIGNvbXBpbGUnLGlkOidjaGFuZ2UtY29kZS1iZWZvcmUtY29tcGlsZScsY2hpbGRyZW46W119XX0se3ZhbHVlOidEb3dubG9hZCA6JyxpZDonZG93bmxvYWQtJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeGFtcGxlIDonLGlkOidleGFtcGxlLScsY2hpbGRyZW46W119XTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMiIseyJpZCI6InR1dG9yaWFsIn0sYFR1dG9yaWFsYCksbWR4KCJociIsbnVsbCksbWR4KCJoMyIseyJpZCI6ImJlZm9yZS10dXRvcmlhbCJ9LGBCZWZvcmUgVHV0b3JpYWxgKSxtZHgoImhyIixudWxsKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEb3dubG9hZCBwcm9ncmFtIGZpbGUoQ29JREUpIGFuZCBVU0IgZHJpdmUoQ29saW5rRXgpIGZyb20gYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cuY29vY294Lm9yZy9Db0NlbnRlci5odG1sIn0pLGBodHRwOi8vd3d3LmNvb2NveC5vcmcvQ29DZW50ZXIuaHRtYCksYC5gKSksbWR4KCJoMyIseyJpZCI6InR1dG9yaWFsLXVzaW5nLWNvaWRlIn0sYFR1dG9yaWFsIFVzaW5nIENvSURFYCksbWR4KCJociIsbnVsbCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQ2xpY2sgdGhlIENvSURFIGljb25gKSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgVGhlIHdlbGNvbWUgcGFnZSBpcyBhIGNvbnZlbmllbnQgZW50cnkgZm9yIOKAnEJyb3dzZSBpbiBSZXBvc2l0b3J54oCdLArigJxDcmVhdGUgYSBOZXcgUHJvamVjdOKAnSwg4oCcT3BlbiBhIFByb2plY3TigJ0sIHJlZmVyIHRvIOKAnFVzZXIgR3VpZGXigJ0gYW5kIGdvCnRvIOKAnEZvcnVtImApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBBIHdpemFyZCB3aW5kb3cgd2lsbCBwb3AgdXAsIGVudGVyIGEgbmFtZSBmb3IgdGhlIHByb2plY3QgKG15IHByb2plY3QKbmFtZTogTG9vcGJhY2tUZXN0KSksWW91IGNhbiBhbHNvIG1vZGlmeSB0aGUgUHJvamVjdCBQYXRoLmApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBDaG9vc2UgYSBtb2RlbC4gRm9yIGV4YW1wbGUsIHNlbGVjdCAnJ0NoaXAgTW9kZWwnLCB0aGVuIGNsaWNrIOKAnE5leHTigJ0uYCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFNlbGVjdCBhIGNoaXAuIEZvciBleGFtcGxlLCBzZWxlY3QgIk0wNTE2TEJOImApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYENsaWNrICJGaW5pc2giLiBDb0lERSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlcyBMb29wYmFja1Rlc3QuY29wcm9qCmZpbGUgYW5kIG9uZSBjb25maWd1cmF0aW9uOiAiTG9vcGJhY2tUZXN0Ii5gKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxgQ2xpY2sgdGhlIFJlcG9zaXRvcnkgQnV0dG9uYCkpKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBDaGVjayBhIGNvbXBvbmVudDsgZm9yIGV4YW1wbGUsIHNlbGVjdAonR1BJT2AsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgU1BJYCksYFVBUlRgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYENvWC5jb29raWUuTTA1MS5jb25maWdgKSxgQyBsaWJyYXJ5JydSZXRhcmdldCBwcmludGYnLiBDb0lERQp3aWxsIGF1dG9tYXRpY2FsbHkgY2hlY2sgdGhlIGNvbXBvbmVudHMsIHdoaWNoIGFyZSBkZXBlbmRlZCBieSB0aGUKY2hlY2tlZCBjb21wb25lbnQuYCkpLG1keCgiaDMiLHsiaWQiOiJ0dXRvcmlhbC11c2luZy13NTUwMCJ9LGBUdXRvcmlhbCBVc2luZyBXNTUwMGApLG1keCgiaHIiLG51bGwpLG1keCgiaDMiLHsiaWQiOiJjaGFuZ2UtY29kZS1iZWZvcmUtY29tcGlsZSJ9LGBDaGFuZ2UgY29kZSBiZWZvcmUgY29tcGlsZWApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFNlbGVjdCB0aGUgZmlsZSAic3RkaW8uaC9wcmludGYuYyIuIFlvdSB3YW50IHRvIHVzZSAicHJpbnRmIiwgeW91IGhhdmUKdG8gYWRkIGFzIGJlbG93LmApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWNwcCJ9KSxgCnZvaWQgUHJpbnRDaGFyKGNoYXIgYykKewogICAgLyogU2VuZCBhIGNoYXIgbGlrZTogCiAgICAgICB3aGlsZShUcmFuc2ZlciBub3QgY29tcGxldGVkKTsKICAgICAgIFRyYW5zbWl0IGEgY2hhcjsKICAgICovICAKICAgeFVBUlRDaGFyUHV0KHhVQVJUMF9CQVNFLGMpOyAvLyBhZGRpdGlvbmFsIGl0ZW1zCn0KYCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxgU2VsZWN0IHRoZSBkZWZpbmUgdmFyaWFibGUgaW4gImV0aGVybmV0L3c1NTAwIi4gWW91CnNob3VsZCBzZWxlY3QgaW50ZXJmYWNlIG1vZGUgYW5kIGtpbmQgb2YgY2hpcC4gYCksbWR4KCJibG9ja3F1b3RlIix7cGFyZW50TmFtZToibGkifSksbWR4KCJwcmUiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgI2RlZmluZSBfV0laQ0hJUF8gICAgICAgICAgICAgICAgICAgICAgNTUwMCAgIC8vIDUxMDAsIDUyMDAsIDU1MDAKCiNpZiAoX1dJWkNISVBfID09IDU1MDApCiAgI2RlZmluZSBfV0laQ0hJUF9JRF8gICAgICAgICAgICAgICAgICJXNTUwMFxcMCIKLy8gICAjZGVmaW5lIF9XSVpDSElQX0lPX01PREVfICAgICAgICAgICBfV0laQ0hJUF9JT19NT0RFX1NQSV9GRE1fCiAgICNkZWZpbmUgX1dJWkNISVBfSU9fTU9ERV8gICAgICAgICAgIF9XSVpDSElQX0lPX01PREVfU1BJX1ZETV8KICAgI2luY2x1ZGUgIlc1NTAwL3c1NTAwLmgiCiAgIFxcPG1hcmtkb3duXFw+IC0gU2VsZWN0IHRoZSBkZWZpbmUgdmFyaWFibGUgaW4gImNvbW1vbi9jb21tb24uaCIuIFlvdSBjYW4KYCkpLG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYG1vZGlmeSB0aGUgTG9nIExldmVsLiBgKSkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtY29tbW9uLmgifSksYC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEV0YyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KI2RlZmluZSBXSVpfTE9HX0xFVkVMICAgMiAgICAgICAvLyAwOiBObyBwcmludCwgIDE6IEVycm9yLCAgMjogRXJyb3IrTG9nLCAgMzogRXJyb3IrTG9nK0RlYnVnCmApKSxtZHgoImgyIix7ImlkIjoiZG93bmxvYWQtIn0sYERvd25sb2FkIDpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBFbnRlciB0aGUgbWVudSAodmlldyBgLGA+YCxgIENvbmZpZ3VyYXRpb24pYCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFlvdSBjYW4gc2VsZWN0IHRoZSBIYXJkd2FyZSBBZGFwdGVyIHR5cGUoQ29saW5rIEVYKWApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBJbiB0aGUgcHJvamVjdCB2aWV3LCBzZWxlY3QgdGhlIHBhcmVudCBkaXJlY3RvcnkgaW4gd2hpY2ggeW91IHdhbnQgdG8KY3JlYXRlIHRoZSBHcm91cCAoSWYgeW91IGRvIG5vdCBzZWxlY3QgdGhlIHBhcmVudCBkaXJlY3RvcnksIHRoZSBkZWZhdWx0CmlzIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcHJvamVjdCksIHNlbGVjdCBBZGQgR3JvdXAgYW5kIEFkZCBmaWxlIGluCmNvbnRleHQgbWVudWApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBZb3Ugc2hvdWxkIG1ha2UgdXAgc2FtZSBmaWxlIHBhdGhgKSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU2VsZWN0IHRoZSBjb21wbGllIGJ1dHRvbi4gSWYgbmVjZXNzYXJ5LCB5b3UgY2FuIHNlbGVjdCBSZWJ1aWxkIHRvCnJlY29tcGlsZSB5b3VyIHByb2plY3Qgb3Igc2VsZWN0IENsZWFuIHRvIGNsZWFuLXVwIHRoZSBwcm9qZWN0IHRoYXQgaGFzCmJlZW4gY29tcGlsZWQuYCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYGNvbXBpbGUgcmVzdWx0YCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYENsaWNrIHRoZSAiRG93bmxvYWQiIGJ1dHRvbiB0byBkb3dubG9hZCBjb2RlIHRvIGZsYXNoYCkpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYGRvd25sb2FkIHJlc3VsdGApKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBZb3UgY2FuIGNvbmZpcm0gdGhlIHNlcmlhbCB2YWx1ZSB0aHJvdWdoIHRlcm1pbmFsIHByb2dyYW1gKSksbWR4KCJoMiIseyJpZCI6ImV4YW1wbGUtIn0sYEV4YW1wbGUgOmApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}