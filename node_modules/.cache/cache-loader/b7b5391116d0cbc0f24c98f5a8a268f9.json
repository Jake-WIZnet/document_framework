{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Wi-Fi-Module/WizFi310/Programers-Guide/Examples.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Wi-Fi-Module/WizFi310/Programers-Guide/Examples.md","mtime":1596193974268},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-wi-fi-module-wiz-fi-310-programers-guide-examples-md-d67.json","mtime":1597141330206},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvYWxiaW5qb3NlcGgvRG9jdW1lbnRzL0dpdEh1Yi9kb2N1bWVudF9mcmFtZXdvcmsvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J2V4YW1wbGVzJyx0aXRsZTonRXhhbXBsZXMnLGRhdGU6bmV3IERhdGUoJzIwMjAtMDQtMTVUMDA6MDA6MDAuMDAwWicpfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6IlByb2R1Y3QvV2ktRmktTW9kdWxlL1dpekZpMzEwL1Byb2dyYW1lcnMtR3VpZGUvZXhhbXBsZXMiLCJpZCI6IlByb2R1Y3QvV2ktRmktTW9kdWxlL1dpekZpMzEwL1Byb2dyYW1lcnMtR3VpZGUvZXhhbXBsZXMiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiRXhhbXBsZXMiLCJkZXNjcmlwdGlvbiI6IkFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1Byb2R1Y3QvV2ktRmktTW9kdWxlL1dpekZpMzEwL1Byb2dyYW1lcnMtR3VpZGUvRXhhbXBsZXMubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L1dpLUZpLU1vZHVsZS9XaXpGaTMxMC9Qcm9ncmFtZXJzLUd1aWRlL2V4YW1wbGVzIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9XaXpuZXQvZG9jdW1lbnRfZnJhbWV3b3JrL3RyZWUvbWFzdGVyL2RvY3MvUHJvZHVjdC9XaS1GaS1Nb2R1bGUvV2l6RmkzMTAvUHJvZ3JhbWVycy1HdWlkZS9FeGFtcGxlcy5tZCIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiRmlybXdhcmUgVXBncmFkZShVc2luZyBPVEEpIiwicGVybWFsaW5rIjoiL2RvY3MvUHJvZHVjdC9XaS1GaS1Nb2R1bGUvV2l6RmkzMTAvUHJvZ3JhbWVycy1HdWlkZS9maXJtd2FyZV91cGdyYWRlX3VzaW5nX290YSJ9LCJuZXh0Ijp7InRpdGxlIjoiUXVpY2sgU3RhcnQgR3VpZGUiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L1dpLUZpLU1vZHVsZS9XaXpGaTMxMC9xdWlja19zdGFydF9ndWlkZSJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCB2YXIgcmlnaHRUb2M9W3t2YWx1ZTonQXNzb2NpYXRpb24gJmFtcDsgRGlzYXNzb2NpYXRpb24nLGlkOidhc3NvY2lhdGlvbi0tZGlzYXNzb2NpYXRpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J0V4YW1wbGUgLSBEYXRhIENvbW11bmljYXRpb24nLGlkOidleGFtcGxlLS0tZGF0YS1jb21tdW5pY2F0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeGFtcGxlIC0gU1NMIENvbm5lY3Rpb24nLGlkOidleGFtcGxlLS0tc3NsLWNvbm5lY3Rpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J0V4YW1wbGUgLSBTb2NrZXQgQ29ubmVjdGlvbiB3aXRoIERvbWFpbiBuYW1lJyxpZDonZXhhbXBsZS0tLXNvY2tldC1jb25uZWN0aW9uLXdpdGgtZG9tYWluLW5hbWUnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0V4YW1wbGUgLSBBdXRvIHJlLWNvbm5lY3Rpb24nLGlkOidleGFtcGxlLS0tYXV0by1yZS1jb25uZWN0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeGFtcGxlIC0gQXV0byByZS1zdGFydCcsaWQ6J2V4YW1wbGUtLS1hdXRvLXJlLXN0YXJ0JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeGFtcGxlIC0gQWlyIENvbW1hbmQnLGlkOidleGFtcGxlLS0tYWlyLWNvbW1hbmQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0V4YW1wbGUgLSBTZXJpYWwgdG8gV2ktRmkgU2V0dGluZyB1c2luZyBBbmRyb2lkIEFwcCcsaWQ6J2V4YW1wbGUtLS1zZXJpYWwtdG8td2ktZmktc2V0dGluZy11c2luZy1hbmRyb2lkLWFwcCcsY2hpbGRyZW46W119LHt2YWx1ZTonRXhhbXBsZSAtIE1RVFQnLGlkOidleGFtcGxlLS0tbXF0dCcsY2hpbGRyZW46W119LHt2YWx1ZTonRXhhbXBsZSAtIEdNTVAnLGlkOidleGFtcGxlLS0tZ21tcCcsY2hpbGRyZW46W119LHt2YWx1ZTonRXhhbXBsZSAtIFRoaW5nUGx1ZycsaWQ6J2V4YW1wbGUtLS10aGluZ3BsdWcnLGNoaWxkcmVuOltdfV07dmFyIG1ha2VTaG9ydGNvZGU9ZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKXtyZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307fTt2YXIgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jOnJpZ2h0VG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgyIix7ImlkIjoiYXNzb2NpYXRpb24tLWRpc2Fzc29jaWF0aW9uIn0sIkFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24iKSxtZHgoImg0Iix7ImlkIjoic3RhdGlvbi1tb2RlLXVzaW5nLXdwYTItc3RhdGljLWlwIn0sIlN0YXRpb24gTW9kZSB1c2luZyBXUEEyIFN0YXRpYyBJUCIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBjb25uZWN0IHRvIEFQIHVzaW5nIFdpekZpMzEwIHdpdGggc3RhdGljIElQXG5hZGRyZXNzLiBJbiB0aGlzIGV4YW1wbGUsIHRhcmdldCBBUCBpbmZvcm1hdGlvbiBpcyBhcyBiZWxvdy4gKCBTU0lEIDpcbldpekZpRGVtb0FQLCBTZWN1cml0eSA6IFdQQTIsIEtleSA6IDEyMzQ1Njc4ICkiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIkFUICAgICAgICAgICAgICAgICAgKFNlbnQgQVQgY29tbWFuZCB3aXRoIDB4MGQgKEhleCBvZiBFbnRlciBidXR0b24pKVxuW09LXSAgICAgICAgICAgICAgICAoUmVzcG9uc2UgbWVhbmluZyBzdWNjZXNzZnVsIGV4ZWN1dGlvbilcblxuQVQrV1NFVD0wLFdpekZpRGVtb0FQICAgKEFUIGNvbW1hbmQgZm9yIHNldHRpbmcgV2lGaSBhc3NvY2lhdGlvbilcbltPS11cblxuQVQrV1NFQz0wLFdQQTIsMTIzNDU2NzggKEFUIGNvbW1hbmQgZm9yIHNldHRpbmcgV2lGaSBzZWN1cml0eSlcbltPS11cblxuQVQrV05FVD0wLDE5Mi4xNjguMTIuMTAxLDI1NS4yNTUuMjU1LjAsMTkyLjE2OC4xMi4xIChBVCBjb21tYW5kIGZvciBzZXR0aW5nIFN0YXRpYyBJUCBhZGRyZXNzKVxuW09LXVxuXG5BVCtXSk9JTiAgICAgICAgICAgIChBVCBjb21tYW5kIGV4ZWN1dGluZyBBUCBhc3NvY2lhdGlvbilcbkpvaW5pbmcgOiBXaXpGaURlbW9BUFxuU3VjY2Vzc2Z1bGx5IGpvaW5lZCA6IFdpekZpRGVtb0FQXG5cbltMaW5rLVVwIEV2ZW50XVxuICBJUCBBZGRyICAgIDogMTkyLjE2OC4xMi4xMDFcbiAgR2F0ZXdheSAgIDogMTkyLjE2OC4xMi4xXG5bT0tdXG5cbkFUK1dMRUFWRSAgICAgICAgICAgKEFUIGNvbW1hbmQgbWFraW5nIGRpc2Fzc29jaWF0aW9uIGZyb20gQVAgYXNzb2NpYXRpb24pXG5cbltMaW5rLURvd24gRXZlbnRdXG5bT0tdXG4iKSksbWR4KCJoNCIseyJpZCI6InN0YXRpb24tbW9kZS11c2luZy13cGEyLWRoY3AifSwiU3RhdGlvbiBNb2RlIHVzaW5nIFdQQTIgREhDUCIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBjb25uZWN0IFdpekZpMzEwIHRvIHRhcmdldCBBUCB3aXRoIERDSFBcbkNsaWVudCBNb2RlICIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQgKFNlbnQgQVQgY29tbWFuZCB3aXRoIDB4MGQgKEhleCBvZiBFbnRlclxuYnV0dG9uKSkgW09LXSAoUmVzcG9uc2UgbWVhbmluZyBzdWNjZXNzZnVsIGV4ZWN1dGlvbilcblxuQVQrV1NFVD0wLFdpekZpRGVtb0FQIChBVCBjb21tYW5kIGZvciBzZXR0aW5nIFdpRmkgYXNzb2NpYXRpb24pIFtPS11cblxuQVQrV1NFQz0wLFdQQTIsMTIzNDU2NzggKEFUIGNvbW1hbmQgZm9yIHNldHRpbmcgV2lGaSBzZWN1cml0eSkgW09LXVxuQVQrV05FVD0xIChBVCBjb21tYW5kIGZvciBzZXR0aW5nIERIQ1ApIFtPS11cblxuQVQrV0pPSU4gKEFUIGNvbW1hbmQgZXhlY3V0aW5nIEFQIGFzc29jaWF0aW9uKSBKb2luaW5nIDogV2l6RmlEZW1vQVBcblN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG5bTGluay1VcCBFdmVudF1cblxuICAgIElQIEFkZHIgICAgOiAxOTIuMTY4LjEyLjEzXG4gICAgR2F0ZXdheSAgIDogMTkyLjE2OC4xMi4xXG5cbltPS11cblxuQVQrV0xFQVZFIChBVCBjb21tYW5kIG1ha2luZyBkaXNhc3NvY2lhdGlvbiBmcm9tIEFQIGFzc29jaWF0aW9uKVxuXG5bTGluay1Eb3duIEV2ZW50XSBbT0tdIFxuIikpLG1keCgiaDQiLHsiaWQiOiJhcC1tb2RlLXVzaW5nLXdwYTItc3RhdGljLWlwIn0sIkFQIE1vZGUgdXNpbmcgV1BBMiBTdGF0aWMgSVAiKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gc2V0IEFQIG1vZGUgdXNpbmcgV2l6RmkzMTAuIEluIEFQIG1vZGUsXG5XaXpGaTMxMCBoYXZlIHRvIHNldCBzdGF0aWMgSVAgYWRkcmVzcy4gKEFUK1dORVQ9MCx4eHgseHh4LHh4eCkgQWZ0ZXJcbnNldHRpbmcgQVAgbW9kZSwgV2l6RmkzMTAgd2lsbCBvcGVyYXRlIERIQ1AgU2VydmVyLiBUaHVzLCB3aGVuIHNtYXJ0XG5waG9uZSBvciBvdGhlciBkZXZpY2VzIGNvbm5lY3QgdG8gV2l6RmkzMTAsIFdpekZpMzEwIHdpbGwgZ2l2ZSBJUFxuYWRkcmVzcyB0byBjb25uZWN0ZWQgZGV2aWNlLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQgICAgICAgICAgICAgICAgICAoU2VudCBBVCBjb21tYW5kIHdpdGggMHgwZCAoSGV4IG9mIEVudGVyIGJ1dHRvbikpXG5bT0tdICAgICAgICAgICAgICAgIChSZXNwb25zZSBtZWFuaW5nIHN1Y2Nlc3NmdWwgZXhlY3V0aW9uKVxuXG5BVCtXU0VUPTEsV2l6RmkzMTBfQVAgICAoQVQgY29tbWFuZCBmb3Igc2V0dGluZyBXaUZpIGFzc29jaWF0aW9uIGluZm9ybWF0aW9uKVxuW09LXVxuXG5BVCtXU0VDPTEsV1BBMiwxMjM0NTY3OCAoQVQgY29tbWFuZCBmb3Igc2V0dGluZyBXaUZpIHNlY3VyaXR5KVxuW09LXVxuXG5BVCtXTkVUPTAsMTkyLjE2OC4xMi4xMDUsMjU1LjI1NS4yNTUuMCwxOTIuMTY4LjEyLjEgKEFUIGNvbW1hbmQgZm9yIHNldHRpbmcgU3RhdGljIElQIGFkZHJlc3MpXG5bT0tdXG5cbkFUK1dKT0lOICAgICAgICAgICAgKEFUIGNvbW1hbmQgZXhlY3V0aW5nIHJ1biBBUCBtb2RlKVxuSm9pbmluZyA6IFdpekZpMzEwX0FQXG5cbltMaW5rLVVwIEV2ZW50XVxuICBJUCBBZGRyICAgIDogMTkyLjE2OC4xMi4xMDVcbiAgR2F0ZXdheSAgIDogMTkyLjE2OC4xMi4xXG5bT0tdXG5cbkFUK1dMRUFWRSAgICAgICAgICAgKEFUIENvbW1hbmQgZGlzYXNzb2NpYXRpbmcgZnJvbSBBUCBhc3NvY2lhdGlvbikgXG5cbltMaW5rLURvd24gRXZlbnRdXG5bT0tdXG4iKSksbWR4KCJoMiIseyJpZCI6ImV4YW1wbGUtLS1kYXRhLWNvbW11bmljYXRpb24ifSwiRXhhbXBsZSAtIERhdGEgQ29tbXVuaWNhdGlvbiIpLG1keCgiaDQiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy10Y3AtY2xpZW50LWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFRDUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUiKSxtZHgoImg1Iix7ImlkIjoic29ja2V0LW9wZW4ifSwiU29ja2V0IE9wZW4iKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gb3BlbiAiLCI8IiwiVENQIENsaWVudCBTb2NrZXQiLCI+IiwiXG5hbmQgY29tbXVuaWNhdGUgd2l0aCBwZWVyIHN5c3RlbS4gQmVsb3cgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGhvdyB0byBzZXRcblRDUCBDbGllbnQgYW5kIGNoYW5nZSB0aGUgbW9kZSB0byBkYXRhIG1vZGUuIEl0IGFsc28gZXhwbGFpbnMgcGFyYW1ldGVyc1xub2YgIiwiPCIsIkFUK1NDT04iLCI+IiwiIGNvbW1hbmQuICAiKSxtZHgoInAiLG51bGwsIihBVCtTQ09OPSIsIjwiLCJPcGVuVHlwZSIsIj4iLCIsIiwiPCIsIlNvY2tldFR5cGUiLCI+IiwiLCIsIjwiLCJSZW1vdGVJUCIsIj4iLCIsIiwiPCIsIlJlbW90ZVBvcnQiLCI+IiwiLCIsIjwiLCJMb2NhbFBvcnQiLCI+IiwiLCIsIjwiLCJEYXRhTW9kZSIsIj4iLCIpICAiKSxtZHgoInAiLG51bGwsIklmIHlvdSBlbnRlciAiLCI8IiwiTyIsIj4iLCIgb3IgIiwiPCIsIlNPIiwiPiIsIiB2YWx1ZSB0byAiLCI8IiwiT3BlbiBUeXBlIiwiPiIsIiBwYXJhbWV0ZXIsIFdpekZpMzEwXG53aWxsIHRyeSB0byBjb25uZWN0IHRvIFRDUCBTZXJ2ZXIgaW1tZWRpYXRlbHkuIEJ1dCB3aGVuIHVzaW5nICIsIjwiLCJTIiwiPiIsIlxudmFsdWUsIFdpekZpMzEwIHdpbGwgdHJ5IHRvIGNvbm5lY3QgdG8gVENQIFNlcnZlciBhZnRlciByZWJvb3QgYW5kIHlvdVxuaGF2ZSB0byBzZXQgIiwiPCIsIlNvY2tldFR5cGUiLCI+IiwiLCIsIjwiLCJSZW1vdGVJUCIsIj4iLCIsIiwiPCIsIlJlbW90ZVBvcnQiLCI+IiwiIGFuZCAiLCI8IiwiTG9jYWxQb3J0IiwiPiIsIlxuYXMgYmVsb3ciLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLCJcbiIsIkluIG9yZGVyIHRvIHNldCBXaXpGaTMxMCB0byBkYXRhIG1vZGUsIHlvdSBoYXZlIHRvIGVudGVyIDEgdmFsdWUgdG9cbiIsIjwiLCJEYXRhIE1vZGUiLCI+IiwiIHBhcmFtZXRlciBvZiAiLCI8IiwiQVQrU0NPTiIsIj4iLCIgY29tbWFuZC4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uXG50byB0aGlzIGNvbW1hbmQsIHJlZmVyIHRvXG4iLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJhdF9jb21tYW5kcyNhdHNjb24ifSksIkFUK1NDT04iKSwiLiAgIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTW9kZTogRGF0YSBNb2RlLCBUQ1AgQ2xpZW50IiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlJlbW90ZSBJUCA6IDE5Mi4xNjguMTIuMTAyIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlJlbW90ZSBQb3J0IDogNTAwMCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJMb2NhbCBQb3J0IDogNTAwMSIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWNwcCJ9KSwiQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICAgICAgICggUmVmZXJzIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbkFUK1NDT049TyxUQ04sMTkyLjE2OC4xMi4xMDIsNTAwMCw1MDAxLDEgKCBBVCBjb21tYW5kIGNvbm5lY3Rpbmcgd2l0aCBhIFRDUCBDbGllbnQgU29ja2V0IClcbltPS11cblxuW0NPTk5FQ1QgMF0gICAgICAgICAgICAgICAgICAgICAgICAgIDw9IEF0IHRoaXMgcG9pbnQsIGEgVENQIGNvbm5lY3Rpb24gaXMgZG9uZSBcbiIpKSxtZHgoImg1Iix7ImlkIjoiZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbSJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJJZiBXaXpGaTMxMCBzdWNjZXNzZnVsbHkgY29ubmVjdHMgdG8gYSBwZWVyIHN5c3RlbSwgV2l6RmkzMTAgd2lsbCBwcmludCAiLCJbQ09OTkVDVChDSUQpXSIsIiBtZXNzYWdlIGFuZCBlbnRlciBkYXRhIG1vZGUuIEluIGRhdGEgbW9kZSwgV2l6RmkzMTAgY2FuIHNlbmQgc2VyaWFsIGRhdGEgdG8gcGVlciBzeXN0ZW0gYW5kIHJlY2VpdmUgbmV0d29yayBkYXRhIGZyb20gcGVlciBzeXN0ZW0gd2l0aG91dCBvdGhlclxudHJhbnNsYXRpb24uICIpLG1keCgiaDUiLHsiaWQiOiJzb2NrZXQtY2xvc2UifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJJbiBvcmRlciB0byBjbG9zZSBUQ1AgY29ubmVjdGlvbiwgV2l6RmkzMTAgaGFzIHRvIHN3aXRjaCB0byBBVCBDb21tYW5kIE1vZGUuICggV2hlbiArKysgbWVzc2FnZSBlbnRlcmVkLCBXaXpGaTMxMCBjYW4gYmUgY2hhbmdlZCB0byBBVCBDb21tYW5kIE1vZGUuICkgQWZ0ZXIgYmVpbmcgY2hhbmdlZCB0byBBVCBDb21tYW5kIE1vZGUsVENQIENvbm5lY3Rpb24gY2FuIGJlIGNsb3NlZCBieSB1c2luZyAiLCI8IiwiQVQrU01HTVQ9Q0lEIiwiPiIsIiBvciAiLCI8IiwiQVQrU01HTVQ9QUxMIiwiPiIsIiBjb21tYW5kLiAgIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJDaGVja2luZyBTb2NrZXQgU3RhdHVzIikpLG1keCgicCIsbnVsbCwiQWZ0ZXIgYmVpbmcgY2hhbmdlZCB0byBBVCBDb21tYW5kIE1vZGUsIFRDUFxuQ29ubmVjdGlvbiBjYW4gYmUgY2xvc2VkIGJ5IHVzaW5nICIsIjwiLCJBVCtTTUdNVD1DSUQiLCI+IiwiIG9yICIsIjwiLCJBVCtTTUdNVD1BTEwiLCI+IiwiXG5jb21tYW5kLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQrU01HTVQ9P1xuTnVtYmVyIG9mIFNvY2tldHMgOiAxIChTQ0lEL1NvY2tldC9Nb2RlL1JlbW90ZS9Mb2NhbC9EYXRhTW9kZSlcbjAvVENOLzE5Mi4xNjguMTIuMjM6NTAwMC81MDAxLzFcbltPS11cbiIpKSxtZHgoImg0Iix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdGNwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWRhdGEtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gRGF0YSBNb2RlIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgT3BlbiIpKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gb3BlbiAiLCI8IiwiVENQIFNlcnZlciBTb2NrZXQiLCI+IiwiIGFuZCBjb21tdW5pY2F0ZSB3aXRoIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyB0aGUgZXhhbXBsZSBmb3Igc2V0dGluZyBUQ1AgU2VydmVyIGFuZCB0aGVuIGNoYW5naW5nIHRvIGRhdGEgbW9kZS4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0ICIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLCByZWZlciB0b1xuIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiYXRfY29tbWFuZHMjYXRzY29uIn0pLCJBVCtTQ09OIiksImFuZCAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIjZXhhbXBsZS0tLWRhdGEtY29tbXVuaWNhdGlvbiJ9KSwiU29ja2V0IE9wZW4iKSwiLiAgIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIqIE1vZGUgOiBEYXRhIE1vZGUsIFRDUCBTZXJ2ZXJcbiogTG9jYWwgUG9ydCA6IDUwMDBcblxuXG5BUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgKCBSZWZlciB0byBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIEV4YW1wbGUgKVxuXG5BVCtTQ09OPU8sVFNOLCAsICw1MDAwLDEgICAgICAgICggQVQgY29tbWFuZCBsaXN0ZW5pbmcgd2l0aCBhIFRDUCBTZXJ2ZXIgU29ja2V0IClcbltPS11cblxuW0NPTk5FQ1QgMF0gICAgICAgICAgJiM2MDs9IFdoZW4gVENQIGNvbm5lY3Rpb24gaXMgZG9uZSwgeW91IGNhbiBzZWUgdGhpcyBtZXNzYWdlXG4iKSksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIikpLG1keCgicCIsbnVsbCwiRXhjaGFuZ2luZyBkYXRhIHdpdGggaXRzIHBlZXIgc3lzdGVtIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNleGNoYW5naW5nLWRhdGEtd2l0aC1hLXBlZXItc3lzdGVtIn0pLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksIi4iKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlNvY2tldCBDbG9zZSIpKSxtZHgoInAiLG51bGwsIkNsb3Npbmcgc29ja2V0IGNvbm5lY3Rpb24gaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiI3NvY2tldC1jbG9zZSJ9KSwiU29ja2V0IENsb3NlIiksIi4iKSxtZHgoImg1Iix7ImlkIjoiY2hlY2tpbmctc29ja2V0LXN0YXR1cyJ9LCJDaGVja2luZyBTb2NrZXQgU3RhdHVzIiksbWR4KCJwIixudWxsLCJDaGVja2luZyBzb2NrZXQgc3RhdHVzIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNzb2NrZXQtb3BlbiJ9KSwiQ2hlY2tpbmcgU29ja2V0IFN0YXR1cyIpLCIuICAiKSxtZHgoImg0Iix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdWRwLWNsaWVudC1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWRhdGEtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBVRFAgQ2xpZW50IGFuZCBleGNoYW5naW5nIGRhdGEgaW4gRGF0YSBNb2RlIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgT3BlbiIpLCJcblRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gb3BlbiAiLCI8IiwiVURQIENsaWVudCBTb2NrZXQiLCI+IiwiIGFuZCBjb21tdW5pY2F0ZSB0byBwZWVyIHN5c3RlbS4gQmVsb3cgaXMgYW4gZXhhbXBsZSBmb3Igc2V0dGluZyB1cCBVRFAgQ2xpZW50IGFuZCBjaGFuZ2luZyBpbnRvIGRhdGEgbW9kZS4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0ICIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLCByZWZlciB0byBbQVQrU0NPTiAoYXRfY29tbWFuZHMjYXRzY29uKSBhbmQgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiI3NvY2tldC1vcGVuIn0pLCJTb2NrZXRcbk9wZW4iKSwiLiAgIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTW9kZSA6IERhdGEgTW9kZSwgVURQIENsaWVudCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJSZW1vdGUgSVAgOiAxOTIuMTY4LjEyLjIzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlJlbW90ZSBQb3J0IDogNTAwMSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJMb2NhbCBQb3J0IDogNTAwMCIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIkFQIEFzc29jaWF0aW9uICAgICAgICAgICAgICAoIFJlZmVyIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbkFUK1NDT049TyxVQ04sMTkyLjE2OC4xMi4yMyw1MDAxLDUwMDAsMSBcbltPS11cblxuW0NPTk5FQ1QgMF0gICAgICAgICAgICAgICAgICAgICAgICAgICYjNjA7PSBBdCB0aGlzIHBvaW50LCBhIFVEUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIikpLG1keCgicCIsbnVsbCwiRXhjaGFuZ2luZyBkYXRhIHdpdGggaXRzIHBlZXIgc3lzdGVtIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNleGNoYW5naW5nLWRhdGEtd2l0aC1hLXBlZXItc3lzdGVtIn0pLCJFeGNoYW5naW5nXG5kYXRhIHdpdGggYSBwZWVyIHN5c3RlbSIpLCIuIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgQ2xvc2UiKSksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Ii8jc29ja2V0LWNsb3NlIn0pLCJTb2NrZXQgQ2xvc2UiKSwiLiIpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiQ2hlY2tpbmcgU29ja2V0IFN0YXR1cyIpKSxtZHgoInAiLG51bGwsIkNoZWNraW5nIHNvY2tldCBzdGF0dXMgaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiI2NoZWNraW5nLXNvY2tldC1zdGF0dXMifSksIkNoZWNraW5nIFNvY2tldCBTdGF0dXMiKSwiLiIpLG1keCgiaDQiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy11ZHAtc2VydmVyLWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFVEUCBTZXJ2ZXIgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUiKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlNvY2tldCBPcGVuIikpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBvcGVuICIsIjwiLCJVRFAgU2VydmVyIFNvY2tldCIsIj4iLCIgYW5kIGNvbW11bmljYXRlIHRvIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyBhbiBleGFtcGxlIGZvciBzZXR0aW5nIHVwIFVEUCBTZXJ2ZXIgYW5kIGNoYW5naW5nIGludG8gZGF0YSBtb2RlLiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgIiwiPCIsIkFUK1NDT04iLCI+IiwiIGNvbW1hbmQsIHJlZmVyIHRvICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6ImF0X2NvbW1hbmRzI2F0c2NvbiJ9KSwiQVQrU0NPTiIpLCJcbmFuZCAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIjc29ja2V0LW9wZW4ifSksIlNvY2tldCBPcGVuIiksIi4gICIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk1vZGU6IERhdGEgTW9kZSwgVURQIFNlcnZlciIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJMb2NhbCBQb3J0OiA1MDAwIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICggUmVmZXIgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuQVQrU0NPTj1PLFVTTiwgLCAsNTAwMCwxXG5bT0tdXG5cbltDT05ORUNUIDBdICAgICAgICAgICAgICAgICAgPD0gQXQgdGhpcyBwb2ludCwgYSBVRFAgY29ubmVjdGlvbiBpcyBkb25lIFxuIikpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiRXhjaGFuZ2luZyBkYXRhIHdpdGggYSBwZWVyIHN5c3RlbSIpKSxtZHgoInAiLG51bGwsIjwiLCJVRFAgU2VydmVyIE1vZGUiLCI+IiwiIGNhbiBjb25uZWN0IFVEUCBjb25uZWN0aW9uIHdpdGhvdXQgcGVlciBzeXN0ZW1cbmluZm9ybWF0aW9uIGxpa2UgSVAgYWRkcmVzcyBhbmQgcG9ydCBudW1iZXIuIEJ1dCBiZWZvcmUgcGVlciBzeXN0ZW0gaXNcbmNvbm5lY3RlZCB0byBXaXpGaTMxMCwgV2l6RmkzMTAgZG9lcyBub3Qgc2VuZCBkYXRhIHRvIHBlZXIgc3lzdGVtXG5iZWNhdXNlIFdpekZpMzEwIGRvZXMgbm90IGtub3cgaXRzIGluZm9ybWF0aW9uLiBUaHVzIHBlZXIgc3lzdGVtIG11c3RcbnNlbmQgZGF0YSB0byBXaXpGaTMxMCBpbiBvcmRlciB0byBrbm93IHBlZXIgc3lzdGVtXHUyMDE5cyBpbmZvcm1hdGlvbiBsaWtlXG5iZWxvdy4gIixtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvcHJvZHVjdHMvd2l6ZmkzMTAvd2l6ZmkzMTBwZy91ZHBfc2VydmVyX2NhdXRpb24ucG5nIiwiYWx0IjpudWxsfSkpLCIgVGhlXG5vdGhlciBpbmZvcm1hdGlvbiBmb3IgZXhjaGFuZ2luZyBkYXRhIGlzIHNhbWUgYXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiLyNleGNoYW5naW5nLWRhdGEtd2l0aC1hLXBlZXItc3lzdGVtIn0pLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhXG5wZWVyIHN5c3RlbSIpLCIuIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgQ2xvc2UiKSksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNzb2NrZXQtY2xvc2UifSksIlNvY2tldCBDbG9zZSIpLCIuIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJDaGVja2luZyBTb2NrZXQgU3RhdHVzIikpLG1keCgicCIsbnVsbCwiQ2hlY2tpbmcgc29ja2V0IHN0YXR1cyBpcyB0aGUgc2FtZSBhcyBwcmV2aW91cyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIjY2hlY2tpbmctc29ja2V0LXN0YXR1cyJ9KSwiQ2hlY2tpbmcgU29ja2V0IFN0YXR1cyIpLCIuICAiKSxtZHgoImg0Iix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdGNwLWNsaWVudC1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgQ2xpZW50IGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgT3BlbiIpKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gc2V0ICIsIjwiLCJUQ1AgQ2xpZW50IiwiPiIsIiBpbiIsIjwiLCJDb21tYW5kIE1vZGUiLCI+IiwiIGFuZCBjb21tdW5pY2F0ZSB0byBwZWVyIHN5c3RlbS4gQmVsb3cgaXMgdGhlIGV4YW1wbGUgZm9yIHNldHRpbmcgVENQIENsaWVudCBvbiB0aGUgQ29tbWFuZCBNb2RlIC4gSW4gb3JkZXIgdG8gZW50ZXIgaW4gdGhlIENvbW1hbmQgTW9kZSwgeW91IGhhdmUgdG8gZW50ZXIgMCB2YWx1ZSB0byAiLCI8IiwiRGF0YSBNb2RlIiwiPiIsIiBwYXJhbWV0ZXIgb2ZcbiIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gdG8gdGhpcyBjb21tYW5kLCByZWZlciB0b1xuIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiYXRfY29tbWFuZHMjYXRzY29uIn0pLCJBVCtTQ09OIiksIiAgIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTW9kZSA6IENvbW1hbmQgTW9kZSwgVENQIENsaWVudCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJSZW1vdGUgSVA6IDE5Mi4xNjguMTIuMjMiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiUmVtb3RlIFBvcnQgOiA1MDAwIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkxvY2FsIFBvcnQgOiA1MDAxIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICggUmVmZXIgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuQVQrU0NPTj1PLFRDTiwxOTIuMTY4LjEyLjIzLDUwMDAsNTAwMSwwXG5bT0tdXG5cbltDT05ORUNUIDBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICYjNjA7PSBBdCB0aGlzIHBvaW50LCBhIFRDUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJoNSIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tMSJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJJZiBXaXpGaTMxMCBjb25uZWN0cyB0byBwZWVyIHN5c3RlbSBzdWNjZXNzZnVsbHksIFdpekZpMzEwIHdpbGwgcHJpbnRcbiIsIltDT05ORUNUKENJRCldIiwiIG1lc3NhZ2UuIEF0IHRoaXMgdGltZSwgV2l6RmkzMTAgaXMgaW4gY29tbWFuZCBtb2RlLiBJblxub3JkZXIgdG8gc2VuZCBkYXRhIHRvIHBlZXIgc3lzdGVtLCB5b3UgaGF2ZSB0byB1c2UgIiwiPCIsIkFUK1NTRU5EPUNJRCxcbkRlc3RpbmF0aW9uIElQLCBEZXN0aW5hdGlvbiBQb3J0LCBEYXRhIExlbmd0aCIsIj4iLCIgY29tbWFuZC4gSWYgeW91IGlucHV0XG5zZXJpYWwgY29tbWFuZCBsaWtlICIsIjwiLCJEYXRhIExlbmd0aCIsIj4iLCIgLCBXaXpGaTMxMCB3aWxsIHNlbmQgc2VyaWFsIGRhdGEgdG9cbnBlZXIgc3lzdGVtLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQrU1NFTkQ9MCwsLDUgICAoIFNlbmRpbmcgZGF0YSB0byBhIFNvY2tldCB3aXRoIENJRCAwIClcbkhlbGxvICAgICAgICAgICAgICYjNjA7PSBXaGVuIHNlcmlhbCBkYXRhIGlzIDVieXRlLCBXaXpGaTMxMCBzZW5kIHRoaXMgZGF0YSB0byBwZWVyIHN5c3RlbVxuW09LXVxuXG57MCwxOTIuMTY4LjEyLjIzLDUwMDAsMTF9SGkgV2l6RmkzMTAgICggUmVjZWl2aW5nIGRhdGEgZnJvbSBwZWFyIHN5c3RlbSApXG4iKSksbWR4KCJoNSIseyJpZCI6InNvY2tldC1jbG9zZS0xIn0sIlNvY2tldCBDbG9zZSIpLG1keCgicCIsbnVsbCwiSW4gIiwiPCIsIkFUIENvbW1hbmQgTW9kZSIsIj4iLCIsIFRDUCBjb25uZWN0aW9uIGNhbiBiZSBjbG9zZWQgdGhyb3VnaFxuIiwiPCIsIkFUK1NNR01UPUNJRCIsIj4iLCIgb3IgIiwiPCIsIkFUK1NNR01UPUFMTCIsIj4iLCIgY29tbWFuZC4iKSxtZHgoImg1Iix7ImlkIjoiY2hlY2tpbmctc29ja2V0LXN0YXR1cy0xIn0sIkNoZWNraW5nIFNvY2tldCBTdGF0dXMiKSxtZHgoInAiLG51bGwsIkluICIsIjwiLCJBVCBDb21tYW5kIE1vZGUiLCI+IiwiLCBJbmZvcm1hdGlvbiBvZiBjb25uZWN0ZWQgc29ja2V0cyBhcmUgc2hvd24gYnlcbnVzaW5nICIsIjwiLCJBVCtTTUdNVD0/IiwiPiIsIiBjb21tYW5kLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQrU01HTVQ9P1xuTnVtYmVyIG9mIFNvY2tldHMgOiAxIChTQ0lEL1NvY2tldC9Nb2RlL1JlbW90ZS9Mb2NhbC9EYXRhTW9kZSlcbjAvVENOLzE5Mi4xNjguMTIuMjM6NTAwMC81MDAxLzBcbltPS11cbiIpKSxtZHgoImg0Iix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdGNwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgT3BlbiIpKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gc2V0ICIsIjwiLCJUQ1AgU2VydmVyIiwiPiIsIiBpbiAiLCI8IiwiQ29tbWFuZCBNb2RlIiwiPiIsIiBhbmQgY29tbXVuaWNhdGUgdG8gcGVlciBzeXN0ZW0uIEJlbG93IGlzIHRoZSBleGFtcGxlIGZvciBzZXR0aW5nIFRDUCBTZXJ2ZXIgb24gdGhlIENvbW1hbmQgTW9kZS4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0ICIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLCByZWZlciB0b1xuIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiYXRfY29tbWFuZHMjYXRzY29uIn0pLCJBVCtTQ09OIiksIlxuYW5kICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNzb2NrZXQtb3BlbiJ9KSwiU29ja2V0IE9wZW4iKSwiLiAgIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTW9kZSA6IENvbW1hbmQgTW9kZSwgVENQIFNlcnZlciAiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTG9jYWwgUG9ydCA6IDUwMDAiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgKCBSZWZlciB0byBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIEV4YW1wbGUgKVxuXG5BVCtTQ09OPU8sVFNOLCAsICw1MDAwLDAgICAgICAgICggQVQgY29tbWFuZCBsaXN0ZW5pbmcgd2l0aCBhIFRDUCBTZXJ2ZXIgU29ja2V0IClcbltPS11cblxuW0NPTk5FQ1QgMF0gXG4iKSksbWR4KCJoNSIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tMiJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBpdHMgcGVlciBzeXN0ZW0gaXMgdGhlIHNhbWUgd2l0aCBwcmV2aW91cyIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Ii8jZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbSJ9KSwiRXhjaGFuZ2luZyBkYXRhIHdpdGggYSBwZWVyc3lzdGVtIiksIi4iKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlLTIifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIHdpdGggcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiI3NvY2tldC1jbG9zZSJ9KSwiU29ja2V0XG5DbG9zZSIpLCIuICAiKSxtZHgoImg0Iix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdWRwLWNsaWVudC1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBVRFAgQ2xpZW50IGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTb2NrZXQgT3BlbiIpKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gc2V0ICIsIjwiLCJVRFAgQ2xpZW50IiwiPiIsIiBpbiAiLCI8IiwiQ29tbWFuZCBNb2RlIiwiPiIsIiBhbmQgY29tbXVuaWNhdGUgdG8gcGVlciBzeXN0ZW0uIEJlbG93IGlzIGFuIGV4YW1wbGUgZm9yIHNldHRpbmcgVURQIENsaWVudCBvbiBDb21tYW5kIE1vZGUuIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCAiLCI8IiwiQVQrU0NPTiIsIj4iLCIgY29tbWFuZCwgcmVmZXIgdG9cbiIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6ImF0X2NvbW1hbmRzI2F0c2NvbiJ9KSwiQVQrU0NPTiIpLCJcbmFuZCAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIjc29ja2V0LW9wZW4ifSksIlNvY2tldCBPcGVuIiksIi4gICIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk1vZGUgOiBDb21tYW5kIE1vZGUsIFVEUCBDbGllbnQgIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlJlbW90ZSBJUCA6IDE5Mi4xNjguMTIuMjMiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiUmVtb3RlIFBvcnQgOiA1MDAxIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkxvY2FsIFBvcnQgOiA1MDAwIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICggUmVmZXIgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuQVQrU0NPTj1PLFVDTiwxOTIuMTY4LjEyLjIzLDUwMDEsNTAwMCwwIFxuW09LXVxuXG5bQ09OTkVDVCAwXSAgICAgICAgICAgICAgICAgICAgICAgICAgJiM2MDs9IEF0IHRoaXMgcG9pbnQsIGEgVURQIGNvbm5lY3Rpb24gaXMgZG9uZSBcbiIpKSxtZHgoImg1Iix7ImlkIjoiZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbS0zIn0sIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGEgcGVlciBzeXN0ZW0iKSxtZHgoInAiLG51bGwsIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGl0cyBwZWVyIHN5c3RlbSBpcyB0aGUgc2FtZSBhcyBwcmV2aW91cyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIvI2V4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0ifSksIkV4Y2hhbmdpbmdcbmRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksIi4iKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlLTMifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNzb2NrZXQtY2xvc2UifSksIlNvY2tldFxuQ2xvc2UiKSwiLiAgIiksbWR4KCJoNCIseyJpZCI6Im1ldGhvZC1vZi1zZXR0aW5nLXVkcC1zZXJ2ZXItYW5kLWV4Y2hhbmdpbmctZGF0YS1pbi1jb21tYW5kLW1vZGUifSwiTWV0aG9kIG9mIHNldHRpbmcgVURQIFNlcnZlciBhbmQgZXhjaGFuZ2luZyBkYXRhIGluIENvbW1hbmQgTW9kZSIpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiU29ja2V0IE9wZW4iKSksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgaG93IHRvIG9wZW4gIiwiPCIsIlVEUCBTZXJ2ZXIgU29ja2V0IiwiPiIsIlxuaW4gQ29tbWFuZCBNb2RlIGFuZCBjb21tdW5pY2F0ZSB0byBwZWVyIHN5c3RlbS4gQmVsb3cgaXMgYW4gZXhhbXBsZSBmb3JcbnNldHRpbmcgVURQIFNlcnZlciBvbiBDb21tYW5kIE1vZGUuIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLCByZWZlciB0byAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJhdF9jb21tYW5kcyNhdHNjb24ifSksIkFUK1NDT04iKSwiIGFuZCAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIjc29ja2V0LW9wZW4ifSksIlNvY2tldCBPcGVuIiksIi4gICIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk1vZGUgOiBDb21tYW5kIE1vZGUsIFVEUCBTZXJ2ZXIiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTG9jYWwgUG9ydCA6IDUwMDAiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgKCBSZWZlciB0byBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIEV4YW1wbGUgKVxuXG5BVCtTQ09OPU8sVVNOLCAsICw1MDAwLDAgXG5bT0tdXG5cbltDT05ORUNUIDBdIFxuIikpLG1keCgiaDUiLHsiaWQiOiJleGNoYW5naW5nLWRhdGEtd2l0aC1hLXBlZXItc3lzdGVtLTQifSwiRXhjaGFuZ2luZyBkYXRhIHdpdGggYSBwZWVyIHN5c3RlbSIpLG1keCgicCIsbnVsbCwiPCIsIlVEUCBTZXJ2ZXIgTW9kZSIsIj4iLCIgb2YgV2l6RmkzMTAgY2FuIGNvbm5lY3QgVURQIGNvbm5lY3Rpb24gd2l0aG91dCBwZWVyXG5zeXN0ZW0gaW5mb3JtYXRpb24gbGlrZSBJUCBhZGRyZXNzIGFuZCBwb3J0IG51bWJlci4gQmVmb3JlIHBlZXIgc3lzdGVtXG5pcyBjb25uZWN0ZWQgdG8gV2l6RmkzMTAsIFdpekZpMzEwIGRvZXMgbm90IHNlbmQgZGF0YSB0byBwZWVyIHN5c3RlbS4gU29cbnlvdSBzaG91bGQgYmUgY2FyZWZ1bCB3aGVuIHVzaW5nICIsIjwiLCJVRFAgU2VydmVyIE1vZGUiLCI+IiwiLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiezAsMTkyLjE2OC4xMi4yMyw1MDAxLDExfUhpIFdpekZpMzEwICAoIFJlY2VpdmluZyBkYXRhIGZyb20gcGVlciBzeXN0ZW0gKVxuXG5BVCtTU0VORD0wLCwsNSAgICAgICAgICAgICAgICAgICAgICggU2VuZGluZyBkYXRhIHRvIGEgU29ja2V0IHdpdGggQ0lEIDAgKVxuSGVsbG8gICAgICAgICAgICYjNjA7PSBXaGVuIHNlcmlhbCBkYXRhIGlzIDVieXRlLCBXaXpGaTMxMCBzZW5kIHRoaXMgZGF0YSB0byBwZWVyIHN5c3RlbVxuW09LIF1cbiIpKSxtZHgoImg0Iix7ImlkIjoiYXRzY29uIn0sIkFUK1NDT04iKSxtZHgoInAiLG51bGwsIkFUK1NDT049IiwiPCIsIk9wZW5UeXBlIiwiPiIsIiwiLCI8IiwiU29ja2V0VHlwZSIsIj4iLCIsIiwiPCIsIlJlbW90ZUlQIiwiPiIsIiwiLCI8IiwiUmVtb3RlUG9ydCIsIj4iLCIsIiwiPCIsIkxvY2FsUG9ydCIsIj4iLCIsIiwiPCIsIkRhdGFNb2RlIiwiPiIsIiAgIiksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgdGhlIHVzYWdlIG9mICIsIjwiLCJPcGVuIFR5cGUiLCI+IiwiIHBhcmFtZXRlciBvZlxuIiwiPCIsIkFUK1NDT04iLCI+IiwiIGNvbW1hbmQuIFRoaXMgdGFibGUgZGVzY3JpYmVzIHZhbHVlcyBvZiAiLCI8IiwiT3BlbiBUeXBlIiwiPiIsIlxucGFyYW1ldGVyLiIpLG1keCgidGFibGUiLG51bGwsbWR4KCJ0aGVhZCIse3BhcmVudE5hbWU6InRhYmxlIn0sbWR4KCJ0ciIse3BhcmVudE5hbWU6InRoZWFkIn0sbWR4KCJ0aCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6bnVsbH0pLCJQYXJhbWV0ZXIiKSxtZHgoInRoIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksIk1lYW5pbmciKSkpLG1keCgidGJvZHkiLHtwYXJlbnROYW1lOiJ0YWJsZSJ9LG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiUyIpLG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiUmVnaXN0ZXIgYXMgYSBTZXJ2aWNlIikpLG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiTyIpLG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiT3BlbiBhdCBPbmNlIikpLG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOm51bGx9KSwiU08iKSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjpudWxsfSksIk9wZW4gYXQgT25jZSAmIFJlZ2lzdGVyIGFzIGEgU2VydmljZSIpKSkpLG1keCgiaDUiLHsiaWQiOiJzLS1yZWdpc3Rlci1hcy1hLXNlcnZpY2UifSwiPCIsIlMiLCI+IiwiIDogUmVnaXN0ZXIgYXMgYSBTZXJ2aWNlIiksbWR4KCJwIixudWxsLCJXaGVuIHVzaW5nIHRoaXMgcGFyYW1ldGVyLCBXaXpGaTMxMCB3aWxsIHRyeSB0byBjb25uZWN0IHRvIHBlZXIgc3lzdGVtXG51c2luZyBUQ1Agb3IgVURQIHdoZW4gcG93ZXIgaXMgb24uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBVCtXTEVBVkVcbltPS11cblxuQVQrV1NFVD0wLFdpekZpRGVtb0FQXG5bT0tdXG5cbkFUK1dTRUM9MCxXUEEyLDEyMzQ1Njc4XG5bT0tdXG5cbkFUK1dORVQ9MVxuW09LXVxuXG5BVCtTQ09OPVMsVFNOLCwsNTAwMCwwXG5bT0tdXG5cbkFUK01QUk9GPVNcbltPS11cblxuQVQrTVJFU0VUXG5bT0tdXG5XaXpGaTMxMCBWZXJzaW9uIDAuOS4wLjAgKFdJWm5ldCBDby5MdGQpXG5Kb2luaW5nIDogV2l6RmlEZW1vQVBcblN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG5bTGluay1VcCBFdmVudF1cbiAgSVAgQWRkciAgICA6IDE5Mi4xNjguMTIuMTBcbiAgR2F0ZXdheSAgICA6IDE5Mi4xNjguMTIuMVxuXG5BVCtTTUdNVD0/XG5OdW1iZXIgb2YgU29ja2V0cyA6IDEgKFNDSUQvTW9kZS9SZW1vdGUvTG9jYWwvRGF0YU1vZGUpXG4wL1RTTi8wLjAuMC4wOjAvNTAwMC8wXG5bT0tdXG4iKSksbWR4KCJoNSIseyJpZCI6Im8tLW9wZW4tYXQtb25jZSJ9LCI8IiwiTyIsIj4iLCIgOiBPcGVuIGF0IE9uY2UiKSxtZHgoInAiLG51bGwsIldoZW4gdXNpbmcgdGhpcyBwYXJhbWV0ZXIsIFdpekZpMzEwIHdpbGwgdHJ5IHRvIGNvbm5lY3QgdG8gcGVlciBzeXN0ZW1cbnVzaW5nIFRDUCBvciBVRFAgd2hlbiBlbnRlciB0aGUgIiwiPCIsIkFUK1NDT04iLCI+IiwiIGNvbW1hbmQuIEZvciB1c2luZyB0aGlzXG5wYXJhbWV0ZXIsIFdpekZpMzEwIHNob3VsZCBiZSBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBBUCBvciBydW5uaW5nIEFQXG5tb2RlLiBJbiB0aGlzIHNlY3Rpb24sIHdlIGhhdmUgb25seSBleHBsYWluZWQgc3RlcHMgaW4gU3RhdGlvbiBNb2RlLiBJblxuQVAgTW9kZSwgeW91IGNhbiB1c2UgdGhpcyBjb21tYW5kIGxpa2UgaW4gU3RhdGlvbiBNb2RlICAiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIkFUK1dMRUFWRVxuW09LXVxuXG5BVCtXU0VUPTAsV2l6RmlEZW1vQVBcbltPS11cblxuQVQrV1NFQz0wLFdQQTIsMTIzNDU2NzhcbltPS11cblxuQVQrV05FVD0xXG5bT0tdXG5cbkFUK1dKT0lOXG5Kb2luaW5nIDogV2l6RmlEZW1vQVBcblN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG5bTGluay1VcCBFdmVudF1cbiAgSVAgQWRkciAgICA6IDE5Mi4xNjguMTIuMTBcbiAgR2F0ZXdheSAgICA6IDE5Mi4xNjguMTIuMVxuW09LXVxuXG5BVCtTQ09OPU8sVENOLDE5Mi4xNjguMTIuMjMsNTAwMCwsMFxuW09LXVxuXG5bQ09OTkVDVCAwXVxuIikpLG1keCgiaDUiLHsiaWQiOiJzby1vcGVuLWF0LW9uY2UtLXJlZ2lzdGVyLWFzLWEtc2VydmljZSJ9LCI8IiwiU08iLCI+IiwiIE9wZW4gYXQgT25jZSAmIFJlZ2lzdGVyIGFzIGEgU2VydmljZSIpLG1keCgicCIsbnVsbCwiV2hlbiB1c2luZyB0aGlzIHBhcmFtZXRlciwgeW91IGNhbiB1c2UgZnVuY3Rpb25zIG9mICIsIjwiLCJTIiwiPiIsIiBhbmQgIiwiPCIsIk8iLCI+IiwiIGF0XG50aGUgc2FtZSB0aW1lLiBXaGVuIHVzaW5nIHRoaXMgcGFyYW1ldGVyLCBXaXpGaTMxMCB3aWxsIHRyeSB0byBjb25uZWN0XG50byBwZWVyIHN5c3RlbSBtb21lbnRhcmlseS4gQW5kIGlmIHlvdSByZXN0YXJ0IFdpekZpMzEwLCBXaXpGaTMxMCB3aWxsXG50cnkgdG8gY29ubmVjdCB0byBBUCBhbmQgcGVlciBzeXN0ZW0uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBVCtXTEVBVkVcbltPS11cblxuQVQrV1NFVD0wLFdpekZpRGVtb0FQXG5bT0tdXG5cbkFUK1dTRUM9MCxXUEEyLDEyMzQ1Njc4XG5bT0tdXG5cbkFUK1dORVQ9MVxuW09LXVxuXG5BVCtXSk9JTlxuSm9pbmluZyA6IFdpekZpRGVtb0FQXG5TdWNjZXNzZnVsbHkgam9pbmVkIDogV2l6RmlEZW1vQVBcblxuW0xpbmstVXAgRXZlbnRdXG4gIElQIEFkZHIgICAgOiAxOTIuMTY4LjEyLjEwXG4gIEdhdGV3YXkgICAgOiAxOTIuMTY4LjEyLjFcbltPS11cblxuQVQrU0NPTj1TTyxUQ04sMTkyLjE2OC4xMi4yMyw1MDAwLCwwXG5bT0tdXG5bQ09OTkVDVCAwXVxuXG5BVCtNUFJPRj1TXG5bT0tdXG5cbkFUK01SRVNFVFxuW09LXVxuXG5XaXpGaTMxMCBWZXJzaW9uIDAuOS4wLjAgKFdJWm5ldCBDby5MdGQpXG5Kb2luaW5nIDogV2l6RmlEZW1vQVBcblN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG5bTGluay1VcCBFdmVudF1cbiAgSVAgQWRkciAgICA6IDE5Mi4xNjguMTIuMTBcbiAgR2F0ZXdheSAgICA6IDE5Mi4xNjguMTIuMVxuXG5bQ09OTkVDVCAwXVxuIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tc3NsLWNvbm5lY3Rpb24ifSwiRXhhbXBsZSAtIFNTTCBDb25uZWN0aW9uIiksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgaG93IHRvIGNvbm5lY3QgdG8gYW5kIGNvbW11bmljYXRlIHdpdGggU1NMIHNlcnZlci5cblRvIGNvbm5lY3QgdG8gU1NMIHNlcnZlciwgdXNlICIsIjwiLCJUQ1MoVENQIENsaWVudCBTU0wpIiwiPiIsIiBwYXJhbWV0ZXIgb2ZcbiIsIjwiLCJBVCtTQ09OIiwiPiIsIiBjb21tYW5kLiAoIFdoZW4gdXNpbmcgVURQIGFuZCBUQ1AgU2VydmVyLCBXaXpGaTMxMCBjYW5ub3RcbnVzZSBTU0wgQ29ubmVjdGlvbi4gKSBJbiBvcmRlciB0byB1c2UgU1NMIGNvbm5lY3Rpb24sIHlvdSBjYW4gdXNlIEFUXG5jb21tYW5kIGFzIGJlbG93LiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICAgICAgICggUmVmZXJzIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbkFUK0ZETlM9ZmFjZWJvb2suY29tLDMwMDBcbjE3My4yNTIuMTIwLjY4XG5bT0tdXG5BVCtTQ09OPU8sVENTLDE3My4yNTIuMTIwLjY4LDQ0MywsMCAgICAoIENvbm5lY3QgdG8gRmFjZWJvb2suY29tIHVzaW5nIFNTTCBDb25uZWN0aW9uIClcbltPS11cblxuW0NPTk5FQ1QgMF1cbkFUK1NTRU5EPTAsLCwxOFxuWzAsLCwxOF1cbi4uLlxuR0VUIC8gSFRUUC8xLjF7MHgwZH17MHgwYX0gICAgICAgICAgICAgICAgICAgICAgKCBTZW5kIGRhdGEgdG8gRmFjZWJvb2sgKVxuezB4MGR9ezB4MGF9XG4uLi5cbltPS11cbnswLDE3My4yNTIuMTIwLjY4LDQ0MywxNTAwfUhUVFAvMS4xIDQwMCBCYWQgUmVxdWVzdCAgICAgKCBSZWNlaXZlIGRhdGEgZnJvbSBGYWNlYm9vayApXG5Db250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxuRGF0ZTogVHVlLCAyNCBNYXkgMjAxNiAwNjowMzo0OCBHTVRcbkNvbm5lY3Rpb246IGNsb3NlXG5Db250ZW50LUxlbmd0aDogMjk1OVxuXG4mIzYwOyFET0NUWVBFIGh0bWwmIzYyO1xuJiM2MDtodG1sIGxhbmc9XCJlblwiIGlkPVwiZmFjZWJvb2tcIiYjNjI7XG4mIzYwO2hlYWQmIzYyO1xuJiM2MDt0aXRsZSYjNjI7RmFjZWJvb2sgfCBFcnJvciYjNjA7L3RpdGxlJiM2MjtcbiYjNjA7bWV0YSBjaGFyc2V0PVwidXRmLThcIiYjNjI7XG4mIzYwO21ldGEgaHR0cC1lcXVpdj1cImNhY2hlLWNvbnRyb2xcIiBjb250ZW50PVwibm8tY2FjaGVcIiYjNjI7XG4mIzYwO21ldGEgaHR0cC1lcXVpdj1cImNhY2hlLWNvbnRyb2xcIiBjb250ZW50PVwibm8tc3RvcmVcIiYjNjI7XG4mIzYwO21ldGEgaHR0cC1lcXVpdj1cImNhY2hlLWNvbnRyb2xcIiBjb250ZW50PVwibWF4LWFnZT0wXCImIzYyO1xuJiM2MDttZXRhIGh0dHAtZXF1aXY9XCJleHBpcmVzXCIgY29udGVudD1cIi0xXCImIzYyO1xuJiM2MDttZXRhIGh0dHAtZXF1aXY9XCJwcmFnbWFcIiBjb250ZW50PVwibm8tY2FjaGVcIiYjNjI7XG4mIzYwO21ldGEgbmFtZT1cInJvYm90c1wiIGNvbnRlbnQ9XCJub2luZGV4LG5vZm9sbG93XCImIzYyO1xuXG4uLi4uXG5cbltESVNDT05ORUNUIDBdXG4iKSksbWR4KCJoMiIseyJpZCI6ImV4YW1wbGUtLS1zb2NrZXQtY29ubmVjdGlvbi13aXRoLWRvbWFpbi1uYW1lIn0sIkV4YW1wbGUgLSBTb2NrZXQgQ29ubmVjdGlvbiB3aXRoIERvbWFpbiBuYW1lIiksbWR4KCJwIixudWxsLCJXaGVuIHlvdSB3YW50IHRvIGNvbm5lY3QgdGhlIFdlYiBTZXJ2ZXIuIHlvdSBoYXZlIHRvIHVzZSB0aGUgQVQrU0NPTlxuQ29tbWFuZC4gYnV0IHRoZSBwYXJhbWV0ZXJzIG9mIEFUK1NDT04gYXJlIElQIGFuZCBQb3J0IGluc3RlYWQgb2YgRG9tYWluXG5uYW1lLiIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiV2hlbiBJdCBjYXNlLCBJdCBpcyB1c2VmdWwgdG8gdXNlIEFUK1NETkFNRSBmb3IgZ2V0dGluZyB0aGUgSVAgZnJvbVxuRG9tYWluIG5hbWUuIixtZHgoImJyIix7cGFyZW50TmFtZToicCJ9KSwiXG4iLCJBVCtTRE5BTUU9IiwiPCIsIkRvbWFpbiBOYW1lIiwiPiIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiRGVzdGluYXRpb24gSVAgd291bGQgYmUgc2V0IHVzaW5nIEROUyBRdWVyeSB3aGVuIHRoaXMgQ29tbWFuZCBzZXQuICIpLG1keCgicCIsbnVsbCwiPiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiV2l6RmkzMTAgVmVyc2lvbiAxLjAuMC4wIChXSVpuZXQgQ28uTHRkKVxuQVQrV1NFVD0wLFdpekZpRGVtb0FQXG5bT0tdXG5BVCtXU0VDPTAsLDEyMzQ1Njc4XG5bT0tdXG5BVCtXTkVUPTFcbltPS11cbkFUK1dKT0lOXG5cbltMaW5rLVVwIEV2ZW50XVxuSVAgQWRkciA6IDE5Mi4xNjguMy41NVxuR2F0ZXdheSA6IDE5Mi4xNjguMy4xXG5bT0tdXG5cbkFUK1NETkFNRT1mYWNlYm9vay5jb21cbltPS11cbkFUK1NDT049TyxUQ1MsMC4wLjAuMCw0NDMsLDBcbltPS11cblxuW0NPTk5FQ1QgMF1cblxuQVQrU01HTVQ9P1xuTnVtYmVyIG9mIFNvY2tldHMgOiAxIChTQ0lEL01vZGUvUmVtb3RlL0xvY2FsL0RhdGFNb2RlKVxuMC9UQ1MvNjkuMTcxLjIzMC42OC80NDMvMzIzMzcvMFxuW09LXVxuIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tYXV0by1yZS1jb25uZWN0aW9uIn0sIkV4YW1wbGUgLSBBdXRvIHJlLWNvbm5lY3Rpb24iKSxtZHgoInAiLG51bGwsIlNvbWUgdGltZXMgeW91IG5lZWQgdG8gc2V0IFdpekZpMzEwIHdoaWNoIGNhbiBiZSBzZXQgZm9yIFRDUFxucmUtY29ubmVjdGlvbiBhdXRvbWF0aWNhbGx5LiBJZiB5b3UgdXNlIEFUK0ZTT0NLIGNvbW1hbmQgYXMgYmVsb3csIHlvdVxuY2FuIHVzZSBXaXpGaTMxMCBpbiBvcmRlciB0byByZXRyeSBjb25uZWN0aW9uIGF1dG9tYXRpY2FsbHkuIiksbWR4KCJwIixudWxsLCJBVCtGU09DSz02LG4gICIpLG1keCgicCIsbnVsbCwiVGhpcyBjb21tYW5kIG1lYW5zIHRoYXQgV2l6RmkzMTAgd2lsbCBjaGVjayBldmVyeSAiLCI8IiwibiIsIj4iLCIgc2Vjb25kcyB3aGV0aGVyXG5zb2NrZXQgaXMgY29ubmVjdGVkIG9yIG5vdC4gSWYgc29ja2V0IGlzIG5vdCBjb25uZWN0ZWQgZHVyaW5nICIsIjwiLCJuIiwiPiIsIlxuc2Vjb25kLCBXaXpGaTMxMCB3aWxsIHJldHJ5IGNvbm5lY3Rpb24uICggRm9yIHVzaW5nIEFUK0ZTQ09LIGNvbW1hbmQsXG5BVCtTQ09OIGNvbW1hbmQgaXMgc2V0IHRvICIsIjwiLCJTIiwiPiIsIiBvciAiLCI8IiwiU08iLCI+IiwiIG9wdGlvbi4gKVxuIiwiPiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQrV1NFVD0wLFdpekZpRGVtb0FQXG5bT0tdXG5BVCtXU0VDPTAsLDEyMzQ1Njc4XG5bT0tdXG5BVCtXTkVUPTFcbltPS11cbkFUK1NDT049UyxUQ04sMjIyLjk4LjE3My4yNTAsNjAwMiwsMFxuW09LXVxuQVQrRlNPQ0s9NiwzMFxuW09LXVxuQVQrTVBST0Y9U1xuW09LXVxuXG5XaXpGaTMxMCBWZXJzaW9uIDEuMC4wLjAgKFdJWm5ldCBDby5MdGQpXG5Kb2luaW5nIDogV2l6RmlEZW1vQVBcblN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG5bTGluay1VcCBFdmVudF1cbklQIEFkZHIgOiAxOTIuMTY4LjMuNTJcbkdhdGV3YXkgOiAxOTIuMTY4LjMuMVxuXG5bQ09OTkVDVCAwXVxuXG5bRElTQ09OTkVDVCAwXVxuKFNvY2tldCBpcyBkaXNjb25uZWN0ZWQgZHVlIHRvIHVua25vd24gcmVhc29uIClcblxuW0RJU0NPTk5FQ1QgMF1cbigxc3QgZmFpbCBhbmQgdHJ5IHRvIGNvbm5lY3Qgc29ja2V0IGFmdGVyIDMwIHNlY29uZHMgKVxuXG5bRElTQ09OTkVDVCAwXVxuKDJuZCBmYWlsIGFuZCB0cnkgdG8gY29ubmVjdCBzb2NrZXQgYWZ0ZXIgMzAgc2Vjb25kcyBhZ2FpbiApXG5cbltDT05ORUNUIDBdXG4oQ29ubmVjdGlvbiBpcyBzdWNjZXNzIGFmdGVyIDMwIHNlY29uZHMgKVxuIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tYXV0by1yZS1zdGFydCJ9LCJFeGFtcGxlIC0gQXV0byByZS1zdGFydCIpLG1keCgicCIsbnVsbCwiVGhpcyBleGFtcGxlIGRlc2NyaWJlIGhvdyB0byB1c2UgIiwiPCIsImF1dG8gcmVzdGFydCIsIj4iLCIgZnVuY3Rpb24gd2hlblxuY29ubmVjdGlvbiBpcyBmYWlsIG9yIGRpc2Nvbm5lY3RlZCBJZiB5b3UgdXNlIHRoZXNlIGNvbW1hbmRzLCB5b3UgY2FuXG5zZXQgV2l6RmkzMTAgZm9yIHVzaW5nIGF1dG8gcmUtY29ubmVjdGlvbiBhbmQgYXV0b21hdGljYWxseSByZXN0YXJ0IHdoZW5cbnJlcGVhdHMgY29ubmVjdGlvbiBhIHNwZWNpZmljIG51bWJlciBvZiB0aW1lcy4iLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLCJcbiIsIj4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIldpekZpMzEwIFZlcnNpb24gMS4wLjAuMCAoV0labmV0IENvLkx0ZClcbkFUK1dTRVQ9MCxXaXpGaURlbW9BUFxuW09LXVxuQVQrV1NFQz0wLCwxMjM0NTY3OFxuW09LXVxuQVQrV05FVD0xXG5bT0tdXG5BVCtTQ09OPVMsVENOLDE5Mi4xNjguMy4xMDAsNTAwMCwsMFxuW09LXVxuQVQrRlNPQ0s9OCwyMFxuW09LXVxuQVQrTVBST0Y9U1xuW09LXVxuQVQrTVJFU0VUXG5bT0tdXG5cbldpekZpMzEwIFZlcnNpb24gMS4wLjAuMCAoV0labmV0IENvLkx0ZClcblxuW0xpbmstVXAgRXZlbnRdXG4gIElQIEFkZHIgICAgOiAxOTIuMTY4LjMuNTJcbiAgR2F0ZXdheSAgICA6IDE5Mi4xNjguMy4xXG5cbltESVNDT05ORUNUIDBdICgxc3QgZmFpbClcblxuW0xpbmstRG93biBFdmVudF1cbldpekZpMzEwIFZlcnNpb24gMS4wLjAuMCAoV0labmV0IENvLkx0ZCkgKEl0IHdpbGwgYmUgcmVzdGFydGVkIGJlY2F1c2VcbnRjcCBjb25uZWN0aW9uIGlzIGZhaWwgZHVyaW5nIDIwIHNlY29uZHMpXG5cbltMaW5rLVVwIEV2ZW50XVxuICBJUCBBZGRyICAgIDogMTkyLjE2OC4zLjUyXG4gIEdhdGV3YXkgICAgOiAxOTIuMTY4LjMuMVxuXG5bQ09OTkVDVCAwXSAoV2l6RmkzMTAgd2lsbCByZXRyeSBjb25uZWN0aW9uLiB0aGVuIHRoaXMgbWVzc2FnZSB3aWxsIGJlXG5wcmludGVkKSBcbiIpKSxtZHgoImgyIix7ImlkIjoiZXhhbXBsZS0tLWFpci1jb21tYW5kIn0sIkV4YW1wbGUgLSBBaXIgQ29tbWFuZCIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBvcGVyYXRlIEFpci1jb21tYW5kLW1vZGUgb2YgV2l6RmkzMTAuIFdpdGhcbnRoaXMgQWlyLWNvbW1hbmQtbW9kZSBpbmNsdWRlZCBpbiB0aGUgV2l6RmkzMTAsIHlvdSBjYW4gaXNzdWUgQVRcbmNvbW1hbmRzIHRvIHRoZSBtb2R1bGUgdmlhIFdpRmksIHdoaWxlIHRoZSBXaXpGaTMxMCBpcyBpbiB0aGUgVENQIHNlcnZlclxub3IgVURQIHNlcnZlciBvcGVyYXRpb24gbW9kZS4iKSxtZHgoInAiLG51bGwsIlBsZWFzZSBoYXZlIGEgbG9vayBhdCB0aGUgZm9sbG93aW5nIGhpbnRzOiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkFpci1jb21tYW5kLW1vZGUgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY29uZmlndXJhdGlvbiBvZiBXaXpGaTMxMC4gSXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgY29tbWFuZCBtb2RlIGZvciBvdGhlciBwdXJwb3BzZXMuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlRoZSBBaXItY29tbWFuZC1tb2RlIHdpbGwgYXV0b21hdGljYWxseSBiZSBzdGFydGVkLCB3aGVuIHRoZSBtb2R1bGUgV2l6RmkzMTAgd2lsbCBiZSBib290ZWQgaW50byB0aGUgQVAgbW9kZS4gVGhlIG1vZHVsZSBjYW4gdGhlbiBiZSBjb25maWd1cmVkIG9uIHRoZSBwb3J0IDUwMDAxIG9uIGl0cyBJUCBhZGRyZXNzLiIpKSxtZHgoInAiLG51bGwsIlRoZSBBVCBjb21tYW5kIGNvbnNpc3RzIG9mIGZvbGxvd2luZyBwYXJ0czogQ29tbWFuZCBoZWFkZXJcbigiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiV2l6RmkzMTBBaXJDbWQ6IiksIiksIEFUIGNvbW1hbmQgKGZvciBleGFtcGxlOicnIEFUIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIikgYW5kIENhcnJpYWdlIFJldHVyblxuKCIpLCJyJycpLiIpLG1keCgicCIsbnVsbCwiVGhlIGNvbW1hbmQgc2hvdWxkIGJlIHNlbnQgd2l0aCB0aGVzZSBjb25kaXRpb25zOiIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlRoZSBjb21tYW5kIGhlYWRlciBcIldpekZpMzEwQWlyQ21kOlwiIGlzIGNhc2Ugc2Vuc2l0aXZlIGFuZCBoYXMgdG8gYmUgc2VudCBpbiB0aGlzIGtpbmQuIEl0IGlzIDE1IEJ5dGVzIGxvbmcuICIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBICIsIjwiLCJDYXJyaWFnZSBSZXR1cm4sIDB4MGQiLCI+IiwiIGhhcyB0byBmb2xsb3cgdGhlIEFUIGNvbW1hbmQgZGlyZWN0bHkuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkFpci1jb21tYW5kIGhlYWRlciwgQVQgY29tbWFuZCBhbmQgQ2FycmlhZ2UgUmV0dXJuIHNob3VsZCBiZSBjb21iaW5lZCBpbnRvIG9uZSBwYWNrZXQuIikpLG1keCgicCIsbnVsbCwiRXhhbXBsZSB1c2FnZSBvZiB0aGUgV2l6RmkzMTBBaXJDbWQ6IiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93aXpmaTMxMC93aXpmaTMxMHBnL2FpcmNtZF9pbnRyby5wbmciLCJhbHQiOm51bGx9KSksbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiPiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQVQrV1NFVD0xLFdpekZpMzEwX0FJUkNNRFxuW09LXVxuQVQrV1NFQz0xLFdQQTIsMTIzNDU2Nzg5XG5bT0tdXG5BVCtXTkVUPTAsMTkyLjE2OC4xMS4xLDI1NS4yNTUuMjU1LjAsMTkyLjE2OC4xMS4xXG5bT0tdXG5BVCtXSk9JTlxuXG5bTGluay1VcCBFdmVudF1cbklQIEFkZHIgOiAxOTIuMTY4LjExLjFcbkdhdGV3YXkgOiAxOTIuMTY4LjExLjFcbltPS11cblxuQVQrTUFJUkNNRD1PLFQsNTAwMDEsMFxuW09LXVxuIikpLG1keCgicCIsbnVsbCwiTm93LCBUQ1AgQ2xpZW50IGNhbiBjb25uZWN0IHRvIHRoZSBXaXpGaTMxMCBhbmQgaXNzdWUgdGhlIEFUIGNvbW1hbmRzXG52aWEgV2lGaSBhcyBiZWxvdy5cbiIsIj4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIihUQ1AgQ2xpZW50IFRYKSBcbldpekZpMzEwQWlyQ21kOkFUK01JTkZPciAoMjQgQnl0ZSlcbihSWCkgXG5GVyB2ZXJzaW9uL0hXIHZlcnNpb25cbjEuMC4wLjAvV2l6RmkzMTAgUmV2IDEuMFxuW09LXVxuXG4oVENQIENsaWVudCBUWCkgXG5XaXpGaTMxMEFpckNtZDpBVCtXU0VDPT9yICgyNSBCeXRlKVxuKFJYKSBcbjEsV1BBMiwxMjM0NTY3ODlcbltPS11cblxuKFRDUCBDbGllbnQgVFgpIFxuV2l6RmkzMTBBaXJDbWQ6QVQrV1NFQz0xLFdQQTIsYWFhYWJiYmJyICgzOSBCeXRlKVxuKFJYKSBcbltPS11cblxuKFRDUCBDbGllbnQgVFgpIFxuV2l6RmkzMTBBaXJDbWQ6QVQrTU1BQz0/ciAoMjUgQnl0ZSlcbihSWCkgXG4wMDowODpEQzowMDo1NTo3NlxuW09LXVxuIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tc2VyaWFsLXRvLXdpLWZpLXNldHRpbmctdXNpbmctYW5kcm9pZC1hcHAifSwiRXhhbXBsZSAtIFNlcmlhbCB0byBXaS1GaSBTZXR0aW5nIHVzaW5nIEFuZHJvaWQgQXBwIiksbWR4KCJwIixudWxsLCJJZiB5b3UgdXNlICIsIjwiLCJBaXIgQ29tbWFuZCIsIj4iLCIsIFlvdSBjYW4gY29uZmlndXJlIFdpekZpMzEwIHVzaW5nIGRldmljZVxud2hpY2ggY2FuIHVzZSBUQ1AgbGlrZSAiLCI8IiwiQW5kcm9pZCBBcHAiLCI+IiwiLiAgIiksbWR4KCJoNCIseyJpZCI6IndpemZpMzEwLXNldHRpbmcifSwiV2l6RmkzMTAgU2V0dGluZyIpLG1keCgicCIsbnVsbCwiSW4gb3JkZXIgdG8gY29uZmlnIHRoZSBXaXpGaTMxMCB1c2luZyBBbmRyb2lkIEFQUCwgV2l6RmkzMTAgc2hvdWxkXG5vcGVyYXRlIGFzIFNvZnRBUCBtb2RlLiIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiQWZ0ZXIgb3BlcmF0aW5nIFNvZnRBUCxcbiIsIjwiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJhdF9jb21tYW5kcyNhdG1haXJjbWQifSksIkFUK01BSVJDTUQiKSwiPiIsIlxuY29tbWFuZCBzaG91bGQgYmUgc2V0IGxpa2UgXCJFeGFtcGxlIC0gQWlyIENvbW1hbmRcIi4iKSxtZHgoInAiLG51bGwsIkFub3RoZXIgd2F5IGZvciBzZXR0aW5nIFdpekZpMzEwIGluIG9yZGVyIHRvIHVzZSAiLCI8IiwiQW5kcm9pZCBhcHAiLCI+IiwiLCBZb3VcbmhhdmUgdG8gcHJlc3Mgb25jZSBmdW5jdGlvbiBrZXkgb2YgV2l6RmkzMTAuIElmIHlvdSBwcmVzcyBmdW5jdGlvbiBrZXlcbm9uY2UsIFdpekZpMzEwIHdpbGwgYmUgY2hhbmdlZCB0byAiLCI8IiwiU29mdCBBUCBNb2RlIiwiPiIsIiBhbmQgb3BlbiBUQ1AgcG9ydFxuNTAwMDEgZm9yIHVzaW5nICIsIjwiLCJBaXIgQ29tbWFuZCBNb2RlIiwiPiIsIi4iKSxtZHgoImg0Iix7ImlkIjoiYXBwLWV4YW1wbGUtZG93bmxvYWQifSwiQXBwIGV4YW1wbGUgZG93bmxvYWQiKSxtZHgoInAiLG51bGwsIllvdSBjYW4gZG93bmxvYWQgdGhlIEFwcCBmb3IgY29uZmlndXJhdGlvbiBvZiBXaXpGaTMxMCBhdCBsaW5rIGJlbG93LiIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiQXBwIGluc3RhbGwgZmlsZSAtICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD13aXpuZXQud2l6ZmkzMTBfY29uZmlnX3Rvb2wifSksIkdvb2dsZSBQbGF5IFN0b3JlIiksIiAgIFNvdXJjZSBDb2RlIC0gIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3dwZ25zcy9XaXpGaTMxMF9Db25maWdfVG9vbF9BbmRyb2lkIn0pLCJHaXRIdWJcblJlcG9zaXRvcnkiKSwiICIpLG1keCgiaDQiLHsiaWQiOiJnZW5lcmFsLXNldHRpbmdzIn0sIkdlbmVyYWwgU2V0dGluZ3MiKSxtZHgoInAiLG51bGwsIlRoaXMgcGljdHVyZSBzaG93cyB0aGUgY29uZmlndXJhdGlvbiBwYWdlIG9mIFdpekZpMzEwIENvbmZpZyBUb29sLiBJZiB5b3Ugd2FudCB0byB1c2UgIiwiPCIsIldpekZpMzEwIENvbmZpZyBUb29sIiwiPiIsIixcbldpekZpMzEwIHdpbGwgYmUgc2V0IHRvICIsIjwiLCJTb2Z0IEFQIG1vZGUiLCI+IiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93aXpmaTMxMC93aXpmaTMxMHBnL3NldF9pbmZvLnBuZyIsImFsdCI6bnVsbH0pKSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIldpekZpMzEwIiksbWR4KCJ1bCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJXaXpGaTMxMCBTU0lEIiksIiA6IFNTSUQgb2YgV2l6RmkzMTAuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJXaXpGaTMxMCBQQVNTV09SRCIpLCIgOiBQYXNzd29yZCBvZiBXaXpGaTMxMC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkFpcmNtZCBJUCIpLCIgOiBJUCBhZGRyZXNzIG9mIFdpekZpMzEwLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiQWlyY21kIFBvcnQiKSwiIDogUG9ydCBudW1iZXIgb2YgV2l6RmkzMTAuIikpKSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkFjY2VzcyBQb2ludCIpLG1keCgidWwiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiQVAgU1NJRCIpLCIgOiBTU0lEIG9mIEFQIHdoaWNoIHdpbGwgYmUgY29ubmVjdGVkIHdpdGggV2l6RmkzMTAuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJBUCBQQVNTV09SRCIpLCIgOiBQYXNzd29ya2Qgb2YgQVAgd2hpY2ggd2lsbCBiZSBjb25uZWN0ZWQgd2l0aCBXaXpGaTMxMC4iKSkpKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiRGVzdGluYXRpb24gU2VydmVyIiksIiAiLG1keCgidWwiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToibGkifSwiU2VydmVyIElQIiksIiA6IElQIGFkZHJlc3Mgb2YgVENQIFNlcnZlciB3aGljaCBXaXpGaTMxMCB3aWxsIHdhbnQgdG8gY29ubmVjdC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNlcnZlciBQb3J0IiksIiA6IFBvcnQgbnVtYmVyIG9mIFRDUCBTZXJ2ZXIgd2hpY2ggV2l6RmkzMTAgd2lsbCB3YW50IHRvIGNvbm5lY3QuIikpKSksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNTTF9FbmFibGUiKSwiIDogWW91IGhhdmUgdG8gY2hlY2sgaWYgeW91IHdhbnQgdG8gdXNlIFNTTFxud2hlbiBXaXpGaTMxMCBjb25uZWN0IHRvIFRDUCBTZXJ2ZXIuIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJsaSJ9LCJEYXRhbW9kZV9FbmFibGUiKSwiIDogWW91IGhhdmUgdG8gY2hlY2sgaWYgeW91IHdhbnQgdG8gdXNlXG4iLCI8IiwiRGF0YSBNb2RlIiwiPiIsIiB3aGVuIFdpekZpMzEwIGNvbm5lY3QgdG8gVENQIFNlcnZlci4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlNBVkUgQ09ORklHIiksIiA6IFNhdmUgdGhlc2UgY29uZmlndXJhdGlvbiB2YWx1ZSBhdFxuIiwiPCIsIldpekZpMzEwX0NvbmZpZ19Ub29sX0FuZHJvaWQiLCI+IikpLG1keCgiaDQiLHsiaWQiOiJzY2FuLXNzaWQtb2Ytd2l6ZmkzMTAifSwiU2NhbiBTU0lEIG9mIFdpekZpMzEwIiksbWR4KCJwIixudWxsLCJJZiB5b3UgcHVzaCAiLCI8IiwiU0NBTiIsIj4iLCIgYnV0dG9uLCAiLCI8IiwiV2l6RmkzMTAgQ29uZmlnIFRvb2wiLCI+IiwiIHdpbGwgc2VhcmNoIFNTSURcbm9mIFdpekZpMzEwLiBJZiBTU0lEIG9mIFdpekZpMzEwIGRvZXNuJ3QgbWF0Y2ggIiwiPCIsIldpekZpMzEwIFNTSUQiLCI+IiwiIHZhbHVlXG5pbiBnZW5lcmFsIHNldHRpbmcsICIsIjwiLCJXaXpGaTMxMCBDb25maWcgVG9vbCIsIj4iLCIgd2lsbCBkaXNwbGF5IGVycm9yIG1lc3NhZ2UuIiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93aXpmaTMxMC93aXpmaTMxMHBnL2ZpbmRfYXAucG5nIiwiYWx0IjpudWxsfSkpKSxtZHgoImg0Iix7ImlkIjoiam9pbi10by1zY2FubmVkLWFwIn0sIkpvaW4gdG8gc2Nhbm5lZCBBUCIpLG1keCgicCIsbnVsbCwiSWYgeW91IHB1c2ggIiwiPCIsIkpvaW4iLCI+IiwiIGJ1dHRvbiBhZnRlciBzY2FuIFNTSUQgb2YgV2l6RmkzMTAsICIsIjwiLCJXaXpGaTMxMFxuQ29uZmlnIFRvb2wiLCI+IiwiIHdpbGwgY29ubmVjdCB0byBXaXpGaTMxMC4iKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIvaW1nL3Byb2R1Y3RzL3dpemZpMzEwL3dpemZpMzEwcGcvam9pbl9hcC5wbmciLCJhbHQiOm51bGx9KSkpLG1keCgiaDQiLHsiaWQiOiJzZXQtYWlyLWNvbW1hbmQtdG8td2l6ZmkzMTAifSwiU2V0IEFpciBDb21tYW5kIHRvIFdpekZpMzEwIiksbWR4KCJwIixudWxsLCJJZiB5b3UgcHVzaCAiLCI8IiwiQUlSIENPTU1BTkQiLCI+IiwiIGJ1dHRvbiBhZnRlciBwcmV2aW91cyBzdGVwIGlzIGRvbmVcbnN1Y2Nlc3NmdWxseSwgIiwiPCIsIldpekZpMzEwIENvbmZpZyBUb29sIiwiPiIsIiB3aWxsIHNldCBXaXpGaTMxMCBpbiBvcmRlciB0b1xuam9pbiB0byBBUCBhbmQgY29ubmVjdCB0byBkZXN0aW5hdGlvbiBzZXJ2ZXIuIiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93aXpmaTMxMC93aXpmaTMxMHBnL3NldF9hdGNtZC5wbmciLCJhbHQiOm51bGx9KSkpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tbXF0dCJ9LCJFeGFtcGxlIC0gTVFUVCIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBmaW5kIHRoZSBleGFtcGxlcyBvZiBtcXR0IHVzaW5nIHRoZSBXaXpGaTMxMCBhdCBmb2xsb3dpbmdcbmxpbmsuICAiKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlJlZmVyIHRvICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToic3Ryb25nIn0seyJocmVmIjoibXF0dF9leGFtcGxlIn0pLCJNUVRUIEV4YW1wbGUiKSkpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLS0tZ21tcCJ9LCJFeGFtcGxlIC0gR01NUCIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBmaW5kIHRoZSBleGFtcGxlcyBvZiBnbW1wIHVzaW5nIHRoZSBXaXpGaTMxMCBhdCBmb2xsb3dpbmdcbmxpbmsuICAiKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlJlZmVyIHRvICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToic3Ryb25nIn0seyJocmVmIjoiZ21tcF9leGFtcGxlIn0pLCJHTU1QIEV4YW1wbGUod3JpdHRlbiBrb3JlYW4pIikpKSxtZHgoImgyIix7ImlkIjoiZXhhbXBsZS0tLXRoaW5ncGx1ZyJ9LCJFeGFtcGxlIC0gVGhpbmdQbHVnIiksbWR4KCJwIixudWxsLCJZb3UgY2FuIGZpbmQgdGhlIGV4YW1wbGVzIG9mIGNvbm5lY3RpbmcgdG8gVGhpbmdQbHVnIHVzaW5nIHRoZSBXaXpGaTMxMFxuYXQgZm9sbG93aW5nIGxpbmsuICAiKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIlJlZmVyIHRvICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToic3Ryb25nIn0seyJocmVmIjoidGhpbmdwbHVnX2V4YW1wbGUifSksIlRoaW5nUGx1ZyBFeGFtcGxlKHdyaXR0ZW4gaW4gS29yZWFuKSIpKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}