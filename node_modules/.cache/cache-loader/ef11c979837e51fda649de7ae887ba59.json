{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Mbed-WIZwiki-Platform/WIZwiki-W7500-Mbed-Starter-Kit/Exercise_7._Photoresistor(Eng).md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Mbed-WIZwiki-Platform/WIZwiki-W7500-Mbed-Starter-Kit/Exercise_7._Photoresistor(Eng).md","mtime":1596193974229},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-mbed-wi-zwiki-platform-wi-zwiki-w-7500-mbed-starter-kit-exercise-7-photoresistor-eng-md-20c.json","mtime":1597141330199},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2V4ZXJjaXNlXzdfcGhvdG9yZXNpc3Rvcl9lbmcnLHRpdGxlOidFeGVyY2lzZSA3LiBQaG90b3Jlc2lzdG9yKEVuZyknLGRhdGU6bmV3IERhdGUoJzIwMjAtMDQtMDhUMDA6MDA6MDAuMDAwWicpfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiUHJvZHVjdC9NYmVkLVdJWndpa2ktUGxhdGZvcm0vV0lad2lraS1XNzUwMC1NYmVkLVN0YXJ0ZXItS2l0L2V4ZXJjaXNlXzdfcGhvdG9yZXNpc3Rvcl9lbmciLCJpZCI6IlByb2R1Y3QvTWJlZC1XSVp3aWtpLVBsYXRmb3JtL1dJWndpa2ktVzc1MDAtTWJlZC1TdGFydGVyLUtpdC9leGVyY2lzZV83X3Bob3RvcmVzaXN0b3JfZW5nIiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IkV4ZXJjaXNlIDcuIFBob3RvcmVzaXN0b3IoRW5nKSIsImRlc2NyaXB0aW9uIjoiUmVhZGluZyBsaWdodCBzZW5zb3IgdmFsdWUiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1Byb2R1Y3QvTWJlZC1XSVp3aWtpLVBsYXRmb3JtL1dJWndpa2ktVzc1MDAtTWJlZC1TdGFydGVyLUtpdC9FeGVyY2lzZV83Ll9QaG90b3Jlc2lzdG9yKEVuZykubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L01iZWQtV0lad2lraS1QbGF0Zm9ybS9XSVp3aWtpLVc3NTAwLU1iZWQtU3RhcnRlci1LaXQvZXhlcmNpc2VfN19waG90b3Jlc2lzdG9yX2VuZyIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vV2l6bmV0L2RvY3VtZW50X2ZyYW1ld29yay90cmVlL21hc3Rlci9kb2NzL1Byb2R1Y3QvTWJlZC1XSVp3aWtpLVBsYXRmb3JtL1dJWndpa2ktVzc1MDAtTWJlZC1TdGFydGVyLUtpdC9FeGVyY2lzZV83Ll9QaG90b3Jlc2lzdG9yKEVuZykubWQiLCJzaWRlYmFyIjoic29tZVNpZGViYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkV4ZXJjaXNlIDYuIFRlbXBlcmF0dXJlIHNlbnNvcihFbmcpIiwicGVybWFsaW5rIjoiL2RvY3MvUHJvZHVjdC9NYmVkLVdJWndpa2ktUGxhdGZvcm0vV0lad2lraS1XNzUwMC1NYmVkLVN0YXJ0ZXItS2l0L2V4ZXJjaXNlXzZfdGVtcGVyYXR1cmVfc2Vuc29yX2VuZyJ9LCJuZXh0Ijp7InRpdGxlIjoiTmV0d29yayBFeGVyY2lzZSAxLiBUQ1AgbG9vcGJhY2soRW5nKSIsInBlcm1hbGluayI6Ii9kb2NzL1Byb2R1Y3QvTWJlZC1XSVp3aWtpLVBsYXRmb3JtL1dJWndpa2ktVzc1MDAtTWJlZC1TdGFydGVyLUtpdC9uZXR3b3JrX2V4ZXJjaXNlXzFfdGNwX2xvb3BiYWNrX2VuZyJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOidTdW1tYXJ5JyxpZDonc3VtbWFyeScsY2hpbGRyZW46W119LHt2YWx1ZTonTWF0ZXJpYWxzJyxpZDonbWF0ZXJpYWxzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidIYXJkd2FyZScsaWQ6J2hhcmR3YXJlJyxjaGlsZHJlbjpbe3ZhbHVlOidTY2hlbWF0aWMnLGlkOidzY2hlbWF0aWMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0Nvbm5lY3Rpb24gZGlhZ3JhbScsaWQ6J2Nvbm5lY3Rpb24tZGlhZ3JhbScsY2hpbGRyZW46W119XX0se3ZhbHVlOidTb2Z0d2FyZScsaWQ6J3NvZnR3YXJlJyxjaGlsZHJlbjpbe3ZhbHVlOidFeGFtcGxlIENvZGUnLGlkOidleGFtcGxlLWNvZGUnLGNoaWxkcmVuOltdfSx7dmFsdWU6J01ldGhvZHMgYW5kIHJlc3VsdHMnLGlkOidtZXRob2RzLWFuZC1yZXN1bHRzJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0xlYXJuaW5nIG1hdGVyaWFscycsaWQ6J2xlYXJuaW5nLW1hdGVyaWFscycsY2hpbGRyZW46W119LHt2YWx1ZTonUmVsYXRlZCBMaW5rcycsaWQ6J3JlbGF0ZWQtbGlua3MnLGNoaWxkcmVuOltdfV07Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDEiLHsiaWQiOiJyZWFkaW5nLWxpZ2h0LXNlbnNvci12YWx1ZSJ9LGBSZWFkaW5nIGxpZ2h0IHNlbnNvciB2YWx1ZWApLG1keCgiaDIiLHsiaWQiOiJzdW1tYXJ5In0sYFN1bW1hcnlgKSxtZHgoInAiLG51bGwsYFRoaXMgaXMgYW4gZXhhbXBsZSBvZiByZWFkaW5nIHRoZSBsaWdodCBzZW5zb3IgdmFsdWUgdXNpbmcgQURDLiBDb252ZXJ0IHRoZSBhbmFsb2cgdmFsdWUgdG8gYSBmb3JtdWxhIGFuZCBzZXJpYWwgaXQgd2l0aCBhIHZhbHVlIGJldHdlZW4gMCBcXCB+IDMuM1YKSXQgc2hvd3Mgb24gdGhlIHNjcmVlbiB0aHJvdWdoIHRoZSBwb3J0LiBUdXJucyB0aGUgTEVEIG9uIG9yIG9mZiBjb21wYXJlZCB0byB0aGUgc3BlY2lmaWVkIGFuYWxvZyB2YWx1ZS5gKSxtZHgoImgyIix7ImlkIjoibWF0ZXJpYWxzIn0sYE1hdGVyaWFsc2ApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYFdJWndpa2ktVzc1MDAgYm9hcmRgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgVVNCIGNhYmxlYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEJyZWFkYm9hcmRgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSnVtcGVyIHdpcmVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUEdNNTUzN0QgKENEUyBQaG90byBSZXNpc3RvcilgKSksbWR4KCJoMiIseyJpZCI6ImhhcmR3YXJlIn0sYEhhcmR3YXJlYCksbWR4KCJoMyIseyJpZCI6InNjaGVtYXRpYyJ9LGBTY2hlbWF0aWNgKSxtZHgoInAiLG51bGwsYFRoZSBvdmVyYWxsIGNpcmN1aXQgZGlhZ3JhbSBpcyBhcyBmb2xsb3dzLmApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvcHJvZHVjdHMvd2l6d2lraV9tYmVkX2tpdC9raXRfZW4vY2RzX3NlbnNvcl9zY2hlbS5wbmciLCJhbHQiOm51bGx9KSkpLG1keCgiaDMiLHsiaWQiOiJjb25uZWN0aW9uLWRpYWdyYW0ifSxgQ29ubmVjdGlvbiBkaWFncmFtYCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93aXp3aWtpX21iZWRfa2l0L2tpdF9lbi9leGFtX2Nkc19zZW5zb3IucG5nIiwiYWx0IjpudWxsfSkpKSxtZHgoImgyIix7ImlkIjoic29mdHdhcmUifSxgU29mdHdhcmVgKSxtZHgoImgzIix7ImlkIjoiZXhhbXBsZS1jb2RlIn0sYEV4YW1wbGUgQ29kZWApLG1keCgicCIsbnVsbCxgSGVyZSBpcyBhbiBleGFtcGxlIGNvZGUuYCksbWR4KCJwIixudWxsLGBPcGVuIHRoZSBwYWdlIGJlbG93IGFuZCBjb21waWxlIGJ5IGltcG9ydGluZyB0aGUgcHJvZ3JhbSB3aXRoICJJbXBvcnQgdGhpcyBwcm9ncmFtIi5gKSxtZHgoInAiLG51bGwsYPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2RldmVsb3Blci5tYmVkLm9yZy90ZWFtcy9JT1AvY29kZS9DRFNfSGVsbG9Xb3JsZF9XSVp3aWtpLVc3NTAwLyJ9KSxgaHR0cHM6Ly9kZXZlbG9wZXIubWJlZC5vcmcvdGVhbXMvSU9QL2NvZGUvQ0RTX0hlbGxvV29ybGRfV0lad2lraS1XNzUwMC9gKSksbWR4KCJwIixudWxsLGBPciwgY29tcGlsZSBhZnRlciBjb3B5aW5nIGFuZCBwYXN0aW5nIHRoZSBmb2xsb3dpbmcgY29kZSB0byBtYWluLmMgaW4gdGhlIG1iZWQgZW52aXJvbm1lbnQuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLGAjaW5jbHVkZSAibWJlZC5oIgogCkRpZ2l0YWxPdXQgcmVkbGVkKExFRDEpOyAvLyBSRUQKRGlnaXRhbE91dCBibHVlbGVkKExFRDMpOyAvLyBCTFVFCkFuYWxvZ0luIENEUyhBMCk7CiAKaW50IG1haW4oKSB7CiAgICBwcmludGYoIkhlbGxvIFdpeldJa2ktVzc1MDAhXFxuXFxyIik7CiAgICBwcmludGYoIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cXG5cXHIiKTsKICAgIAogICAgaW50IENEU19kYXRhID0gMDsKICAgIGRvdWJsZSBDRFNfdm9sID0gMDsKICAgIAogICAgd2hpbGUoMSkgewogICAgICAgIENEU19kYXRhID0gQ0RTLnJlYWQoKSoxMDAwOwogICAgICAgIENEU192b2wgPSBDRFMucmVhZCgpKjMuMzsKICAgICAgICAKICAgICAgICAvL0NEUyBTZW5lb3IgQURDIExvdyBEYXRhCiAgICAgICAgcHJpbnRmKCJDRFMgRGF0YSA6ICUzZFxcclxcbiIsQ0RTX2RhdGEpOyAgICAgIAogICAgICAgIC8vQ0RTIFNlbnNvciBWb2x0YWdlIGRhdGEKICAgICAgICBwcmludGYoIkNEUyBWb2x0YWdlIDogJTMuM2xmVlxcclxcbiIsQ0RTX3ZvbCk7CiAgICAgICAgcHJpbnRmKCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuXFxyIik7CiAgICAgICAgCiAgICAgICAgd2FpdCgxKTsgICAgIAogICAgICAgIC8vU3RhdHVzIGlzIGJyaWdodC4KICAgICAgICBpZihDRFNfZGF0YSA8IDUwMCl7CiAgICAgICAgICAgIHJlZGxlZCA9IDE7CiAgICAgICAgICAgIGJsdWVsZWQgPSAwOwogICAgICAgIH0KICAgICAgICAvL1N0YXR1cyBpcyBkYXJrLgogICAgICAgIGVsc2UgIHsKICAgICAgICAgICAgcmVkbGVkID0gMDsKICAgICAgICAgICAgYmx1ZWxlZCA9IDE7CiAgICAgICAgfQogICAgfQp9CmApKSxtZHgoImgzIix7ImlkIjoibWV0aG9kcy1hbmQtcmVzdWx0cyJ9LGBNZXRob2RzIGFuZCByZXN1bHRzYCksbWR4KCJwIixudWxsLGBUaGUgZm9sbG93aW5nIGlzIGFuIGV4YW1wbGUgZXhlY3V0aW9uIHNjcmVlbi4gVGhlIENEUyB2YWx1ZSBhbmQgdGhlIENEUyB2b2x0YWdlIHZhbHVlIG1lYXN1cmVkIGJhc2VkIG9uIDMuM1YgYXJlIHNob3duIGFsdGVybmF0ZWx5LgohIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Ii9pbWcvcHJvZHVjdHMvd2l6d2lraV9tYmVkX2tpdC9raXRfZW4vY2RzX3NlbnNvcl9yZXN1bHQuanBnIn0pKSksbWR4KCJoMiIseyJpZCI6ImxlYXJuaW5nLW1hdGVyaWFscyJ9LGBMZWFybmluZyBtYXRlcmlhbHNgKSxtZHgoInAiLG51bGwsYFJlZmVyIHRvIHRoZSBsaW5rIGJlbG93IGZvciB0aGUgc3BlY2lmaWNhdGlvbnMgb2YgdGhlIGlsbHVtaW5hbmNlIHNlbnNvci5gKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoia2l0X3BhcnRzX2RhdGFzaGVldCJ9KSxgS2l0IGRhdGEgc2hlZXRgKSkpLG1keCgiaDIiLHsiaWQiOiJyZWxhdGVkLWxpbmtzIn0sYFJlbGF0ZWQgTGlua3NgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoidHV0b3JpYWxfZW5nIn0pLGBTdGFydGVyIEtpdCBUdXRvcmlhbGApKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}