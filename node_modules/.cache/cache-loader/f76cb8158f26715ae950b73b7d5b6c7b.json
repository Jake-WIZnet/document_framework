{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/iMCU/W7500/Peripherals-internal/tcp_function.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/iMCU/W7500/Peripherals-internal/tcp_function.md","mtime":1596193974288},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-i-mcu-w-7500-peripherals-internal-tcp-function-md-ccc.json","mtime":1597141330208},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvYWxiaW5qb3NlcGgvRG9jdW1lbnRzL0dpdEh1Yi9kb2N1bWVudF9mcmFtZXdvcmsvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J3RjcF9mdW5jdGlvbicsdGl0bGU6J1c3NTAwIFRDUCBGdW5jdGlvbicsZGF0ZTpuZXcgRGF0ZSgnMjAyMC0wNC0wM1QwMDowMDowMC4wMDBaJyl9O2V4cG9ydCB2YXIgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiUHJvZHVjdC9pTUNVL1c3NTAwL1BlcmlwaGVyYWxzLWludGVybmFsL3RjcF9mdW5jdGlvbiIsImlkIjoiUHJvZHVjdC9pTUNVL1c3NTAwL1BlcmlwaGVyYWxzLWludGVybmFsL3RjcF9mdW5jdGlvbiIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJXNzUwMCBUQ1AgRnVuY3Rpb24iLCJkZXNjcmlwdGlvbiI6IkJ5IHNldHRpbmcgc29tZSByZWdpc3RlciBhbmQgbWVtb3J5IG9wZXJhdGlvbiwgVzc1MDAgcHJvdmlkZXMgaW50ZXJuZXQiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1Byb2R1Y3QvaU1DVS9XNzUwMC9QZXJpcGhlcmFscy1pbnRlcm5hbC90Y3BfZnVuY3Rpb24ubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L2lNQ1UvVzc1MDAvUGVyaXBoZXJhbHMtaW50ZXJuYWwvdGNwX2Z1bmN0aW9uIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9XaXpuZXQvZG9jdW1lbnRfZnJhbWV3b3JrL3RyZWUvbWFzdGVyL2RvY3MvUHJvZHVjdC9pTUNVL1c3NTAwL1BlcmlwaGVyYWxzLWludGVybmFsL3RjcF9mdW5jdGlvbi5tZCJ9Oy8qIEBqc3ggbWR4ICovZXhwb3J0IHZhciByaWdodFRvYz1be3ZhbHVlOidJbml0aWFsaXphdGlvbicsaWQ6J2luaXRpYWxpemF0aW9uJyxjaGlsZHJlbjpbe3ZhbHVlOidCYXNpYyBTZXR0aW5nJyxpZDonYmFzaWMtc2V0dGluZycsY2hpbGRyZW46W119LHt2YWx1ZTonU2V0dGluZyBuZXR3b3JrIGluZm9ybWF0aW9uJyxpZDonc2V0dGluZy1uZXR3b3JrLWluZm9ybWF0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidTZXQgc29ja2V0IG1lbW9yeSBpbmZvcm1hdGlvbicsaWQ6J3NldC1zb2NrZXQtbWVtb3J5LWluZm9ybWF0aW9uJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0RhdGEgQ29tbXVuaWNhdGlvbnMnLGlkOidkYXRhLWNvbW11bmljYXRpb25zJyxjaGlsZHJlbjpbe3ZhbHVlOidUQ1AnLGlkOid0Y3AnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1RDUCBTRVJWRVInLGlkOid0Y3Atc2VydmVyJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidUQ1AgQ0xJRU5UJyxpZDondGNwLWNsaWVudCcsY2hpbGRyZW46W119XX1dO3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXtyaWdodFRvYzpyaWdodFRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLCJCeSBzZXR0aW5nIHNvbWUgcmVnaXN0ZXIgYW5kIG1lbW9yeSBvcGVyYXRpb24sIFc3NTAwIHByb3ZpZGVzIGludGVybmV0XG5jb25uZWN0aXZpdHkuIFRoaXMgY2hhcHRlciBkZXNjcmliZXMgaG93IGl0IGNhbiBiZSBvcGVyYXRlZC4iKSxtZHgoImgyIix7ImlkIjoiaW5pdGlhbGl6YXRpb24ifSwiSW5pdGlhbGl6YXRpb24iKSxtZHgoImgzIix7ImlkIjoiYmFzaWMtc2V0dGluZyJ9LCJCYXNpYyBTZXR0aW5nIiksbWR4KCJwIixudWxsLCJGb3IgdGhlIFc3NTAwIG9wZXJhdGlvbiwgc2VsZWN0IGFuZCB1dGlsaXplIGFwcHJvcHJpYXRlIHJlZ2lzdGVycyBzaG93blxuYmVsb3cuIiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiTW9kZSBSZWdpc3RlciAoTVIpIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIkludGVycnVwdCBNYXNrIFJlZ2lzdGVyIChJTVIpIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIlJldHJ5IFRpbWUtdmFsdWUgUmVnaXN0ZXIgKFJUUikiKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiUmV0cnkgQ291bnQgUmVnaXN0ZXIgKFJDUikiKSksbWR4KCJwIixudWxsLCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBvZiBhYm92ZSByZWdpc3RlcnMsIHJlZmVyIHRvIHRoZSBcdTIwMUNSZWdpc3RlclxuRGVzY3JpcHRpb25zLlx1MjAxRCIpLG1keCgiaDMiLHsiaWQiOiJzZXR0aW5nLW5ldHdvcmstaW5mb3JtYXRpb24ifSwiU2V0dGluZyBuZXR3b3JrIGluZm9ybWF0aW9uIiksbWR4KCJwIixudWxsLCJCYXNpYyBuZXR3b3JrIGluZm9ybWF0aW9uIHNldHRpbmcgZm9yIGNvbW11bmljYXRpb246IEl0IG11c3QgYmUgc2V0IHRoZVxuYmFzaWMgbmV0d29yayBpbmZvcm1hdGlvbi4iKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTSEFSKFNvdXJjZSBIYXJkd2FyZSBBZGRyZXNzIFJlZ2lzdGVyKSIsbWR4KCJ1bCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkl0IGlzIHByZXNjcmliZWQgdGhhdCB0aGUgc291cmNlIGhhcmR3YXJlIGFkZHJlc3Nlcywgd2hpY2ggaXNcbnNldCBieSBTSEFSLCB1c2UgdW5pcXVlIGhhcmR3YXJlIGFkZHJlc3NlcyAoRXRoZXJuZXQgTUFDXG5hZGRyZXNzKSBpbiB0aGUgRXRoZXJuZXQgTUFDIGxheWVyLiBUaGUgSUVFRSBtYW5hZ2VzIHRoZSBNQUNcbmFkZHJlc3MgYWxsb2NhdGlvbi4gVGhlIG1hbnVmYWN0dXJlciB3aGljaCBwcm9kdWNlcyB0aGUgbmV0d29ya1xuZGV2aWNlIGFsbG9jYXRlcyB0aGUgTUFDIGFkZHJlc3MgdG8gcHJvZHVjdC4iKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiRGV0YWlscyBvbiBNQUMgYWRkcmVzcyBhbGxvY2F0aW9uIHJlZmVyIHRvIHRoZSB3ZWJzaXRlIGFzIGJlbG93LiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cDovL3d3dy5pZWVlLm9yZy8ifSksImh0dHA6Ly93d3cuaWVlZS5vcmcvIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiaHR0cDovL3N0YW5kYXJkcy5pZWVlLm9yZy9yZWdhdXRoL291aS9pbmRleC5zaHRtbCJ9KSwiaHR0cDovL3N0YW5kYXJkcy5pZWVlLm9yZy9yZWdhdXRoL291aS9pbmRleC5zaHRtbCIpKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJHQVIoR2F0ZXdheSBBZGRyZXNzIFJlZ2lzdGVyKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTVUJSKFN1Ym5ldCBNYXNrIFJlZ2lzdGVyKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJTSVBSKFNvdXJjZSBJUCBBZGRyZXNzIFJlZ2lzdGVyKSIpKSxtZHgoImgzIix7ImlkIjoic2V0LXNvY2tldC1tZW1vcnktaW5mb3JtYXRpb24ifSwiU2V0IHNvY2tldCBtZW1vcnkgaW5mb3JtYXRpb24iKSxtZHgoInAiLG51bGwsIlRoaXMgc3RhZ2Ugc2V0cyB0aGUgc29ja2V0IHR4L3J4IG1lbW9yeSBpbmZvcm1hdGlvbi4gVGhlIGJhc2UgYWRkcmVzc1xuYW5kIG1hc2sgYWRkcmVzcyBvZiBlYWNoIHNvY2tldCBhcmUgZml4ZWQgYW5kIHNhdmVkIGluIHRoaXMgc3RhZ2UuIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJJbiBjYXNlIG9mLCBhc3NpZ24gMktCIHJ4LCB0eCBtZW1yb3kgcGVyIFNPQ0tFVCIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWMifSksIkluIGNhc2Ugb2YsIGFzc2lnbiAyS0IgcngsIHR4IG1lbW9yeSBwZXIgU09DS0VUXG57XG5Tbl9SWE1FTV9TSVpFKGNoKSA9ICh1aW50OCAqKSAyOyAvLyBBc3NpZ24gMksgcnggbWVtb3J5IHBlciBTT0NLRVRcblNuX1RYTUVNX1NJWkUoY2gpID0gKHVpbnQ4ICopIDI7IC8vIEFzc2lnbiAySyByeCBtZW1vcnkgcGVyIFNPQ0tFVFxuXG4vKiBTYW1lIG1ldGhvZCwgc2V0IGdTMV9UWF9CQVNFLCBnUzFfVFhfTUFTSywgZ1MyX1RYX0JBU0UsIGdTMl9UWF9NQVNLLFxuZ1MzX1RYX0JBU0UsIGdTM19UWF9NQVNLLCBnUzRfVFhfQkFTRSwgZ1M0X1RYX01BU0ssIGdTNV9UWF9CQVNFLCBnUzVfVFhfTUFTSyxcbmdTNl9UWF9CQVNFLCBnUzZfdHhfTUFTSywgZ1M3X1RYX0JBU0UsIGdTN19UWF9NQVNLICovXG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImRhdGEtY29tbXVuaWNhdGlvbnMifSwiRGF0YSBDb21tdW5pY2F0aW9ucyIpLG1keCgicCIsbnVsbCwiQWZ0ZXIgdGhlIGluaXRpYWxpemF0aW9uIHByb2Nlc3MsIFc3NTAwIGNhbiB0cmFuc21pdCBhbmQgcmVjZWl2ZSB0aGVcbmRhdGEgd2l0aCBvdGhlcnMgYnkgXHUyMDE4b3Blblx1MjAxOSB0aGUgU09DS0VUIG9mIFRDUCwgVURQLCBJUFJBVywgYW5kIE1BQ1JBV1xubW9kZS4gVGhlIFc3NTAwIHN1cHBvcnRzIHRoZSBpbmRlcGVuZGVudGx5IGFuZCBzaW11bHRhbmVvdXNseSB1c2FibGUgOFxuU09DS0VUUy4gSW4gdGhpcyBzZWN0aW9uLCB0aGUgY29tbXVuaWNhdGlvbiBtZXRob2QgZm9yIGVhY2ggbW9kZSB3aWxsIGJlXG5pbnRyb2R1Y2VkLiIpLG1keCgiaDMiLHsiaWQiOiJ0Y3AifSwiVENQIiksbWR4KCJwIixudWxsLCJUaGUgVENQIGlzIGEgY29ubmVjdGlvbi1vcmllbnRlZCBwcm90b2NvbC4gVGhlIFRDUCBtYWtlIHRoZSBjb25uZWN0aW9uXG5TT0NLRVQgYnkgdXNpbmcgaXRzIG93biBJUCBhZGRyZXNzLCBwb3J0IG51bWJlciBhbmQgZGVzdGluYXRpb24gSVBcbmFkZHJlc3MsIHBvcnQgbnVtYmVyLiBUaGVuIHRyYW5zbWl0cyBhbmQgcmVjZWl2ZXMgdGhlIGRhdGEgYnkgdXNpbmcgdGhpc1xuU09DS0VULiBNZXRob2RzIG9mIG1ha2luZyB0aGUgY29ubmVjdGlvbiB0byBTT0NLRVQgYXJlIFx1MjAxQ1RDUCBTRVJWRVJcdTIwMUQgYW5kXG5cdTIwMUNUQ1AgQ0xJRU5UXHUyMDFELiBJdCBpcyBkaXZpZGVkIGJ5IHRyYW5zbWl0dGluZyB0aGUgY29ubmVjdC1yZXF1ZXN0IChTWU5cbnBhY2tldCkuIFRoZSBcdTIwMUNUQ1AgU0VSVkVSXHUyMDFEIGxpc3RlbnMgdG8gdGhlIGNvbm5lY3QtcmVxdWVzdCBmcm9tIHRoZSBcdTIwMUNUQ1BcbkNMSUVOVFx1MjAxRCwgYW5kIG1ha2VzIGNvbm5lY3Rpb24gU09DS0VUIGJ5IGFjY2VwdGluZyB0aGUgdHJhbnNtaXR0ZWRcbmNvbm5lY3QtcmVxdWVzdCAoUGFzc2l2ZS1vcGVuKS4gVGhlIFx1MjAxQ1RDUCBDTElFTlRcdTIwMUQgdHJhbnNtaXRzIHRoZVxuY29ubmVjdC1yZXF1ZXN0IGZpcnN0IHRvIFx1MjAxQ1RDUCBTRVJWRVJcdTIwMUQgdG8gbWFrZSB0aGUgY29ubmVjdGlvblxuKEFjdGl2ZS1vcGVuKS4iKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIvaW1nL3Byb2R1Y3RzL3c3NTAwcC9zZXJ2ZXJjbGllbnQuanBnIiwiYWx0IjoiVENQIFNFUlZFUiBhbmQgVENQXG5DTElFTlQifSkpKSxtZHgoImgzIix7ImlkIjoidGNwLXNlcnZlciJ9LCJUQ1AgU0VSVkVSIiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9wcm9kdWN0cy93NzUwMHAvc2VydmVyX2Zsb3cuanBnIiwiYWx0IjoiVENQIFNFUlZFUiBPcGVyYXRpb25cbkZsb3cifSkpKSxtZHgoImg1Iix7ImlkIjoic29ja2V0LWluaXRpYWxpemF0aW9uIn0sIlNPQ0tFVCBJbml0aWFsaXphdGlvbiIpLG1keCgicCIsbnVsbCwiU09DS0VUIGluaXRpYWxpemF0aW9uIGlzIHJlcXVpcmVkIGZvciBUQ1AgZGF0YSBjb21tdW5pY2F0aW9uLiBUaGVcbmluaXRpYWxpemF0aW9uIGlzIG9wZW5pbmcgdGhlIFNPQ0tFVC4gVGhlIFNPQ0tFVCBvcGVuaW5nIHByb2Nlc3Mgc2VsZWN0c1xub25lIFNPQ0tFVCBmcm9tIDggU09DS0VUUyBvZiB0aGUgVzc1MDAsIGFuZCBzZXRzIHRoZSBwcm90b2NvbCBtb2RlXG4oU24iLCJfIiwiTVIpIGFuZCBTbiIsIl8iLCJQT1JUMCB3aGljaCBpcyBzb3VyY2UgcG9ydCBudW1iZXIgKExpc3RlbiBwb3J0IG51bWJlclxuaW4gXHUyMDFDVENQIFNFUlZFUlx1MjAxRCkgaW4gdGhlIHNlbGVjdGVkIFNPQ0tFVCwgYW5kIHRoZW4gZXhlY3V0ZXMgT1BFTiBjb21tYW5kLlxuQWZ0ZXIgdGhlIE9QRU4gY29tbWFuZCwgaWYgdGhlIHN0YXR1cyBvZiBTbiIsIl8iLCJTUiBpcyBjaGFuZ2VkIHRvXG5TT0NLIiwiXyIsIklOSVQsIHRoZSBTT0NLRVQgaW5pdGlhbGl6YXRpb24gcHJvY2VzcyBpcyBjb21wbGV0ZWQuIFRoZSBTT0NLRVRcbmluaXRpYWxpemF0aW9uIHByb2Nlc3MgaXMgaWRlbnRpY2FsbHkgYXBwbGllZCBpbiBcdTIwMUNUQ1AgU0VSVkVSXHUyMDFEIGFuZCBcdTIwMUNUQ1BcbkNMSUVOVC5cdTIwMURUaGUgSW5pdGlhbGl6YXRpb24gcHJvY2VzcyBvZiBTb2NrZXQgbiBpbiBUQ1AgbW9kZSBpcyBzaG93blxuYmVsb3cuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLCJ7XG5TVEFSVDpcblNuX01SID0gMHgwMTsgLy8gc2V0cyBUQ1AgbW9kZVxuU25fUE9SVDAgPSBzb3VyY2VfcG9ydDsgLy8gc2V0cyBzb3VyY2UgcG9ydCBudW1iZXJcblNuX0NSID0gT1BFTjsgLy8gc2V0cyBPUEVOIGNvbW1hbmRcbi8qIHdhaXQgdW50aWwgU25fU1IgaXMgY2hhbmdlZCB0byBTT0NLX0lOSVQgKi9cbmlmIChTbl9TUiAhPSBTT0NLX0lOSVQpIFNuX0NSID0gQ0xPU0U7IGdvdG8gU1RBUlQ7XG59XG4iKSksbWR4KCJoNSIseyJpZCI6Imxpc3RlbiJ9LCJMSVNURU4iKSxtZHgoInAiLG51bGwsIlJ1biBhcyBcdTIwMUNUQ1AgU0VSVkVSXHUyMDFEIGJ5IExJU1RFTiBjb21tYW5kLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYyJ9KSwie1xuLyogbGlzdGVuIFNPQ0tFVCAqL1xuU25fQ1IgPSBMSVNURU47XG4vKiB3YWl0IHVudGlsIFNuX1NSIGlzIGNoYW5nZWQgdG8gU09DS19MSVNURU4gKi9cbmlmIChTbl9TUiAhPSBTT0NLX0xJU1RFTikgU25fQ1IgPSBDTE9TRTsgZ290byBTVEFSVDtcbn1cbiIpKSxtZHgoImg1Iix7ImlkIjoiZXN0YWJsaXNobWVudCJ9LCJFU1RBQkxJU0hNRU5UIiksbWR4KCJwIixudWxsLCJXaGVuIHRoZSBzdGF0dXMgb2YgU24iLCJfIiwiU1IgaXMgU09DSyIsIl8iLCJMSVNURU4sIGlmIGl0IHJlY2VpdmVzIGEgU1lOIHBhY2tldCxcbnRoZSBzdGF0dXMgb2YgU24iLCJfIiwiU1IgaXMgY2hhbmdlZCB0byBTT0NLIiwiXyIsIlNZTlJFQ1YgYW5kIHRyYW5zbWl0cyB0aGVcblNZTi9BQ0sgcGFja2V0LiBBZnRlciB0aGF0LCB0aGUgU29ja2V0IG4gbWFrZXMgYSBjb25uZWN0aW9uLiBBZnRlciBpdFxubWFrZXMgdGhlIGNvbm5lY3Rpb24gb2YgU29ja2V0IG4gLCBpdCBlbmFibGVzIHRoZSBkYXRhIGNvbW11bmljYXRpb24uXG5UaGVyZSBhcmUgdHdvIG1ldGhvZHMgdG8gY29uZmlybSB0aGUgY29ubmVjdGlvbiBvZiBTb2NrZXQgbiAuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLCJGaXJzdCBtZXRob2QgOlxue1xuaWYgKFNuX0lSKENPTikgPT0gXHUyMDE4MVx1MjAxOSlcbi8qIFdoZW4gYW4gaW50ZXJydXB0IG9jY3VycyBhbmQgdGhlIG1hc2sgYml0IG9mIFNuX0lNUiBpcyBcdTIwMTgxXHUyMDE5LCB0aGUgaW50ZXJydXB0IGJpdCBvZiBTbl9JUlxuYmVjb21lcyBcdTIwMTgxXHUyMDE5ICovXG5Tbl9JUihDT04pID0gXHUyMDE4MVx1MjAxOTtcbi8qSW4gb3JkZXIgdG8gY2xlYXIgdGhlIFNuX0lSIGJpdCwgdGhlIGhvc3Qgc2hvdWxkIHdyaXRlIHRoZSBiaXQgYXMgXHUyMDE4MVx1MjAxOS4gV2hlbiBhbGwgdGhlIGJpdHMgb2ZcblNuX0lSIGlzIGNsZWFyZWQgKFx1MjAxODBcdTIwMTkpLCBJUihuKSBpcyBhdXRvbWF0aWNhbGx5IGNsZWFyZWQuKi9cbmdvdG8gRVNUQUJMSVNIRUQgc3RhZ2U7XG4vKiBJbiB0aGlzIGNhc2UsIGlmIHRoZSBpbnRlcnJ1cHQgb2YgU29ja2V0IG4gaXMgYWN0aXZhdGVkLCBpbnRlcnJ1cHQgb2NjdXJzLiBSZWZlciB0byBJUiwgSU1SXG5Tbl9JTVIgYW5kIFNuX0lSLiAqL1xufVxuU2Vjb25kIG1ldGhvZCA6XG57XG5pZiAoU25fU1IgPT0gU09DS19FU1RBQkxJU0hFRCkgZ290byBFU1RBQkxJU0hFRCBzdGFnZTtcbn1cbiIpKSxtZHgoImg1Iix7ImlkIjoiZXN0YWJsaXNobWVudC0tY2hlY2stcmVjZWl2ZWQtZGF0YSJ9LCJFU1RBQkxJU0hNRU5UIDogQ2hlY2sgcmVjZWl2ZWQgZGF0YSIpLG1keCgicCIsbnVsbCwiQ29uZmlybSB0aGUgcmVjZXB0aW9uIG9mIHRoZSBUQ1AgZGF0YS4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWMifSksIkZpcnN0IG1ldGhvZCA6XG57XG5pZiAoU25fSVIoUkVDVikgPT0gXHUyMDE4MVx1MjAxOSkgU25fSVIoUkVDVikgPSBcdTIwMTgxXHUyMDE5OyBnb3RvIFJlY2VpdmluZyBQcm9jZXNzIHN0YWdlO1xuLyogSW4gdGhpcyBjYXNlLCBpZiB0aGUgaW50ZXJydXB0IG9mIFNvY2tldCBuIGlzIGFjdGl2YXRlZCwgaW50ZXJydXB0IG9jY3Vycy4gUmVmZXIgdG8gSVIsIElNUlxuU25fSU1SIGFuZCBTbl9JUi4gKi9cbn1cblNlY29uZCBNZXRob2QgOlxue1xuaWYgKFNuX1JYX1JTUjAgIT0gMHgwMDAwKSBnb3RvIFJlY2VpdmluZyBQcm9jZXNzIHN0YWdlO1xufVxuIikpLG1keCgicCIsbnVsbCwiVGhlIEZpcnN0IG1ldGhvZDogc2V0IHRoZSBTbiIsIl8iLCJJUihSRUNWKSB0byBcdTIwMTgxXHUyMDE5IHdoZW5ldmVyIHlvdSByZWNlaXZlIGFcbkRBVEEgcGFja2V0LiBJZiB0aGUgaG9zdCByZWNlaXZlcyB0aGUgbmV4dCBEQVRBIHBhY2tldCB3aXRob3V0IHNldHRpbmdcbnRoZSBTbiIsIl8iLCJJUihSRUNWKSBhcyBcdTIwMTgxXHUyMDE5IGluIHRoZSBwcmlvciBEQVRBIHBhY2tldCwgaXQgY2Fubm90IHJlY29nbml6ZVxudGhlIFNuIiwiXyIsIklSKFJFQ1YpIG9mIHRoZSBuZXh0IERBVEEgcGFja2V0LiBUaGlzIGlzIGR1ZSB0byB0aGUgcHJpb3JcblNuIiwiXyIsIklSKFJFQ1YpIGFuZCBuZXh0IFNuIiwiXyIsIklSKFJFQ1YpIGJlaW5nIG92ZXJsYXBwZWQuIFNvIHRoaXMgbWV0aG9kIGlzXG5ub3QgcmVjb21tZW5kZWQgaWYgdGhlIGhvc3QgY2Fubm90IHBlcmZlY3RseSBwcm9jZXNzIHRoZSBEQVRBIHBhY2tldHMgb2ZcbmVhY2ggU24iLCJfIiwiSVIoUkVDVikuIiksbWR4KCJoNSIseyJpZCI6ImVzdGFibGlzaG1lbnQtLXJlY2VpdmluZy1wcm9jZXNzIn0sIkVTVEFCTElTSE1FTlQgOiBSZWNlaXZpbmcgcHJvY2VzcyIpLG1keCgicCIsbnVsbCwiSW4gdGhpcyBwcm9jZXNzLCBpdCBwcm9jZXNzZXMgdGhlIFRDUCBkYXRhIHdoaWNoIHdhcyByZWNlaXZlZCBpbiB0aGVcbkludGVybmFsIFJYIG1lbW9yeS4gQXQgdGhlIFRDUCBtb2RlLCB0aGUgVzc1MDAgY2Fubm90IHJlY2VpdmUgdGhlIGRhdGFcbmlmIHRoZSBzaXplIG9mIHJlY2VpdmVkIGRhdGEgaXMgbGFyZ2VyIHRoYW4gdGhlIFJYIG1lbW9yeSBmcmVlIHNpemUgb2ZcblNvY2tldCBuIC4gSWYgdGhlIHByaW9yIHN0YXRlZCBjb25kaXRpb24gaXMgaGFwcGVuZWQsIHRoZSBXNzUwMCBob2xkcyBvblxudG8gdGhlIGNvbm5lY3Rpb24gKHBhdXNlcyksIGFuZCB3YWl0cyB1bnRpbCB0aGUgUlggbWVtb3J5XHUyMDE5cyBmcmVlIHNpemUgaXNcbmxhcmdlciB0aGFuIHRoZSBzaXplIG9mIHRoZSByZWNlaXZlZCBkYXRhLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYyJ9KSwie1xuLyogZmlyc3QsIGdldCB0aGUgcmVjZWl2ZWQgc2l6ZSAqL1xubGVuID0gU25fUlhfUlNSOyAvLyBsZW4gaXMgcmVjZWl2ZWQgc2l6ZVxuLyogc2VsZWN0IFJYIG1lbW9yeSwgcmVmZXIgdG8gRGF0YXNoZWV0IDE0IHBhZ2UgKi9cbmNudGxfYnl0ZSA9IFNvY2tldF9uX1JYX0J1ZmZlciBcbi8qIEdldCBvZmZzZXQgYWRkcmVzcyAqL1xuc3JjX3B0ciA9IFNuX1JYX1JEO1xuLyogc2V0IG1lbW9yeSBjb3B5IGxlbiBieXRlcyBvZiBzb3VyY2VfcHRyIHRvIGRlc3RpbmF0aW9uX2FkZHJlc3MgKi9cbmZvciAoaT0wOyBpPGxlbjsgaSsrKVxue1xuICAgKihkc3RfcHRyK2kpID0gVzU1MDBfUkVBRChhZGRyLCBjbnRsX2J5dGUsIHNyY19wdHIraSk7XG59XG4vKiBpbmNyZWFzZSBTbl9SWF9SRCBhcyBsZW5ndGggb2YgbGVuICovXG5Tbl9SWF9SRCArPSBsZW47XG4vKiBzZXQgUkVDViBjb21tYW5kICovXG5Tbl9DUiA9IFJFQ1Y7XG59XG4iKSksbWR4KCJoNSIseyJpZCI6ImVzdGFibGlzaG1lbnQtY2hlY2stc2VuZC1kYXRhLS1zZW5kLXByb2Nlc3MifSwiRVNUQUJMSVNITUVOVDogQ2hlY2sgc2VuZCBkYXRhIC8gU2VuZCBwcm9jZXNzIiksbWR4KCJwIixudWxsLCJUaGUgc2l6ZSBvZiB0aGUgdHJhbnNtaXQgZGF0YSBjYW5ub3QgYmUgbGFyZ2VyIHRoYW4gYXNzaWduZWQgaW50ZXJuYWwgVFhcbm1lbW9yeSBvZiBTb2NrZXQgbi4gSWYgdGhlIHNpemUgb2YgdHJhbnNtaXQgZGF0YSBpcyBsYXJnZXIgdGhhblxuY29uZmlndXJlZCBNU1MsIGl0IGlzIGRpdmlkZWQgYnkgc2l6ZSBvZiBNU1MgYW5kIHRyYW5zbWl0cy4gVG8gdHJhbnNtaXRcbnRoZSBuZXh0IGRhdGEsIHVzZXIgbXVzdCBjaGVjayB0aGUgY29tcGxldGlvbiBvZiBwcmlvciBTRU5EIGNvbW1hbmQuIEFuXG5lcnJvciBtYXkgb2NjdXIgaWYgdGhlIFNFTkQgY29tbWFuZCBleGVjdXRlcyBiZWZvcmUgY29tcGxldGlvbiBvZiBwcmlvclxuU0VORCBjb21tYW5kLiBUaGUgbGFyZ2VyIHRoZSBkYXRhIHNpemUsIHRoZSBtb3JlIHRpbWUgdG8gY29tcGxldGUgdGhlXG5TRU5EIGNvbW1hbmQuIFNvIHRoZSB1c2VyIHNob3VsZCBwcm9wZXJseSBkaXZpZGUgdGhlIGRhdGEgdG8gdHJhbnNtaXQuIixtZHgoImJyIix7cGFyZW50TmFtZToicCJ9KSwiXG4iLCJUbyBjaGVjayB0aGUgY29tcGxldGlvbiBvZiB0aGUgU0VORCBjb21tYW5kLCBpdCBzaG91bGQgYmUgY2hlY2sgdGhhdCB0aGVcbnNlbmQgZGF0YSBsZW5ndGggaXMgZXF1YWwgd2l0aCB0aGUgYWN0dWFsIHNlbnQgZGF0YSBsZW5ndGguIFRoZSBhY3R1YWxcbnNlbnQgZGF0YSBsZW5ndGggaXMgY2FsY3VsYXRlZCBieSB0aGUgZGlmZmVyZW5jZSBvZiB0aGUgU24iLCJfIiwiVFgiLCJfIiwiUkRcbmJlZm9yZSBhbmQgYWZ0ZXIgcGVyZm9ybWluZyB0aGUgU0VORCBjb21tYW5kLiBJZiB0aGUgYWN0dWFsIHNlbnQgZGF0YSBpc1xubGVzcyB0aGFuIHRoZSBzZW5kIGRhdGEgbGVuZ3RoLCB0aGUgU0VORCBjb21tYW5kIGlzIHJldHJpZWQgZm9yIHNlbmRpbmdcbnRoZSBsZWZ0IGRhdGEuIFRoZSBzZW5kIHByb2Nlc3MgaXMgdGhlcmVmb3JlIGNvbXBsZXRlZCB0aGUgU0VORHdoZW4gdGhlXG5zdW0gb2YgdGhlIGFjdHVhbCBzZW50IGRhdGEgaXMgZXF1YWwgdGhlIHNlbmQgZGF0YSBsZW5ndGguIEEgc2ltcGxlXG5leGFtcGxlIG9mIHRoZSBzZW5kIHByb2Nlc3MgaXMgYXMgYmVsb3ciLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLCJcbiIsIkV4KSBTZW5kIERhdGEgTGVuZ3RoIFNpemU9IDEwLCIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiLSIsIiAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJFeGVjdXRlIFNFTkQgQ29tbWFuZCB3aXRoIHNlbmQgZGF0YSBsZW5ndGgiKSksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIkNhbGN1bGF0ZSB0aGUgYWN0dWFsIHNlbnQgZGF0YSBsZW5ndGgiKSxtZHgoInVsIix7cGFyZW50TmFtZToibGkifSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiSWYgdGhlIGFjdHVhbCBzZW50IGRhdGEgbGVuZ3RoIGlzIDcgKD1cblNuIiwiXyIsIlRYIiwiXyIsIlJEIiwiXyIsImFmdGVyIiwiXyIsIlNFTkQtU24iLCJfIiwiVFgiLCJfIiwiUkQiLCJfIiwiYmVmb3IiLCJfIiwiU0VORCksIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sInRoZSBsZWZ0IERhdGEgbGVuZ3RoPSAzIikpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImxpIn0sIlJldHJ5IFNFTkQgQ29tbWFuZCB1bnRpbCB0aGUgc3VtIG9mIHRoZSBhY3R1YWwgc2VudCBkYXRhIGxlbmd0aCBpc1xuc2FtZSB0aGUgc2VuZCBkYXRhIGxlbmd0aC4iKSxtZHgoImJyIix7cGFyZW50TmFtZToibGkifSksIk5vdGU6IERvblx1MjAxOXQgY29weSBkYXRhIHVudGlsIHRoZSBzdW0gb2YgdGhlIGFjdHVhbCBzZW50IGRhdGEgbGVuZ3RoXG5pcyB0aGUgc2VuZCBkYXRhIGxlbmd0aC4iKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLCJ7XG4vKiBmaXJzdCwgZ2V0IHRoZSBmcmVlIFRYIG1lbW9yeSBzaXplICovXG5GUkVFU0laRTpcbmZyZWVzaXplID0gU25fVFhfRlNSO1xuaWYgKGZyZWVzaXplPGxlbikgZ290byBGUkVFU0laRTsgLy8gbGVuIGlzIHNlbmQgc2l6ZVxuXG4vKiBzZWxlY3QgVFggbWVtb3J5LCByZWZlciB0byBEYXRhc2hlZXQgMTQgcGFnZSAqL1xuY250bF9ieXRlID0gU29ja2V0X25fVFhfQnVmZmVyIFxuLyogR2V0IG9mZnNldCBhZGRyZXNzICovXG5kc3RfcHRyID0gU25fVFhfUkQ7XG4vKiBzZXQgbWVtb3J5IGNvcHkgbGVuIGJ5dGVzIG9mIHNvdXJjZV9wdHIgdG8gZGVzdGluYXRpb25fYWRkcmVzcyAqL1xuZm9yIChpPTA7IGk8bGVuOyBpKyspXG57XG4gICBXNTUwMF9XUklURShhZGRyLCBjbnRsX2J5dGUsIGRzdF9wdHIraSk7XG59XG5cbi8qIGluY3JlYXNlIFNuX1RYX1dSIGFzIGxlbmd0aCBvZiBsZW4gKi9cblNuX1RYX1dSICs9IHNlbmRfc2l6ZTtcbi8qIHNldCBTRU5EIGNvbW1hbmQgKi9cblNuX0NSID0gU0VORDtcbi8qIHJldHVybiByZWFsIHBhY2tldCBzaXplICovXG5yZXR1cm4gbGVuO1xufVxuIikpLG1keCgiaDUiLHsiaWQiOiJlc3RhYmxpc2htZW50LS1jaGVjay1kaXNjb25uZWN0LXJlcXVlc3RmaW4tcGFja2V0In0sIkVTVEFCTElTSE1FTlQgOiBDaGVjayBkaXNjb25uZWN0LXJlcXVlc3QoRklOIHBhY2tldCkiKSxtZHgoInAiLG51bGwsIkNoZWNrIGlmIHRoZSBEaXNjb25uZWN0LXJlcXVlc3QoRklOIHBhY2tldCkgaGFzIGJlZW4gcmVjZWl2ZWQuIFVzZXIgY2FuXG5jb25maXJtIHRoZSByZWNlcHRpb24gb2YgRklOIHBhY2tldCBhcyBiZWxvdy4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWMifSksIkZpcnN0IG1ldGhvZCA6XG57XG5pZiAoU25fSVIoRElTQ09OKSA9PSBcdTIwMTgxXHUyMDE5KSBTbl9JUihESVNDT04pPVx1MjAxODFcdTIwMTk7IGdvdG8gQ0xPU0VEIHN0YWdlO1xuLyogSW4gdGhpcyBjYXNlLCBpZiB0aGUgaW50ZXJydXB0IG9mIFNvY2tldCBuIGlzIGFjdGl2YXRlZCwgaW50ZXJydXB0IG9jY3Vycy4gUmVmZXIgdG8gSVIsIElNUlxuU25fSU1SIGFuZCBTbl9JUi4gKi9cbn1cblNlY29uZCBtZXRob2QgOlxue1xuaWYgKFNuX1NSID09IFNPQ0tfQ0xPU0VfV0FJVCkgZ290byBDTE9TRUQgc3RhZ2U7XG59XG4iKSksbWR4KCJoNSIseyJpZCI6ImVzdGFibGlzaG1lbnQtLWNoZWNrLWRpc2Nvbm5lY3QtLWRpc2Nvbm5lY3RpbmctcHJvY2VzcyJ9LCJFU1RBQkxJU0hNRU5UIDogQ2hlY2sgZGlzY29ubmVjdCAvIGRpc2Nvbm5lY3RpbmcgcHJvY2VzcyIpLG1keCgicCIsbnVsbCwiV2hlbiB0aGUgdXNlciBkb2VzIG5vdCBuZWVkIGRhdGEgY29tbXVuaWNhdGlvbiB3aXRoIG90aGVycywgb3IgcmVjZWl2ZXNcbmEgRklOIHBhY2tldCwgZGlzY29ubmVjdCB0aGUgY29ubmVjdGlvbiBTT0NLRVQuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLCJ7XG4vKiBzZXQgRElTQ09OIGNvbW1hbmQgKi9cblNuX0NSID0gRElTQ09OO1xufVxuIikpLG1keCgiaDUiLHsiaWQiOiJlc3RhYmxpc2htZW50LS1jaGVjay1jbG9zZWQifSwiRVNUQUJMSVNITUVOVCA6IENoZWNrIGNsb3NlZCIpLG1keCgicCIsbnVsbCwiQ29uZmlybSB0aGF0IHRoZSBTb2NrZXQgbiBpcyBkaXNjb25uZWN0ZWQgb3IgY2xvc2VkIGJ5IERJU0NPTiBvciBjbG9zZVxuY29tbWFuZC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWMifSksIkZpcnN0IG1ldGhvZCA6XG57XG5pZiAoU25fSVIoRElTQ09OKSA9PSBcdTIwMTgxXHUyMDE5KSBnb3RvIENMT1NFRCBzdGFnZTtcbi8qIEluIHRoaXMgY2FzZSwgaWYgdGhlIGludGVycnVwdCBvZiBTb2NrZXQgbiBpcyBhY3RpdmF0ZWQsIGludGVycnVwdCBvY2N1cnMuIFJlZmVyIHRvIElSLCBJTVJcblNuX0lNUiBhbmQgU25fSVIuICovXG59XG5TZWNvbmQgbWV0aG9kIDpcbntcbmlmIChTbl9TUiA9PSBTT0NLX0NMT1NFRCkgZ290byBDTE9TRUQgc3RhZ2U7XG59XG4iKSksbWR4KCJoNSIseyJpZCI6ImVzdGFibGlzaG1lbnQtdGltZW91dCJ9LCJFU1RBQkxJU0hNRU5UOiBUaW1lb3V0IiksbWR4KCJwIixudWxsLCJUaGUgdGltZW91dCBjYW4gb2NjdXIgYnkgQ29ubmVjdC1yZXF1ZXN0KFNZTiBwYWNrZXQpIG9yIGl0c1xucmVzcG9uc2UoU1lOL0FDSyBwYWNrZXQpLCB0aGUgREFUQSBwYWNrZXQgb3IgaXRzIHJlc3BvbnNlKERBVEEvQUNLXG5wYWNrZXQpLCB0aGUgRGlzY29ubmVjdHJlcXVlc3QgRklOIHBhY2tldCkgb3IgaXRzIHJlc3BvbnNlKEZJTi9BQ0tcbnBhY2tldCkgYW5kIHRyYW5zbWlzc2lvbiBhbGwgVENQIHBhY2tldC4gSWYgaXQgY2Fubm90IHRyYW5zbWl0IHRoZSBhYm92ZVxucGFja2V0cyB3aXRoaW4gXHUyMDE4dGltZW91dFx1MjAxOSB3aGljaCBpcyBjb25maWd1cmVkIGF0IFJUUiBhbmQgUkNSLCB0aGUgVENQXG5maW5hbCB0aW1lb3V0KFRDUCIsbWR4KCJzdWIiLG51bGwsIlRPIiksIikgb2NjdXJzIGFuZCB0aGUgc3RhdGUgb2YgU24iLCJfIiwiU1IgaXMgc2V0IHRvXG5TT0NLIiwiXyIsIkNMT1NFRC4gQ29uZmlybWluZyBtZXRob2Qgb2YgdGhlIFRDUCIsbWR4KCJzdWIiLG51bGwsIlRPIiksIiBpcyBhcyBiZWxvdzoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWMifSksIkZpcnN0IG1ldGhvZCA6XG57XG5pZiAoU25fSVIoVElNRU9VVCBiaXQpID09IFx1MjAxODFcdTIwMTkpIFNuX0lSKFRJTUVPVVQpPVx1MjAxODFcdTIwMTk7IGdvdG8gQ0xPU0VEIHN0YWdlO1xuLyogSW4gdGhpcyBjYXNlLCBpZiB0aGUgaW50ZXJydXB0IG9mIFNvY2tldCBuIGlzIGFjdGl2YXRlZCwgaW50ZXJydXB0IG9jY3Vycy4gUmVmZXIgdG8gSVIsIElNUlxuU25fSU1SIGFuZCBTbl9JUi4gKi9cbn1cblNlY29uZCBtZXRob2QgOlxue1xuaWYgKFNuX1NSID09IFNPQ0tfQ0xPU0VEKSBnb3RvIENMT1NFRCBzdGFnZTtcbn1cbiIpKSxtZHgoImg1Iix7ImlkIjoic29ja2V0LWNsb3NlIn0sIlNPQ0tFVCBDbG9zZSIpLG1keCgicCIsbnVsbCwiSXQgY2FuIGJlIHVzZWQgdG8gY2xvc2UgdGhlIFNvY2tldCBuICwgd2hpY2ggZGlzY29ubmVjdGVkIGJ5XG5kaXNjb25uZWN0LXByb2Nlc3MsIG9yIGNsb3NlZCBieSBUQ1AiLG1keCgic3ViIixudWxsLCJUTyIpLCIgb3IgY2xvc2VkIGJ5IGhvc3RcdTIwMTlzXG5uZWVkIHdpdGhvdXQgZGlzY29ubmVjdC1wcm9jZXNzLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYyJ9KSwie1xuLyogY2xlYXIgdGhlIHJlbWFpbmVkIGludGVycnVwdHMgb2YgU29ja2V0IG4gKi9cblNuX0lSID0gMHhGRjtcbklSKG4pID0gXHUyMDE4MVx1MjAxOTtcbi8qIHNldCBDTE9TRSBjb21tYW5kICovXG5Tbl9DUiA9IENMT1NFO1xufVxuIikpLG1keCgiaDMiLHsiaWQiOiJ0Y3AtY2xpZW50In0sIlRDUCBDTElFTlQiKSxtZHgoInAiLG51bGwsIkl0IGlzIHNhbWUgYXMgVENQIHNlcnZlciBleGNlcHQgXHUyMDE4Q09OTkVDVFx1MjAxOSBzdGF0ZS4gVXNlciBjYW4gcmVmZXIgdG8gdGhlXG5hYm92ZSBcIlRDUCBTRVJWRVJcdTIwMUQgc2VjdGlvbi4iKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIvaW1nL3Byb2R1Y3RzL3c3NTAwcC9jbGllbnRfZmxvdy5qcGciLCJhbHQiOiJUQ1AgQ0xJRU5UIE9wZXJhdGlvblxuRmxvdyJ9KSkpLG1keCgiaDUiLHsiaWQiOiJjb25uZWN0In0sIkNPTk5FQ1QiKSxtZHgoInAiLG51bGwsIlRyYW5zbWl0IHRoZSBjb25uZWN0LXJlcXVlc3QgKFNZTiBwYWNrZXQpIHRvIFx1MjAxQ1RDUCBTRVJWRVJcdTIwMUQuIEl0IG1heSBvY2N1cnNcbnRoZSB0aW1lb3V0IHN1Y2ggYXMgQVJQIixtZHgoInN1YiIsbnVsbCwiVE8iKSwiLCBUQ1AiLG1keCgic3ViIixudWxsLCJUTyIpLCIgd2hlbiBtYWtlIHRoZVxuXHUyMDFDY29ubmVjdGlvbiBTT0NLRVRcdTIwMUQgd2l0aCBcdTIwMUNUQ1AgU0VSVkVSXHUyMDFEIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1jIn0pLCJ7XG5Tbl9ESVBSMCA9IHNlcnZlcl9pcDsgLyogc2V0IFRDUCBTRVJWRVIgSVAgYWRkcmVzcyovXG5Tbl9EUE9SVDAgPSBzZXJ2ZXJfcG9ydDsgLyogc2V0IFRDUCBTRVJWRVIgbGlzdGVuIHBvcnQgbnVtYmVyKi9cblNuX0NSID0gQ09OTkVDVDsgLyogc2V0IENPTk5FQ1QgY29tbWFuZCAqL1xufVxuIikpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}