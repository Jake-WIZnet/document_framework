{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/VAR-Products-using-WIZnet/Wi-Fi_Shield.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/VAR-Products-using-WIZnet/Wi-Fi_Shield.md","mtime":1596193974297},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-var-products-using-wi-znet-wi-fi-shield-md-727.json","mtime":1597141330195},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J3dpX2ZpX3NoaWVsZCcsdGl0bGU6J1dpLUZpIFNoaWVsZCcsZGF0ZTpuZXcgRGF0ZSgnMjAyMC0wNC0wMlQwMDowMDowMC4wMDBaJyl9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJWQVItUHJvZHVjdHMtdXNpbmctV0labmV0L3dpX2ZpX3NoaWVsZCIsImlkIjoiVkFSLVByb2R1Y3RzLXVzaW5nLVdJWm5ldC93aV9maV9zaGllbGQiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiV2ktRmkgU2hpZWxkIiwiZGVzY3JpcHRpb24iOiJUaGVyZSBhcmUgbWFueSByZXNvdXJjZSBQcm9kdWN0cyB1c2luZyBXSVpuZXQgV2l6RmkgbW9kdWxlcy4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1ZBUi1Qcm9kdWN0cy11c2luZy1XSVpuZXQvV2ktRmlfU2hpZWxkLm1kIiwicGVybWFsaW5rIjoiL2RvY3MvVkFSLVByb2R1Y3RzLXVzaW5nLVdJWm5ldC93aV9maV9zaGllbGQiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL1dpem5ldC9kb2N1bWVudF9mcmFtZXdvcmsvdHJlZS9tYXN0ZXIvZG9jcy9WQVItUHJvZHVjdHMtdXNpbmctV0labmV0L1dpLUZpX1NoaWVsZC5tZCIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiRXRoZXJuZXQgU2hpZWxkIiwicGVybWFsaW5rIjoiL2RvY3MvVkFSLVByb2R1Y3RzLXVzaW5nLVdJWm5ldC9ldGhlcm5ldF9zaGllbGQifSwibmV4dCI6eyJ0aXRsZSI6IlRoaXJkIHBhcnR5IiwicGVybWFsaW5rIjoiL2RvY3MvVkFSLVByb2R1Y3RzLXVzaW5nLVdJWm5ldC90aGlyZF9wYXJ0eSJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOid3aXpmaTI1MDonLGlkOid3aXpmaTI1MCcsY2hpbGRyZW46W3t2YWx1ZTonV2lmaSBTaGllbGQgKEZpMjUwKSBmcm9tIFNlZWVkIFN0dWRpbycsaWQ6J3dpZmktc2hpZWxkLWZpMjUwLWZyb20tc2VlZWQtc3R1ZGlvJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J3dpemZpMjEwOicsaWQ6J3dpemZpMjEwJyxjaGlsZHJlbjpbe3ZhbHVlOidXaUZpIFNoaWVsZCBWMi4yIEZvciBBcmR1aW5vIGZyb20gREZSb2JvdCcsaWQ6J3dpZmktc2hpZWxkLXYyMi1mb3ItYXJkdWluby1mcm9tLWRmcm9ib3QnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1dpRmkgU2hpZWxkIGZvciBBcmR1aW5vIGZyb20gR09GIFN0dWRpbycsaWQ6J3dpZmktc2hpZWxkLWZvci1hcmR1aW5vLWZyb20tZ29mLXN0dWRpbycsY2hpbGRyZW46W119LHt2YWx1ZTonU2FpblNtYXJ0IFdpRmkgU2hpZWxkIEZvciBBcmR1aW5vIE1lZ2EgVW5vIER1ZW1pbGFub3ZlKDgwMi4xMSBiL2cvbikgVUFSVCBUVEwgQ29tbXVuaWNhdGUnLGlkOidzYWluc21hcnQtd2lmaS1zaGllbGQtZm9yLWFyZHVpbm8tbWVnYS11bm8tZHVlbWlsYW5vdmU4MDIxMS1iZ24tdWFydC10dGwtY29tbXVuaWNhdGUnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1dpRmkgU2hpZWxkIGZyb20gR29yaWxsYWJ1bGRlcnonLGlkOid3aWZpLXNoaWVsZC1mcm9tLWdvcmlsbGFidWxkZXJ6JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidXaUZpIFNoaWVsZCAtIEVpRmkgZnJvbSBFTEVDIEZyZWFrcycsaWQ6J3dpZmktc2hpZWxkLS0tZWlmaS1mcm9tLWVsZWMtZnJlYWtzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBcmR1aW5vIFdJRkkgc2hpZWxkIGZyb20gR0UgVGVjaCcsaWQ6J2FyZHVpbm8td2lmaS1zaGllbGQtZnJvbS1nZS10ZWNoJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidXaWZpIFNoaWVsZCBWMi4wIGZvciBBcmR1aW5vIGNvbXBhdGlibGUgZnJvbSBSb2JvdEJhc2UnLGlkOid3aWZpLXNoaWVsZC12MjAtZm9yLWFyZHVpbm8tY29tcGF0aWJsZS1mcm9tLXJvYm90YmFzZScsY2hpbGRyZW46W119XX0se3ZhbHVlOid3aXpmaTIyMDonLGlkOid3aXpmaTIyMCcsY2hpbGRyZW46W3t2YWx1ZTonV2l6Rmkgc2hpZWxkIChXaXpGaTIyMCAtIFdpLUZpKScsaWQ6J3dpemZpLXNoaWVsZC13aXpmaTIyMC0tLXdpLWZpJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J3dpemZpNjEwOicsaWQ6J3dpemZpNjEwJyxjaGlsZHJlbjpbe3ZhbHVlOidXaWZpIHNoaWVsZChXaXo2MTApIGZyb20gT2xpbWF4JyxpZDond2lmaS1zaGllbGR3aXo2MTAtZnJvbS1vbGltYXgnLGNoaWxkcmVuOltdfV19XTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLGBUaGVyZSBhcmUgbWFueSByZXNvdXJjZSBQcm9kdWN0cyB1c2luZyBXSVpuZXQgV2l6RmkgbW9kdWxlcy5gKSxtZHgoImgyIix7ImlkIjoid2l6ZmkyNTAifSxgd2l6ZmkyNTA6YCksbWR4KCJwIixudWxsLGAzcmQgcGFydHkgcHJvZHVjdHMgdXNpbmcgb3VyIPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJXaXpGaTI1MC5tZCJ9KSxgV2l6RmkyNTBgKSxgCm1vZHVsZTogIGApLG1keCgiaDMiLHsiaWQiOiJ3aWZpLXNoaWVsZC1maTI1MC1mcm9tLXNlZWVkLXN0dWRpbyJ9LGBXaWZpIFNoaWVsZCAoRmkyNTApIGZyb20gU2VlZWQgU3R1ZGlvYCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wNy5zZWVlZF93aWZpX3NoaWVsZF9maTI1MC0xLmpwZyIsImFsdCI6ImVkaXRfMDcuc2VlZWRfd2lmaV9zaGllbGRfZmkyNTAtMS5qcGcifSkpLGAKYCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDcuc2VlZWRfd2lmaV9zaGllbGRfZmkyNTAtMi5qcGciLCJhbHQiOiJlZGl0XzA3LnNlZWVkX3dpZmlfc2hpZWxkX2ZpMjUwLTIuanBnIn0pKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cuc2VlZWRzdHVkaW8uY29tL2RlcG90L1dpZmktU2hpZWxkLUZpMjUwLXAtMTcxOS5odG1sP2NQYXRoPTE5XzIwIn0pLGBXaWZpCnNoaWVsZChGaTI1MClgKSxgCmlzIGEgZWNvbm9taWMgaW50ZXJuZXQgc29sdXRpb24gd2l0aCBBcmR1aW5vLiDwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiV2l6RmkyNTAubWQifSksYFRoZSBXaS1GaQptb2R1bGUoV2l6RmkyNTApYCksYCBzdXBwb3J0IElFRUUgODAyLjExYi9nL24KbW9kZSwgbWF4aW11bSBzcGVlZCB1cCB0byA2NU1iaXQvcy4gV2lmaSBzaGllbGQgKEZpMjUwKSBjb21iaW5lIG9uCmJvYXJkIGFudGVubmE7IGl04oCZcyBlYXN5IHRvIGJ1aWxkIHlvdSBwcm9qZWN0IGluIGEgc21hbGwgYm94LiBUaGUKbW9kdWxlIHJlc2VydmUgYSBVRkwgY29ubmVjdG9yLCB5b3UgY2FuIHVzZSBhbiBleHRyYSBhbnRlbm5hIHRvCmltcHJvdmUgdGhlIHNpZ25hbCByYW5nZS4gVGhlcmUgaXMgYSBrZXkgb24gdGhlIGJvYXJkLCBqdXN0IHB1c2ggb25lCnRpbWUgdG8gY2hhbmdlIHdpZmkgc2hpZWxkIGFzIEFQIG1vZGUuIFRoZSBtb2R1bGUgaGF2ZSBhIGNvbXB1dGVyCmludGVyZmFjZSBzb2Z0d2FyZSwgeW91IGNhbiBjb250cm9sIGFuZCB1cGdyYWRlIHRoZSBtb2R1bGUgdmlhClVTQi1VQVJUIGNvbnZlcnRvci4gVGhlIHdpZmkgc2hpZWxkIGNvbnRhaW4gYSBNaWNybyBTRCBjYXJkIHNvY2tldCwKaXTigJlzIGxpa2UgYSByZWNvcmRlciB3aGVuIHdpZmkgc2hpZWxkIHdvcmtpbmcgYXMgVENQLCBVRFAgc2VydmVyLmApKSxtZHgoImhyIixudWxsKSxtZHgoImgyIix7ImlkIjoid2l6ZmkyMTAifSxgd2l6ZmkyMTA6YCksbWR4KCJwIixudWxsLGAzcmQgcGFydHkgcHJvZHVjdHMgdXNpbmcgb3VyCvCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd2l6bmV0LmNvLmtyL3N1Yl9tb2R1bGVzL2VuL3Byb2R1Y3QvUHJvZHVjdF9EZXRhaWwuYXNwP2NhdGUxPTUmY2F0ZTI9NDMmY2F0ZTM9MCZwaWQ9MTEzMiJ9KSxgd2l6ZmkyMTBgKSxgCm1vZHVsZTogIGApLG1keCgiaDMiLHsiaWQiOiJ3aWZpLXNoaWVsZC12MjItZm9yLWFyZHVpbm8tZnJvbS1kZnJvYm90In0sYFdpRmkgU2hpZWxkIFYyLjIgRm9yIEFyZHVpbm8gZnJvbSBERlJvYm90YCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wMi53aWZpX3NoaWVsZF92Mi4yX2Zvcl9hcmR1aW5vX2Zyb21fZGZyb2JvdC01LmpwZyIsImFsdCI6ImVkaXRfMDIud2lmaV9zaGllbGRfdjIuMl9mb3JfYXJkdWlub19mcm9tX2Rmcm9ib3QtNS5qcGcifSkpLGAKYCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDIud2lmaV9zaGllbGRfdjIuMl9mb3JfYXJkdWlub19mcm9tX2Rmcm9ib3QtMi5qcGciLCJhbHQiOiJlZGl0XzAyLndpZmlfc2hpZWxkX3YyLjJfZm9yX2FyZHVpbm9fZnJvbV9kZnJvYm90LTIuanBnIn0pKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgVGhlIPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmRmcm9ib3QuY29tL2luZGV4LnBocD9yb3V0ZT1wcm9kdWN0L3Byb2R1Y3QmcHJvZHVjdF9pZD01NDgjLlV6elFTcGF3ZVVtIn0pLGBXSUZJIHdpcmVsZXNzCm1vZHVsZWApLGAKaXMgYmFzZWQgb24K8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3Ivc3ViX21vZHVsZXMvZW4vcHJvZHVjdC9Qcm9kdWN0X0RldGFpbC5hc3A/Y2F0ZTE9NSZjYXRlMj00MyZjYXRlMz0wJnBpZD0xMTMyIn0pLGBXaXpGaTIxMC5gKSxgCkl0IHByb3ZpZGVzIHRoZSBicmlkZ2luZyBmcm9tIFRUTCBzZXJpYWwgcG9ydCBjb21tdW5pY2F0aW9uIHRvCklFRUU4MDIuMTFiL2cvbiB3aXJlbGVzcyBjb21tdW5pY2F0aW9uLiBTbyBhbnkgZGV2aWNlIHdpdGggVFRMIHNlcmlhbApwb3J0cyBjYW4gZWFzaWx5IGJlIGNvbm5lY3RlZCB3aXRoIHRoaXMgV0lGSSBtb2R1bGUgYW5kIGNvbnRyb2xsZWQgYW5kCm1hbmFnZWQgcmVtb3RlbHkgdGhyb3VnaCBhIHdpcmVsZXNzIG5ldHdvcmsuIERpZmZlcmVudCBraW5kcyBvZgpjb21tdW5pY2F0aW9uIHByb3RvY29scyBhbmQgZW5jcnlwdGlvbiBhbGdvcml0aG1zIGFyZSBpbnRlZ3JhdGVkIHdpdGgKdGhlIG1vZHVsZS4gVGhlIEFyZHVpbm8gYXJjaGl0ZWN0dXJlIGVuYWJsZXMgeW91IHRvIGVhc2lseSBpbnRlZ3JhdGUKdGhpcyBtb2R1bGUgaW50byBhbnkgQXJkdWlubyBiYXNlZCBwcm9qZWN0LmApKSxtZHgoImhyIixudWxsKSxtZHgoImgzIix7ImlkIjoid2lmaS1zaGllbGQtZm9yLWFyZHVpbm8tZnJvbS1nb2Ytc3R1ZGlvIn0sYFdpRmkgU2hpZWxkIGZvciBBcmR1aW5vIGZyb20gR09GIFN0dWRpb2ApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDMud2lmaV9zaGllbGRfZm9yX2FyZHVpbm9fZnJvbV9nb2Zfc3R1ZGlvLTAyLmpwZyIsImFsdCI6ImVkaXRfMDMud2lmaV9zaGllbGRfZm9yX2FyZHVpbm9fZnJvbV9nb2Zfc3R1ZGlvLTAyLmpwZyJ9KSksYApgLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wMy53aWZpX3NoaWVsZF9mb3JfYXJkdWlub19mcm9tX2dvZl9zdHVkaW8tMDEuanBnIiwiYWx0IjoiZWRpdF8wMy53aWZpX3NoaWVsZF9mb3JfYXJkdWlub19mcm9tX2dvZl9zdHVkaW8tMDEuanBnIn0pKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgVGhlIPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmdlZWtvbmZpcmUuY29tL2luZGV4LnBocD9tYWluX3BhZ2U9cHJvZHVjdF9pbmZvJmNQYXRoPTdfNDgmcHJvZHVjdHNfaWQ9ODMmemVuaWQ9dDBtOXRxZ2tjaGZxdW10NDdiaDJyY3AxNjMifSksYFdpZmkKU2hpZWxkYCksYAppcyBiYXNlZCBvbiBTZXJpYWwgdG8g8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3Ivc3ViX21vZHVsZXMvZW4vcHJvZHVjdC9Qcm9kdWN0X0RldGFpbC5hc3A/Y2F0ZTE9NSZjYXRlMj00MyZjYXRlMz0wJnBpZD0xMTMyIn0pLGBXaS1GaSBtb2R1bGUKV2l6ZmkyMTBgKSxgCmZyb20g8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3IvU3ViX01vZHVsZXMvZW4vIn0pLGBXaXpuZXRgKSxgIGFuZCBjb21wYXRpYmxlIHdpdGgK8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly9hcmR1aW5vLmNjLyJ9KSxgQXJkdWlub2ApLGAgYW5kIGl0cyBjbG9uZXMuIFRoZSBXaWZpIFNoaWVsZCBvZmZlcnMKeW91IGEgcXVpY2ssIGVhc3ksIGFuZCBlZmZlY3RpdmUgd2F5IHRvIGFkZCBXaS1GaSBjYXBhYmlsaXRpZXMgdG8KQXJkdWluby4gVGhlIFdpZmkgU2hpZWxkIGFsbG93cyB5b3UgdG8gYWNoaWV2ZSBXaWZpIGNvbW11bmljYXRpb24gdmlhClVBUlQgYnkgc2VuZGluZyBBVCBjb21tYW5kcywgd2hpY2ggaXMgYW4gaWRlYWwgc29sdXRpb24gZm9yIHdob20gd2l0aApsaW1pdGVkIG9yIG5vIFdpLUZpIG9yIFJGIGV4cGVydGlzZS4gVGhlIFNoaWVsZCBzdXBwb3J0cyBkYXRhIHJhdGVzIHVwCnRvIDExIE1icHMsIGFuZCBpcyBjb21wbGlhbnQgd2l0aCA4MDIuMTFiLmApKSxtZHgoImhyIixudWxsKSxtZHgoImgzIix7ImlkIjoic2FpbnNtYXJ0LXdpZmktc2hpZWxkLWZvci1hcmR1aW5vLW1lZ2EtdW5vLWR1ZW1pbGFub3ZlODAyMTEtYmduLXVhcnQtdHRsLWNvbW11bmljYXRlIn0sYFNhaW5TbWFydCBXaUZpIFNoaWVsZCBGb3IgQXJkdWlubyBNZWdhIFVubyBEdWVtaWxhbm92ZSg4MDIuMTEgYi9nL24pIFVBUlQgVFRMIENvbW11bmljYXRlYCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wNC5zYWluc21hcnRfd2lmaV9zaGllbGRfZm9yX2FyZHVpbm9fbWVnYV91bm8tMS5qcGciLCJhbHQiOiJlZGl0XzA0LnNhaW5zbWFydF93aWZpX3NoaWVsZF9mb3JfYXJkdWlub19tZWdhX3Vuby0xLmpwZyJ9KSksYApgLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wNC5zYWluc21hcnRfd2lmaV9zaGllbGRfZm9yX2FyZHVpbm9fbWVnYV91bm8tNS5qcGciLCJhbHQiOiJlZGl0XzA0LnNhaW5zbWFydF93aWZpX3NoaWVsZF9mb3JfYXJkdWlub19tZWdhX3Vuby01LmpwZyJ9KSkpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYFRoZSDwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3d3dy5zYWluc21hcnQuY29tL3NhaW5zbWFydC13aWZpLXNoaWVsZC04MDItMTFiLWctZm9yLWFyZHVpbm8tbWVnYS11bm8tZHVlbWlsYW5vdmUuaHRtbCJ9KSxgV0lGSSB3aXJlbGVzcwptb2R1bGVgKSxgCmlzIGJhc2VkIG9uCvCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd2l6bmV0LmNvLmtyL3N1Yl9tb2R1bGVzL2VuL3Byb2R1Y3QvUHJvZHVjdF9EZXRhaWwuYXNwP2NhdGUxPTUmY2F0ZTI9NDMmY2F0ZTM9MCZwaWQ9MTEzMiJ9KSxgV2l6RmkyMTBgKSxgLgpJdCBwcm92aWRlcyBicmlkZ2luZyBmcm9tIFRUTCBzZXJpYWwgcG9ydCBjb21tdW5pY2F0aW9uIHRvCklFRUU4MDIuMTFiL2cvbiB3aXJlbGVzcyBjb21tdW5pY2F0aW9uLiBTbyBhbnkgZGV2aWNlIHdpdGggVFRMIHNlcmlhbApwb3J0cyBjYW4gZWFzaWx5IGJlIGNvbm5lY3RlZCB3aXRoIHRoaXMgV0lGSSBtb2R1bGUgYW5kIGNvbnRyb2xsZWQgYW5kCm1hbmFnZWQgcmVtb3RlbHkgdGhyb3VnaCBhIHdpcmVsZXNzIG5ldHdvcmsuIERpZmZlcmVudCBraW5kcyBvZgpjb21tdW5pY2F0aW9uIHByb3RvY29scyBhbmQgZW5jcnlwdGlvbiBhbGdvcml0aG1zIGFyZSBpbnRlZ3JhdGVkIHdpdGgKdGhlIG1vZHVsZS4gVGhlIEFyZHVpbm8gYXJjaGl0ZWN0dXJlIGVuYWJsZXMgeW91IHRvIGVhc2lseSBpbnRlZ3JhdGUKdGhpcyBtb2R1bGUgaW50byBhbnkgQXJkdWlubyBiYXNlZCBwcm9qZWN0LmApKSxtZHgoImhyIixudWxsKSxtZHgoImgzIix7ImlkIjoid2lmaS1zaGllbGQtZnJvbS1nb3JpbGxhYnVsZGVyeiJ9LGBXaUZpIFNoaWVsZCBmcm9tIEdvcmlsbGFidWxkZXJ6YCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wNS53aWZpX3NoaWVsZF9mcm9tX2dvcmlsbGFidWxkZXJ6LXBlcnNwZWN0aXZlLmpwZyIsImFsdCI6ImVkaXRfMDUud2lmaV9zaGllbGRfZnJvbV9nb3JpbGxhYnVsZGVyei1wZXJzcGVjdGl2ZS5qcGcifSkpLGAKYCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDUud2lmaV9zaGllbGRfZnJvbV9nb3JpbGxhYnVsZGVyei10b3AuanBnIiwiYWx0IjoiZWRpdF8wNS53aWZpX3NoaWVsZF9mcm9tX2dvcmlsbGFidWxkZXJ6LXRvcC5qcGcifSkpKSxtZHgoImJsb2NrcXVvdGUiLG51bGwsbWR4KCJwIix7cGFyZW50TmFtZToiYmxvY2txdW90ZSJ9LGBUaGUg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vd3d3LmdvcmlsbGFkaXN0cmlidXRpb24uY29tLmF1L3Byb2R1Y3Qvd2lmaXNoaWVsZC8ifSksYEdvcmlsbGFCdWlsZGVyeiBXaUZpCnNoaWVsZGApLGAKY3VycmVubHR5IGhhcyB0ZXN0ZWQgc3VwcG9ydCDwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3dpem5ldC5jby5rci9zdWJfbW9kdWxlcy9lbi9wcm9kdWN0L1Byb2R1Y3RfRGV0YWlsLmFzcD9jYXRlMT01JmNhdGUyPTQzJmNhdGUzPTAmcGlkPTExMzIifSksYFdpem5ldApXaXpGaTIxMGApLGAsCvCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd2l6bmV0LmNvLmtyL3N1Yl9tb2R1bGVzL2VuL3Byb2R1Y3QvUHJvZHVjdF9EZXRhaWwuYXNwP2NhdGUxPTUmY2F0ZTI9NDMmY2F0ZTM9MCZwaWQ9MTEzNCJ9KSxgV2l6RmkyMjBgKSxgCmFuZCB5ZXQgdG8gYmUgY29uZmlybWVkIHN1cHBvcnQgZm9yIHRoZSBHYWluc3BhbiBHUzEwMTEuYCksbWR4KCJwIix7cGFyZW50TmFtZToiYmxvY2txdW90ZSJ9LGBXZSB3YW50IHRvIGhpZ2hsaWdodCB0aGF0IGFsdGhvdWdoIG91ciBzaGllbGQgY2FuIGJlIG1hZGUgdG8gb3BlcmF0ZQppbiBzZXJ2ZXIgbW9kZSB3aXRoIHlvdXIgb3duIGN1c3RvbSBjb2RlL2xpYnJhcnksIG91ciBsaWJyYXJ5IGl0c2VsZgpkb2VzIG5vdCBwcm92aWRlIHRoaXMgZnVuY3Rpb25hbGl0eSBkaXJlY3RseSBhcyB3ZSBvbmx5IHByb3ZpZGUgY2xpZW50Cm1vZGUgc3VwcG9ydCBhdCB0aGlzIHRpbWUuYCkpLG1keCgiaHIiLG51bGwpLG1keCgiaDMiLHsiaWQiOiJ3aWZpLXNoaWVsZC0tLWVpZmktZnJvbS1lbGVjLWZyZWFrcyJ9LGBXaUZpIFNoaWVsZCAtIEVpRmkgZnJvbSBFTEVDIEZyZWFrc2ApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDYuZWlmaS0xLmpwZyIsImFsdCI6ImVkaXRfMDYuZWlmaS0xLmpwZyJ9KSkpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYFRoaXMg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cuZWxlY2ZyZWFrcy5jb20vc3RvcmUvd2lmaS1zaGllbGQtZWlmaS1wLTUwMC5odG1sIn0pLGBXaWZpIFNoaWVsZCAtCkVpRmlgKSxgCnV0aWxpemVzIGEK8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3Ivc3ViX21vZHVsZXMvZW4vcHJvZHVjdC9Qcm9kdWN0X0RldGFpbC5hc3A/Y2F0ZTE9NSZjYXRlMj00MyZjYXRlMz0wJnBpZD0xMTMyIn0pLGBXaXpGaTIxMGApLGAKd2lmaSBtb2R1bGUgdG8gcHJvdmlkZSB5b3VyIEFyZHVpbm8vRnJlYWR1aW5vIHdpdGggU2VyaWFsIEV0aGVybmV0J3MKZnVuY3Rpb24uIEl0IHByb3ZpZGVzIHRoZSBicmlkZ2luZyBmcm9tIFRUTCBzZXJpYWwgcG9ydCBjb21tdW5pY2F0aW9uCnRvIElFRUU4MDIuMTFiL2cvbiB3aXJlbGVzcyBjb21tdW5pY2F0aW9uLiBTbyBhbnkgZGV2aWNlIHdpdGggVFRMCnNlcmlhbCBwb3J0cyBjYW4gZWFzaWx5IGJlIGNvbm5lY3RlZCB3aXRoIHRoaXMgV2lmaSBtb2R1bGUgYW5kCmNvbnRyb2xsZWQgYW5kIG1hbmFnZWQgcmVtb3RlbHkgdGhyb3VnaCBhIHdpcmVsZXNzIG5ldHdvcmsuIERpZmZlcmVudApraW5kcyBvZiBjb21tdW5pY2F0aW9uIHByb3RvY29scyBhbmQgZW5jcnlwdGlvbiBhbGdvcml0aG1zIGFyZQppbnRlZ3JhdGVkIHdpdGggdGhlIG1vZHVsZS4gVGhlIEFyZHVpbm8gYXJjaGl0ZWN0dXJlIGVuYWJsZXMgeW91IHRvCmVhc2lseSBpbnRlZ3JhdGUgdGhpcyBtb2R1bGUgaW50byBhbnkgQXJkdWlubyBiYXNlZCBwcm9qZWN0LmApKSxtZHgoImhyIixudWxsKSxtZHgoImgzIix7ImlkIjoiYXJkdWluby13aWZpLXNoaWVsZC1mcm9tLWdlLXRlY2gifSxgQXJkdWlubyBXSUZJIHNoaWVsZCBmcm9tIEdFIFRlY2hgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIvaW1nL3Zhcl9wcm9kdWN0cy93aWZpX3NoaWVsZC9lZGl0XzA4LmdldGVjaC5qcGciLCJhbHQiOm51bGx9KSkpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmdlZWV0ZWNoLmNvbS93aWtpL2luZGV4LnBocC9BcmR1aW5vX1dJRklfc2hpZWxkIn0pLGBUaGUgV2lmaQpTaGllbGRgKSxgIGlzCmJhc2VkIG9uIFNlcmlhbCB0byBXaS1GaSBtb2R1bGUK8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3Ivc3ViX21vZHVsZXMvZW4vcHJvZHVjdC9Qcm9kdWN0X0RldGFpbC5hc3A/Y2F0ZTE9NSZjYXRlMj00MyZjYXRlMz0wJnBpZD0xMTMyIn0pLGBXaXpmaTIxMGApLGAKZnJvbSDwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3dpem5ldC5jby5rci9zdWJfbW9kdWxlcy9lbi8ifSksYFdpem5ldGApLGAgYW5kIGNvbXBhdGlibGUgd2l0aApBcmR1aW5vIGFuZCBpdHMgY2xvbmVzLiBUaGUgV2lmaSBTaGllbGQgb2ZmZXJzIHlvdSBhIHF1aWNrLCBlYXN5LCBhbmQKZWZmZWN0aXZlIHdheSB0byBhZGQgV2ktRmkgY2FwYWJpbGl0aWVzIHRvIEFyZHVpbm8uIFRoZSBXaWZpIFNoaWVsZAphbGxvd3MgeW91IHRvIGFjaGlldmUgV2lmaSBjb21tdW5pY2F0aW9uIHZpYSBVQVJUIGJ5IHNlbmRpbmcgQVQKY29tbWFuZHMsIHdoaWNoIGlzIGFuIGlkZWFsIHNvbHV0aW9uIGZvciB3aG9tIHdpdGggbGltaXRlZCBvciBubyBXaS1GaQpvciBSRiBleHBlcnRpc2UuIFRoZSBTaGllbGQgc3VwcG9ydHMgZGF0YSByYXRlcyB1cCB0byAxMSBNYnBzLCBhbmQgaXMKY29tcGxpYW50IHdpdGggODAyLjExYi5gKSksbWR4KCJociIsbnVsbCksbWR4KCJoMyIseyJpZCI6IndpZmktc2hpZWxkLXYyMC1mb3ItYXJkdWluby1jb21wYXRpYmxlLWZyb20tcm9ib3RiYXNlIn0sYFdpZmkgU2hpZWxkIFYyLjAgZm9yIEFyZHVpbm8gY29tcGF0aWJsZSBmcm9tIFJvYm90QmFzZWApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDkucm9ib3RlYmFzZS0xLmpwZyIsImFsdCI6ImVkaXRfMDkucm9ib3RlYmFzZS0xLmpwZyJ9KSksYApgLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8wOS5yb2JvdGViYXNlLTIuanBnIiwiYWx0IjoiZWRpdF8wOS5yb2JvdGViYXNlLTIuanBnIn0pKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly9yb2JvdGJhc2UuZW4uYWxpYmFiYS5jb20vcHJvZHVjdC8xMjYzOTI1NDM0LTIxMDYwODk0Mi9XaWZpX1NoaWVsZF9WMl8wX2Zvcl9BcmR1aW5vX2NvbXBhdGlibGUuaHRtbCJ9KSxgV2lGaSBTaGllbGQKdjIuMGApLGAKaXMgaXMgdGhlIG5ld2VzdCByZWxlYXNlIHdpcmVsZXNzIG1vZHVsZSBmb3IgQXJkdWlubyBlbnRodXNpYXN0LiBXaGljaAppcyBiYXNlZCBvbgrwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3dpem5ldC5jby5rci9zdWJfbW9kdWxlcy9lbi9wcm9kdWN0L1Byb2R1Y3RfRGV0YWlsLmFzcD9jYXRlMT01JmNhdGUyPTQzJmNhdGUzPTAmcGlkPTExMzIifSksYFdpekZpMjEwLmApLGAKSXQgcHJvdmlkZXMgdGhlIGJyaWRnaW5nIGZyb20gVFRMIHNlcmlhbCBwb3J0IGNvbW11bmljYXRpb24gdG8KSUVFRTgwMi4xMWIvZy9uIHdpcmVsZXNzIGNvbW11bmljYXRpb24uIFNvIGFueSBkZXZpY2Ugd2l0aCBUVEwgc2VyaWFsCnBvcnRzIGNhbiBlYXNpbHkgYmUgY29ubmVjdGVkIHdpdGggdGhpcyBXSUZJIG1vZHVsZSBhbmQgY29udHJvbGxlZCBhbmQKbWFuYWdlZCByZW1vdGVseSB0aHJvdWdoIGEgd2lyZWxlc3MgbmV0d29yay4gRGlmZmVyZW50IGtpbmRzIG9mCmNvbW11bmljYXRpb24gcHJvdG9jb2xzIGFuZCBlbmNyeXB0aW9uIGFsZ29yaXRobXMgYXJlIGludGVncmF0ZWQgd2l0aAp0aGUgbW9kdWxlLmApLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgVGhlIEFyZHVpbm8gYXJjaGl0ZWN0dXJlIGVuYWJsZXMgeW91IHRvIGVhc2lseSBpbnRlZ3JhdGUgdGhpcyBtb2R1bGUKaW50byBhbnkgQXJkdWlubyBiYXNlZCBwcm9qZWN0LmApKSxtZHgoImhyIixudWxsKSxtZHgoImgyIix7ImlkIjoid2l6ZmkyMjAifSxgd2l6ZmkyMjA6YCksbWR4KCJwIixudWxsLGAzcmQgcGFydHkgcHJvZHVjdHMgdXNpbmcgb3VyCvCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd2l6bmV0LmNvLmtyL3N1Yl9tb2R1bGVzL2VuL3Byb2R1Y3QvUHJvZHVjdF9EZXRhaWwuYXNwP2NhdGUxPTUmY2F0ZTI9NDMmY2F0ZTM9MCZwaWQ9MTEzNCJ9KSxgV2l6RmkyMjBgKSxgCm1vZHVsZTogIGApLG1keCgiaDMiLHsiaWQiOiJ3aXpmaS1zaGllbGQtd2l6ZmkyMjAtLS13aS1maSJ9LGBXaXpGaSBzaGllbGQgKFdpekZpMjIwIC0gV2ktRmkpYCksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8xMC5zaGQtd2l6ZmktMS5qcGciLCJhbHQiOiJlZGl0XzEwLnNoZC13aXpmaS0xLmpwZyJ9KSksYApgLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy92YXJfcHJvZHVjdHMvd2lmaV9zaGllbGQvZWRpdF8xMC5zaGQtd2l6ZmktMy5qcGciLCJhbHQiOiJlZGl0XzEwLnNoZC13aXpmaS0zLmpwZyJ9KSkpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYPCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vc2hvcC50YXZpci5odS9wcm9kdWN0X2luZm8ucGhwL2ZlZHBhbmVsc2hpZWxkLXdpemZpLXNoaWVsZC13aXpmaTIyMC13aWZpLXAtMTAwIn0pLGBUaGUgV2l6RmkKc2hpZWxkYCksYAppbiBubyB0aW1lIHVzaW5nIHRoZSBtaWNyb2NvbnRyb2xsZXIgY29ubmVjdGVkIHRvIGEgbmV0d29yayBzeXN0ZW0uClRoZSBzaGllbGQgb2YgdGhlIG1vZHVsZQrwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3dpem5ldC5jby5rci9zdWJfbW9kdWxlcy9lbi9wcm9kdWN0L1Byb2R1Y3RfRGV0YWlsLmFzcD9jYXRlMT01JmNhdGUyPTQzJmNhdGUzPTAmcGlkPTExMzIifSksYFdpekZpMjEwYCksYApwb3dlcmZ1bCB2ZXJzaW9uIG9mIHRoZSBtb2R1bGUgZml0dGVkIG9uCvCfjI5gLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd2l6bmV0LmNvLmtyL3N1Yl9tb2R1bGVzL2VuL3Byb2R1Y3QvUHJvZHVjdF9EZXRhaWwuYXNwP2NhdGUxPTUmY2F0ZTI9NDMmY2F0ZTM9MCZwaWQ9MTEzNCJ9KSxgV2l6RmkyMjBgKSxgCmF2YWlsYWJsZWAsYCFgLGAgVGhlIGhpZ2gtZ2FpbiBleHRlcm5hbCBhbnRlbm5hIG1vZHVsZSBpcyBvcHRpb25hbGx5CmF2YWlsYWJsZWAsYCFgKSksbWR4KCJociIsbnVsbCksbWR4KCJoMiIseyJpZCI6IndpemZpNjEwIn0sYHdpemZpNjEwOmApLG1keCgicCIsbnVsbCxgM3JkIHBhcnR5IHByb2R1Y3RzIHVzaW5nIG91cgrwn4yOYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3dpem5ldC5jby5rci9zdWJfbW9kdWxlcy9lbi9wcm9kdWN0L1Byb2R1Y3RfRGV0YWlsLmFzcD9jYXRlMT01JmNhdGUyPTQzJmNhdGUzPTAmcGlkPTEwNTUifSksYHdpemZpNjEwYCksYAptb2R1bGU6ICBgKSxtZHgoImgzIix7ImlkIjoid2lmaS1zaGllbGR3aXo2MTAtZnJvbS1vbGltYXgifSxgV2lmaSBzaGllbGQoV2l6NjEwKSBmcm9tIE9saW1heGApLG1keCgicCIsbnVsbCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDEud2lmaV9zaGllbGRfd2l6NjEwX2Zyb21fb2xpbWF4XzEuanBnIiwiYWx0IjoiZWRpdF8wMS53aWZpX3NoaWVsZF93aXo2MTBfZnJvbV9vbGltYXhfMS5qcGcifSkpLGAKYCxtZHgoImltZyIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7InNyYyI6Ii9pbWcvdmFyX3Byb2R1Y3RzL3dpZmlfc2hpZWxkL2VkaXRfMDEud2lmaV9zaGllbGRfd2l6NjEwX2Zyb21fb2xpbWF4LTIuanBnIiwiYWx0IjoiZWRpdF8wMS53aWZpX3NoaWVsZF93aXo2MTBfZnJvbV9vbGltYXgtMi5qcGcifSkpKSxtZHgoImJsb2NrcXVvdGUiLG51bGwsbWR4KCJwIix7cGFyZW50TmFtZToiYmxvY2txdW90ZSJ9LGBUaGUg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cub2xpbWV4LmNsL3Byb2R1Y3RfaW5mby5waHA/cHJvZHVjdHNfaWQ9NzY4JnByb2R1Y3RfX25hbWU9QXJkdWlub19XaUZpX1NoaWVsZF8lMjhXSVo2MTAlMjkmbGFuZ3VhZ2U9ZW4ifSksYEFyZHVpbm8gV2lGaQpTaGllbGRgKSxgCmlzIHRoZSBhZGFwdGVyIHBsYXRlIGZvciB0aGUg8J+MjmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93aXpuZXQuY28ua3Ivc3ViX21vZHVsZXMvZW4vcHJvZHVjdC9Qcm9kdWN0X0RldGFpbC5hc3A/Y2F0ZTE9NSZjYXRlMj00MyZjYXRlMz0wJnBpZD0xMDIwIn0pLGBXSVpuZXQgV0laNjEwd2kgV2lGaQptb2R1bGUuYCksYApUaGlzIHNoaWVsZCBwcm92aWRlcyA4MDIuMTFiL2cgY29ubmVjdGl2aXR5LCBhbmQgaXMgY29tcGF0aWJsZSB3aXRoCkR1ZW1pbGFub3ZlLCBNZWdhLCBhbmQgVW5vIHBsYXRmb3Jtcy4gVGhpcyBTaGllbGQgY2FuIGVhc2lseSBjb25uZWN0CnRvIHRoZSBpbnRlcm5ldCB1dGlsaXppbmcgdGhlIHdpZGVseSB1c2VkIGNvbW11bmljYXRpb25zIGZyYW1ld29yayBhcwpXaUZpLmApLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgVGhlIFdJWjYxMHdpIFdpRmkgbW9kdWxlIGhhcyBhIGhhcmR3YXJlIFRDUC9JUCBzdGFjaywgd2hpY2ggbWFrZXMgaXQKb25lIG9mIHRoZSBtb3N0IHN0YWJsZSBzdGFja3MgaW4gdGhlIG1hcmtldCwgd2l0aG91dCBoYXZpbmcgdG8gc3BlbmQKcmVzb3VyY2VzIG9mIHRoZSBwcm9jZXNzb3Igb3IgbWljcm9jb250cm9sbGVyIGluIGNvbW11bmljYXRpb24gdGFza3MuYCksbWR4KCJwIix7cGFyZW50TmFtZToiYmxvY2txdW90ZSJ9LGBUaGUgQXJkdWlubyBXaUZpIFNoaWVsZCBjb21lcyB3aXRoIGEgY29tcGxldGUgbGlicmFyeSBvZiBmdW5jdGlvbnMgZm9yCmRhdGEgdHJhbnNtaXR0aW5nIGFuZCBXaUZpIGNvbmZpZ3VyYXRpb24gbW9kdWxlIGRldmVsb3BlZCBieSBNQ0kuYCkpLG1keCgiaHIiLG51bGwpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}