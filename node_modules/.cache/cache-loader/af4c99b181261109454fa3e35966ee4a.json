{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Open-Source-Hardware/CooCox.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Open-Source-Hardware/CooCox.md","mtime":1596193974237},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-open-source-hardware-coo-cox-md-c3c.json","mtime":1597141330196},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvYWxiaW5qb3NlcGgvRG9jdW1lbnRzL0dpdEh1Yi9kb2N1bWVudF9mcmFtZXdvcmsvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17fTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6IlByb2R1Y3QvT3Blbi1Tb3VyY2UtSGFyZHdhcmUvQ29vQ294IiwiaWQiOiJQcm9kdWN0L09wZW4tU291cmNlLUhhcmR3YXJlL0Nvb0NveCIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJDb29Db3giLCJkZXNjcmlwdGlvbiI6IkNvb0NveCIsInNvdXJjZSI6IkBzaXRlL2RvY3MvUHJvZHVjdC9PcGVuLVNvdXJjZS1IYXJkd2FyZS9Db29Db3gubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9Qcm9kdWN0L09wZW4tU291cmNlLUhhcmR3YXJlL0Nvb0NveCIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vV2l6bmV0L2RvY3VtZW50X2ZyYW1ld29yay90cmVlL21hc3Rlci9kb2NzL1Byb2R1Y3QvT3Blbi1Tb3VyY2UtSGFyZHdhcmUvQ29vQ294Lm1kIn07LyogQGpzeCBtZHggKi9leHBvcnQgdmFyIHJpZ2h0VG9jPVt7dmFsdWU6J0luc3RhbGxhdGlvbicsaWQ6J2luc3RhbGxhdGlvbicsY2hpbGRyZW46W119LHt2YWx1ZTonQ29vQ294IE9wZW4gSURFJyxpZDonY29vY294LW9wZW4taWRlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidUb29sLWNoYWlucyBzZXR0aW5nIGluIENvSURFJyxpZDondG9vbC1jaGFpbnMtc2V0dGluZy1pbi1jb2lkZScsY2hpbGRyZW46W119LHt2YWx1ZTonQ29YLVBlcmlwaGVyYWwgSW50ZXJmYWNlJyxpZDonY294LXBlcmlwaGVyYWwtaW50ZXJmYWNlJyxjaGlsZHJlbjpbXX1dO3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXtyaWdodFRvYzpyaWdodFRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMSIseyJpZCI6ImNvb2NveCJ9LCJDb29Db3giKSxtZHgoInAiLG51bGwsIlZpc2l0IHRvIHRoZSBXZWIgc2l0ZSIpLG1keCgicCIsbnVsbCwiVVJMIDpcdUQ4M0NcdURGMEUiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmNvb2NveC5vcmcvSW5kZXguaHRtbCJ9KSwiaHR0cDovL3d3dy5jb29jb3gub3JnL0luZGV4Lmh0bWwiKSwiXSIsIigiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmNvb2NveC5vcmcvSW5kZXguaHRtbCJ9KSwiaHR0cDovL3d3dy5jb29jb3gub3JnL0luZGV4Lmh0bWwiKSwiLiIpLG1keCgiaHIiLG51bGwpLG1keCgiaDIiLHsiaWQiOiJpbnN0YWxsYXRpb24ifSwiSW5zdGFsbGF0aW9uIiksbWR4KCJociIsbnVsbCksbWR4KCJwIixudWxsLCJDb0lERSBqdXN0IHByb3ZpZGVzIGRldmVsb3BtZW50IGVudmlyb25tZW50IHdpdGhvdXRcbnRvb2wtY2hhaW5zLiBTbyB5b3UgbmVlZCB0byBpbnN0YWxsIHRvb2wtY2hhaW5zIGF0IGZpcnN0LiBXZSB1c2UgQVJNIGdjY1xuNC43IGZvciB0b29sLWNoYWlucy4iKSxtZHgoInAiLG51bGwsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIkFSTSBHQ0MgNC43IEZlYXR1cmVzOiIpKSxtZHgoInAiLG51bGwsIi0iLCIgQWxsIEdDQyA0LjcgZmVhdHVyZXMsIHBsdXMgbGF0ZXN0IG1haW5saW5lIGZlYXR1cmVzIC0gQWRkaXRpb25hbCBjb2RlXG5zaXplIG9wdGltaXphdGlvbnMgLSBOZXdsaWItbmFubzogbmV3bGliIGJyYW5jaCBvcHRpbWl6ZWQgZm9yIGNvZGUgc2l6ZSIpLG1keCgicCIsbnVsbCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9sYXVuY2hwYWQubmV0L2djYy1hcm0tZW1iZWRkZWQvK2Rvd25sb2FkIn0pLCJEb3dubG9hZCB0aGUgbGF0ZXN0XG5hcm0tZ2NjLWVtYmJlZCIpKSxtZHgoImgyIix7ImlkIjoiY29vY294LW9wZW4taWRlIn0sIkNvb0NveCBPcGVuIElERSIpLG1keCgiaHIiLG51bGwpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiQ29vQ294IiksIiBwcm92aWRlcyBpbnRlZ3JhdGlvbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxuY2FsbGVkICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIkNvSURFIiksIiBmb3IgQVJNIENvcnRleCBNIHNlcmllcyBtaWNyb2NvbnRyb2xsZXJzLiAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJDb0lERSIpLCJcbnN1cHBvcnRzIEFSTSBnY2MgYmFzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgb2YgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiZWNsaXBzZSIpLCIuIiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJTeXN0ZW0gcmVxdWlyZW1lbnRzOiIpKSxtZHgoInAiLG51bGwsIi0iLCIgV2luZG93cyBYUCBTUDMgLyBXaW5kb3dzIFZpc3RhIC8gV2luZG93cyA3IiksbWR4KCJwIixudWxsLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJGZWF0dXJlczoiKSksbWR4KCJwIixudWxsLCItIiwiIEZyZWUgdG8gdXNlIC0gRnVsbCBmdW5jdGlvbmFsIElERSAtIENvbXBvbmVudC1vcmllbnRlZCBkZXZlbG9wbWVudFxucGxhdGZvcm0gLSBJbnRlcm5ldC1iYXNlZCwgZWZmaWNpZW50IGludGVncmF0aW9uIG9mIG5ldHdvcmsgcmVzb3VyY2VzIC1cbkludGVncmF0ZXMgQ29PUyAtIFBlcmlwaGVyYWwgcmVnaXN0ZXJzIiksbWR4KCJwIixudWxsLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwOi8vd3d3LmNvb2NveC5vcmcvQ29vQ294X0NvSURFLmh0bSJ9KSwiQ29JREUgRG93bmxvYWQgYW5kIGxlYXJuXG5tb3JlIiksIiAiKSxtZHgoImgyIix7ImlkIjoidG9vbC1jaGFpbnMtc2V0dGluZy1pbi1jb2lkZSJ9LCJUb29sLWNoYWlucyBzZXR0aW5nIGluIENvSURFIiksbWR4KCJociIsbnVsbCksbWR4KCJwIixudWxsLCJCZWZvcmUgeW91IHVzZSBDb0lERSB0byBzdGFydCB5b3VyIHByb2plY3QsIHlvdSBuZWVkIHRvXG5jb25maWcgdGhlIEdDQyBjb21waWxlciBhdCBmaXJzdC4iKSxtZHgoInAiLG51bGwsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cuY29vY294Lm9yZy9Db0lERS9Db21waWxlcl9TZXR0aW5ncy5odG1sIn0pLCJDb21waWxlciBTZXR0aW5nIGluXG5Db0lERSIpKSxtZHgoImgyIix7ImlkIjoiY294LXBlcmlwaGVyYWwtaW50ZXJmYWNlIn0sIkNvWC1QZXJpcGhlcmFsIEludGVyZmFjZSIpLG1keCgiaHIiLG51bGwpLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiQ294LVBlcmlwaGVyYWwgaW50ZXJmYWNlIiksIiBpcyBDb21tb24gV3JhcHBlciBJbnRlcmZhY2UgdG9cbnBvcnQgcGVyaXBoZXJhbCBlYXNpbHkgd2hpY2ggaXMgZGlmZmVyZW50IGluIGVhY2ggdmVuZG9ycy4gSWYgU1BJIGlzXG5kZXNpZ25lZCBieSBDb3gtUGVyaXBoZXJhbCBJbnRlcmZhY2Ugc3RhcnRpbmcgYXMgeChlLmcuIHhHUElPTW9kZVNldCksXG55b3UgY2FuIG9wZXJhdGUgYnkgY2hhbmdpbmcganVzdCBTUEkgaW50ZXJmYWNlIFBJTiBzZXR0aW5nIGluIGVhY2ggTUNVc1xub3IgRVZCLWJvYXJkcy4iKSxtZHgoInAiLG51bGwsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHA6Ly93d3cuY29vY294Lm9yZy9DT1guaHRtbCJ9KSwiTGVhcm4gbW9yZSIpKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}