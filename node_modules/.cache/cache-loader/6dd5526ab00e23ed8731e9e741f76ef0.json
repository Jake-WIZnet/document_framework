{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/iMCU/W7500/documents/appnote/How_to_use_MDK_for_W7500_Peripherals_Examples.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/iMCU/W7500/documents/appnote/How_to_use_MDK_for_W7500_Peripherals_Examples.md","mtime":1596193974290},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-i-mcu-w-7500-documents-appnote-how-to-use-mdk-for-w-7500-peripherals-examples-md-8ff.json","mtime":1597141330208},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}