{"remainingRequest":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Wi-Fi-Module/WizFi250/Programers-Guide/Examples_Data_Communication.md","dependencies":[{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/docs/Product/Wi-Fi-Module/WizFi250/Programers-Guide/Examples_Data_Communication.md","mtime":1596193974265},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/.docusaurus/docusaurus-plugin-content-docs/site-docs-product-wi-fi-module-wiz-fi-250-programers-guide-examples-data-communication-md-2c8.json","mtime":1597141330206},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/cache-loader/dist/cjs.js","mtime":1596197835880},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/babel-loader/lib/index.js","mtime":1596197835282},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1596377278862},{"path":"/Users/albinjoseph/Documents/GitHub/document_framework/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1596377277825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FsYmluam9zZXBoL0RvY3VtZW50cy9HaXRIdWIvZG9jdW1lbnRfZnJhbWV3b3JrL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvYWxiaW5qb3NlcGgvRG9jdW1lbnRzL0dpdEh1Yi9kb2N1bWVudF9mcmFtZXdvcmsvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J2V4YW1wbGVzX2RhdGFfY29tbXVuaWNhdGlvbicsdGl0bGU6J0V4YW1wbGVzIC0gRGF0YSBDb21tdW5pY2F0aW9uJyxkYXRlOm5ldyBEYXRlKCcyMDIwLTA0LTI0VDAwOjAwOjAwLjAwMFonKX07ZXhwb3J0IHZhciBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJQcm9kdWN0L1dpLUZpLU1vZHVsZS9XaXpGaTI1MC9Qcm9ncmFtZXJzLUd1aWRlL2V4YW1wbGVzX2RhdGFfY29tbXVuaWNhdGlvbiIsImlkIjoiUHJvZHVjdC9XaS1GaS1Nb2R1bGUvV2l6RmkyNTAvUHJvZ3JhbWVycy1HdWlkZS9leGFtcGxlc19kYXRhX2NvbW11bmljYXRpb24iLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiRXhhbXBsZXMgLSBEYXRhIENvbW11bmljYXRpb24iLCJkZXNjcmlwdGlvbiI6Ik1ldGhvZCBvZiBzZXR0aW5nIFRDUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1Byb2R1Y3QvV2ktRmktTW9kdWxlL1dpekZpMjUwL1Byb2dyYW1lcnMtR3VpZGUvRXhhbXBsZXNfRGF0YV9Db21tdW5pY2F0aW9uLm1kIiwicGVybWFsaW5rIjoiL2RvY3MvUHJvZHVjdC9XaS1GaS1Nb2R1bGUvV2l6RmkyNTAvUHJvZ3JhbWVycy1HdWlkZS9leGFtcGxlc19kYXRhX2NvbW11bmljYXRpb24iLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL1dpem5ldC9kb2N1bWVudF9mcmFtZXdvcmsvdHJlZS9tYXN0ZXIvZG9jcy9Qcm9kdWN0L1dpLUZpLU1vZHVsZS9XaXpGaTI1MC9Qcm9ncmFtZXJzLUd1aWRlL0V4YW1wbGVzX0RhdGFfQ29tbXVuaWNhdGlvbi5tZCIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiRXhhbXBsZXMgLSBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIiwicGVybWFsaW5rIjoiL2RvY3MvUHJvZHVjdC9XaS1GaS1Nb2R1bGUvV2l6RmkyNTAvUHJvZ3JhbWVycy1HdWlkZS9leGFtcGxlc19hc3NvY2lhdGlvbl9kaXNhc3NvY2lhdGlvbiJ9LCJuZXh0Ijp7InRpdGxlIjoiRXhhbXBsZXMgLSBXaUZpIERpcmVjdCIsInBlcm1hbGluayI6Ii9kb2NzL1Byb2R1Y3QvV2ktRmktTW9kdWxlL1dpekZpMjUwL1Byb2dyYW1lcnMtR3VpZGUvZXhhbXBsZXNfd2lmaV9kaXJlY3QifX07LyogQGpzeCBtZHggKi9leHBvcnQgdmFyIHJpZ2h0VG9jPVt7dmFsdWU6J01ldGhvZCBvZiBzZXR0aW5nIFRDUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUnLGlkOidtZXRob2Qtb2Ytc2V0dGluZy10Y3AtY2xpZW50LWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gRGF0YSBNb2RlJyxpZDonbWV0aG9kLW9mLXNldHRpbmctdGNwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWRhdGEtbW9kZScsY2hpbGRyZW46W119LHt2YWx1ZTonTWV0aG9kIG9mIHNldHRpbmcgVURQIENsaWVudCBhbmQgZXhjaGFuZ2luZyBkYXRhIGluIERhdGEgTW9kZScsaWQ6J21ldGhvZC1vZi1zZXR0aW5nLXVkcC1jbGllbnQtYW5kLWV4Y2hhbmdpbmctZGF0YS1pbi1kYXRhLW1vZGUnLGNoaWxkcmVuOltdfSx7dmFsdWU6J01ldGhvZCBvZiBzZXR0aW5nIFVEUCBTZXJ2ZXIgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUnLGlkOidtZXRob2Qtb2Ytc2V0dGluZy11ZHAtc2VydmVyLWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgQ2xpZW50IGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlJyxpZDonbWV0aG9kLW9mLXNldHRpbmctdGNwLWNsaWVudC1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZScsY2hpbGRyZW46W119LHt2YWx1ZTonTWV0aG9kIG9mIHNldHRpbmcgVENQIFNlcnZlciBhbmQgZXhjaGFuZ2luZyBkYXRhIGluIENvbW1hbmQgTW9kZScsaWQ6J21ldGhvZC1vZi1zZXR0aW5nLXRjcC1zZXJ2ZXItYW5kLWV4Y2hhbmdpbmctZGF0YS1pbi1jb21tYW5kLW1vZGUnLGNoaWxkcmVuOltdfSx7dmFsdWU6J01ldGhvZCBvZiBzZXR0aW5nIFVEUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBDb21tYW5kIE1vZGUnLGlkOidtZXRob2Qtb2Ytc2V0dGluZy11ZHAtY2xpZW50LWFuZC1leGNoYW5naW5nLWRhdGEtaW4tY29tbWFuZC1tb2RlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidNZXRob2Qgb2Ygc2V0dGluZyBVRFAgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlJyxpZDonbWV0aG9kLW9mLXNldHRpbmctdWRwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZScsY2hpbGRyZW46W119LHt2YWx1ZTonQVQrU0NPTicsaWQ6J2F0c2NvbicsY2hpbGRyZW46W119LHt2YWx1ZTonRXhhbXBsZSBvZiBTU0wgQ29ubmVjdGlvbicsaWQ6J2V4YW1wbGUtb2Ytc3NsLWNvbm5lY3Rpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J0V4YW1wbGUgb2YgTXVsdGkgU29ja2V0IENvbm5lY3Rpb24nLGlkOidleGFtcGxlLW9mLW11bHRpLXNvY2tldC1jb25uZWN0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBaXIgQ29tbWFuZCBtb2RlIC0gV2l6RmkyNTBBaXJDbWQnLGlkOidhaXItY29tbWFuZC1tb2RlLS0td2l6ZmkyNTBhaXJjbWQnLGNoaWxkcmVuOltdfV07dmFyIG1ha2VTaG9ydGNvZGU9ZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKXtyZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307fTt2YXIgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jOnJpZ2h0VG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgyIix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdGNwLWNsaWVudC1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWRhdGEtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBUQ1AgQ2xpZW50IGFuZCBleGNoYW5naW5nIGRhdGEgaW4gRGF0YSBNb2RlIiksbWR4KCJoNCIseyJpZCI6InNvY2tldC1vcGVuIn0sIlNvY2tldCBPcGVuIiksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgaG93IHRvIG9wZW4gPCBUQ1AgQ2xpZW50IFNvY2tldD4gYW5kIGNvbW11bmljYXRlIHdpdGggcGVlciBzeXN0ZW0uIEJlbG93IGlzIGFuIGV4YW1wbGUgc2hvd2luZyBob3cgdG8gc2V0IFRDUCBDbGllbnQgYW5kIGNoYW5nZSB0aGUgbW9kZSB0byBkYXRhIG1vZGUuIEl0IGFsc28gZXhwbGFpbnMgcGFyYW1ldGVycyBvZiA8IEFUK1NDT04+IGNvbW1hbmQuIiksbWR4KCJwIixudWxsLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiKEFUK1NDT049PCBPcGVuVHlwZT4sPCBTb2NrZXRUeXBlPiw8IFJlbW90ZUlQPiw8IFJlbW90ZVBvcnQ+LDwgTG9jYWxQb3J0Piw8IERhdGFNb2RlPikiKSksbWR4KCJwIixudWxsLCJJZiB5b3UgZW50ZXIgPCBPPiBvciA8IFNPPiB2YWx1ZSB0byA8IE9wZW4gVHlwZT4gcGFyYW1ldGVyLCBXaXpGaTI1MCB3aWxsIHRyeSB0byBjb25uZWN0IHRvIFRDUCBTZXJ2ZXIgaW1tZWRpYXRlbHkuIiksbWR4KCJwIixudWxsLCJCdXQgd2hlbiB1c2luZyA8IFM+IHZhbHVlLCBXaXpGaTI1MCB3aWxsIHRyeSB0byBjb25uZWN0IHRvIFRDUCBTZXJ2ZXIgYWZ0ZXIgcmVib290IGFuZCB5b3UgaGF2ZSB0byBzZXQgU29ja2V0VHlwZSxSZW1vdGVJUCxSZW1vdGVQb3J0IGFuZCBMb2NhbFBvcnQgYXMgYmVsb3ciKSxtZHgoInAiLG51bGwsIkluIG9yZGVyIHRvIHNldCBXaXpGaTI1MCB0byBkYXRhIG1vZGUsIHlvdSBoYXZlIHRvIGVudGVyIDEgdmFsdWUgdG8gPCBEYXRhIE1vZGU+IHBhcmFtZXRlciBvZiBBVCtTQ09OIGNvbW1hbmQuIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiB0byB0aGlzIGNvbW1hbmQsIHJlZmVyIHRvIEFUK1NDT04uICIpLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk1vZGU6IERhdGEgTW9kZSwgVENQIENsaWVudCIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJSZW1vdGUgSVAgOiAxOTIuMTY4LjEyLjEwMiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJSZW1vdGUgUG9ydCA6IDUwMDAiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTG9jYWwgUG9ydCA6IDUwMDEiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgICAgICAgKCBSZWZlcnMgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuQVQrU0NPTj1PLFRDTiwxOTIuMTY4LjEyLjEwMiw1MDAwLDUwMDEsMSAoIEFUIGNvbW1hbmQgY29ubmVjdGluZyB3aXRoIGEgVENQIENsaWVudCBTb2NrZXQgKVxuW09LXVxuXG5bQ09OTkVDVCAwXSAgICAgICAgICAgICAgICAgICAgICAgICAgPCA9IEF0IHRoaXMgcG9pbnQsIGEgVENQIGNvbm5lY3Rpb24gaXMgZG9uZSBcbiIpKSxtZHgoImg0Iix7ImlkIjoiZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbSJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJJZiBXaXpGaTI1MCBzdWNjZXNzZnVsbHkgY29ubmVjdHMgdG8gYSBwZWVyIHN5c3RlbSwgV2l6RmkyNTAgd2lsbCBwcmludCAiLCJbQ09OTkVDVChDSUQpXSIsIiBtZXNzYWdlIGFuZCBlbnRlciBkYXRhIG1vZGUuIEluIGRhdGEgbW9kZSwgV2l6RmkyNTAgY2FuIHNlbmQgc2VyaWFsIGRhdGEgdG8gcGVlciBzeXN0ZW0gYW5kIHJlY2VpdmUgbmV0d29yayBkYXRhIGZyb20gcGVlciBzeXN0ZW0gd2l0aG91dCBvdGhlciB0cmFuc2xhdGlvbi4iKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlIn0sIlNvY2tldCBDbG9zZSIpLG1keCgicCIsbnVsbCwiSW4gb3JkZXIgdG8gY2xvc2UgVENQIGNvbm5lY3Rpb24sIFdpekZpMjUwIGhhcyB0byBzd2l0Y2ggdG8gQVQgQ29tbWFuZCBNb2RlLiAoIFdoZW4gKysrIG1lc3NhZ2UgZW50ZXJlZCwgV2l6RmkyNTAgY2FuIGJlIGNoYW5nZWQgdG8gQVQgQ29tbWFuZCBNb2RlLiApIEFmdGVyIGJlaW5nIGNoYW5nZWQgdG8gQVQgQ29tbWFuZCBNb2RlLCBUQ1AgQ29ubmVjdGlvbiBjYW4gYmUgY2xvc2VkIGJ5IHVzaW5nIDwgQVQrU01HTVQ9Q0lEPiBvciA8IEFUK1NNR01UPUFMTD4gY29tbWFuZC4iKSxtZHgoImg0Iix7ImlkIjoiY2hlY2tpbmctc29ja2V0LXN0YXR1cyJ9LCJDaGVja2luZyBTb2NrZXQgU3RhdHVzIiksbWR4KCJwIixudWxsLCJBZnRlciBiZWluZyBjaGFuZ2VkIHRvIEFUIENvbW1hbmQgTW9kZSwgVENQIENvbm5lY3Rpb24gY2FuIGJlIGNsb3NlZCBieSB1c2luZyA8IEFUK1NNR01UPUNJRD4gb3IgPCBBVCtTTUdNVD1BTEw+IGNvbW1hbmQuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBVCtTTUdNVD0/XG5OdW1iZXIgb2YgU29ja2V0cyA6IDEgKFNDSUQvU29ja2V0L01vZGUvUmVtb3RlL0xvY2FsL0RhdGFNb2RlKVxuMC9UQ04vMTkyLjE2OC4xMi4yMzo1MDAwLzUwMDEvMVxuW09LXVxuIikpLG1keCgiaDIiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy10Y3Atc2VydmVyLWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFRDUCBTZXJ2ZXIgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUiKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LW9wZW4tMSJ9LCJTb2NrZXQgT3BlbiIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBvcGVuIDwgVENQIFNlcnZlciBTb2NrZXQ+IGFuZCBjb21tdW5pY2F0ZSB3aXRoIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyB0aGUgZXhhbXBsZSBmb3Igc2V0dGluZyBUQ1AgU2VydmVyIGFuZCB0aGVuIGNoYW5naW5nIHRvIGRhdGEgbW9kZS4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IDwgQVQrU0NPTj4gY29tbWFuZCwgcmVmZXIgdG8gQVQrU0NPTiBhbmQgU29ja2V0IE9wZW4uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgICAqIE1vZGUgOiBEYXRhIE1vZGUsIFRDUCBTZXJ2ZXJcbiAgICogTG9jYWwgUG9ydCA6IDUwMDBcbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIkFQIEFzc29jaWF0aW9uICAgICAgICAgICAgICAoIFJlZmVyIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbkFUK1NDT049TyxUU04sICwgLDUwMDAsMSAgICAgICAgKCBBVCBjb21tYW5kIGxpc3RlbmluZyB3aXRoIGEgVENQIFNlcnZlciBTb2NrZXQgKVxuW09LXVxuXG5bQ09OTkVDVCAwXSAgICAgICAgICA8ID0gV2hlbiBUQ1AgY29ubmVjdGlvbiBpcyBkb25lLCB5b3UgY2FuIHNlZSB0aGlzIG1lc3NhZ2VcbiIpKSxtZHgoImg0Iix7ImlkIjoiZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbS0xIn0sIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGEgcGVlciBzeXN0ZW0iKSxtZHgoInAiLG51bGwsIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGl0cyBwZWVyIHN5c3RlbSBpcyB0aGUgc2FtZSBhcyBwcmV2aW91cyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIifSksIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGEgcGVlciBzeXN0ZW0uIikpLG1keCgiaDQiLHsiaWQiOiJzb2NrZXQtY2xvc2UtMSJ9LCJTb2NrZXQgQ2xvc2UiKSxtZHgoInAiLG51bGwsIkNsb3Npbmcgc29ja2V0IGNvbm5lY3Rpb24gaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJTb2NrZXQgQ2xvc2UiKSwiLiIpLG1keCgiaDQiLHsiaWQiOiJjaGVja2luZy1zb2NrZXQtc3RhdHVzLTEifSwiQ2hlY2tpbmcgU29ja2V0IFN0YXR1cyIpLG1keCgicCIsbnVsbCwiQ2hlY2tpbmcgc29ja2V0IHN0YXR1cyBpcyB0aGUgc2FtZSBhcyBwcmV2aW91cyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIifSksIkNoZWNraW5nIFNvY2tldCBTdGF0dXMuIikpLG1keCgiaDIiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy11ZHAtY2xpZW50LWFuZC1leGNoYW5naW5nLWRhdGEtaW4tZGF0YS1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFVEUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBEYXRhIE1vZGUiKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LW9wZW4tMiJ9LCJTb2NrZXQgT3BlbiIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBvcGVuIDwgVURQIENsaWVudCBTb2NrZXQ+IGFuZCBjb21tdW5pY2F0ZSB0byBwZWVyIHN5c3RlbS4gQmVsb3cgaXMgYW4gZXhhbXBsZSBmb3Igc2V0dGluZyB1cCBVRFAgQ2xpZW50IGFuZCBjaGFuZ2luZyBpbnRvIGRhdGEgbW9kZS4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IDwgQVQrU0NPTj4gY29tbWFuZCwgcmVmZXIgdG8gIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJBVCtTQ09OIiksIiBhbmQgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJTb2NrZXQgT3Blbi4iKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgICAqIE1vZGUgOiBEYXRhIE1vZGUsIFVEUCBDbGllbnRcbiAgICogUmVtb3RlIElQIDogMTkyLjE2OC4xMi4yM1xuICAgKiBSZW1vdGUgUG9ydCA6IDUwMDFcbiAgICogTG9jYWwgUG9ydCA6IDUwMDBcbiIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIkFQIEFzc29jaWF0aW9uICAgICAgICAgICAgICAoIFJlZmVyIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbkFUK1NDT049TyxVQ04sMTkyLjE2OC4xMi4yMyw1MDAxLDUwMDAsMSBcbltPS11cblxuW0NPTk5FQ1QgMF0gICAgICAgICAgICAgICAgICAgICAgICAgIDwgPSBBdCB0aGlzIHBvaW50LCBhIFVEUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJoNCIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tMiJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBpdHMgcGVlciBzeXN0ZW0gaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtLiIpKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlLTIifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiJ9KSwiU29ja2V0IENsb3NlLiIpKSxtZHgoImg0Iix7ImlkIjoiY2hlY2tpbmctc29ja2V0LXN0YXR1cy0yIn0sIkNoZWNraW5nIFNvY2tldCBTdGF0dXMiKSxtZHgoInAiLG51bGwsIkNoZWNraW5nIHNvY2tldCBzdGF0dXMgaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJDaGVja2luZyBTb2NrZXQgU3RhdHVzLiIpKSxtZHgoImgyIix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdWRwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWRhdGEtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBVRFAgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gRGF0YSBNb2RlIiksbWR4KCJoNCIseyJpZCI6InNvY2tldC1vcGVuLTMifSwiU29ja2V0IE9wZW4iKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gb3BlbiA8ICBVRFAgU2VydmVyIFNvY2tldD4gYW5kIGNvbW11bmljYXRlIHRvIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyBhbiBleGFtcGxlIGZvciBzZXR0aW5nIHVwIFVEUCBTZXJ2ZXIgYW5kIGNoYW5naW5nIGludG8gZGF0YSBtb2RlLiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgPCAgQVQrU0NPTj4gY29tbWFuZCwgcmVmZXIgdG8gIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJBVCtTQ09OIiksIiBhbmQgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiIn0pLCJTb2NrZXQgT3BlbiIpLCIuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgICAqIE1vZGU6IERhdGEgTW9kZSwgVURQIFNlcnZlclxuICAgKiBMb2NhbCBQb3J0OiA1MDAwXG5cbiBBUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgKCBSZWZlciB0byBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIEV4YW1wbGUgKVxuXG5BVCtTQ09OPU8sVVNOLCAsICw1MDAwLDFcbltPS11cblxuW0NPTk5FQ1QgMF0gICAgICAgICAgICAgICAgICAgICAgICAgIDwgPSBBdCB0aGlzIHBvaW50LCBhIFVEUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJoNCIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tMyJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCI8IFVEUCBTZXJ2ZXIgTW9kZT4gY2FuIGNvbm5lY3QgVURQIGNvbm5lY3Rpb24gd2l0aG91dCBwZWVyIHN5c3RlcyBpbmZvcm1hdGlvbiBsaWtlIElQIGFkZHJlc3MgYW5kIHBvcnQgbnVtYmVyLiBCdXQgYmVmb3JlIHBlZXIgc3lzdGVtIGlzIGNvbm5lY3RlZCB0byBXaXpGaTI1MCwgV2l6RmkyNTAgZG9lcyBub3Qgc2VuZCBkYXRhIHRvIHBlZXIgc3lzdGVtIGJlY2F1c2UgV2l6RmkyNTAgZG9lcyBub3Qga25vdyBpdHMgaW5mb3JtYXRpb24uIFRodXMgcGVlciBzeXN0ZW0gbXVzdCBzZW5kIGRhdGEgdG8gV2l6RmkyNTAgaW4gb3JkZXIgdG8ga25vdyBwZWVyIHN5c3RlbVx1MjAxOXMgaW5mb3JtYXRpb24gbGlrZSBiZWxvdy5cbiIsbWR4KCJpbWciLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJzcmMiOiIvaW1nL3Byb2R1Y3RzL3dpemZpMjUwL3dpemZpMjUwcGcvY2F1dGlvbl93aGVuX3VzaW5nX3VkcF9zZXJ2ZXJfbW9kZS5wbmciLCJhbHQiOm51bGx9KSksIlxuVGhlIG90aGVyIGluZm9ybWF0aW9uIGZvciBleGNoYW5naW5nIGRhdGEgaXMgc2FtZSBhcyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIifSksIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGEgcGVlciBzeXN0ZW0uIikpLG1keCgiaDQiLHsiaWQiOiJzb2NrZXQtY2xvc2UtMyJ9LCJTb2NrZXQgQ2xvc2UiKSxtZHgoInAiLG51bGwsIkNsb3Npbmcgc29ja2V0IGNvbm5lY3Rpb24gaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgU29ja2V0IENsb3NlLiIpLG1keCgiaDQiLHsiaWQiOiJjaGVja2luZy1zb2NrZXQtc3RhdHVzLTMifSwiQ2hlY2tpbmcgU29ja2V0IFN0YXR1cyIpLG1keCgicCIsbnVsbCwiQ2hlY2tpbmcgc29ja2V0IHN0YXR1cyBpcyB0aGUgc2FtZSBhcyBwcmV2aW91cyBDaGVja2luZyBTb2NrZXQgU3RhdHVzLiIpLG1keCgiaDIiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy10Y3AtY2xpZW50LWFuZC1leGNoYW5naW5nLWRhdGEtaW4tY29tbWFuZC1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFRDUCBDbGllbnQgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBDb21tYW5kIE1vZGUiKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LW9wZW4tNCJ9LCJTb2NrZXQgT3BlbiIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBzZXQgPCAgVENQIENsaWVudD4gaW4gPCAgQ29tbWFuZCBNb2RlPiBhbmQgY29tbXVuaWNhdGUgdG8gcGVlciBzeXN0ZW0uIEJlbG93IGlzIHRoZSBleGFtcGxlIGZvciBzZXR0aW5nIFRDUCBDbGllbnQgb24gdGhlIENvbW1hbmQgTW9kZSAuIEluIG9yZGVyIHRvIGVudGVyIGluIHRoZSBDb21tYW5kIE1vZGUsIHlvdSBoYXZlIHRvIGVudGVyIDAgdmFsdWUgdG8gPCAgRGF0YSBNb2RlPiBwYXJhbWV0ZXIgb2YgPCAgQVQrU0NPTj4gY29tbWFuZC4gRm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIHRvIHRoaXMgY29tbWFuZCwgcmVmZXIgdG8gQVQrU0NPTiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICAgKiBNb2RlIDogQ29tbWFuZCBNb2RlLCBUQ1AgQ2xpZW50XG4gICAqIFJlbW90ZSBJUDogMTkyLjE2OC4xMi4yM1xuICAgKiBSZW1vdGUgUG9ydCA6IDUwMDBcbiAgICogTG9jYWwgUG9ydCA6IDUwMDFcblxuQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICggUmVmZXIgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuQVQrU0NPTj1PLFRDTiwxOTIuMTY4LjEyLjIzLDUwMDAsNTAwMSwwXG5bT0tdXG5cbltDT05ORUNUIDBdICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwgPSBBdCB0aGlzIHBvaW50LCBhIFRDUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJoNCIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tNCJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJJZiBXaXpGaTI1MCBjb25uZWN0cyB0byBwZWVyIHN5c3RlbSBzdWNjZXNzZnVsbHksIFdpekZpMjUwIHdpbGwgcHJpbnQgIiwiW0NPTk5FQ1QoQ0lEKV0iLCIgbWVzc2FnZS4gQXQgdGhpcyB0aW1lLCBXaXpGaTI1MCBpcyBpbiBjb21tYW5kIG1vZGUuIEluIG9yZGVyIHRvIHNlbmQgZGF0YSB0byBwZWVyIHN5c3RlbSwgeW91IGhhdmUgdG8gdXNlIDwgIEFUK1NTRU5EPUNJRCwgRGVzdGluYXRpb24gSVAsIERlc3RpbmF0aW9uIFBvcnQsIERhdGEgTGVuZ3RoPiBjb21tYW5kLiBJZiB5b3UgaW5wdXQgc2VyaWFsIGNvbW1hbmQgbGlrZSA8ICBEYXRhIExlbmd0aD4gLCBXaXpGaTI1MCB3aWxsIHNlbmQgc2VyaWFsIGRhdGEgdG8gcGVlciBzeXN0ZW0uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBVCtTU0VORD0wLCwsNSAgICggU2VuZGluZyBkYXRhIHRvIGEgU29ja2V0IHdpdGggQ0lEIDAgKVxuSGVsbG8gICAgICAgICAgICAgPCA9IFdoZW4gc2VyaWFsIGRhdGEgaXMgNWJ5dGUsIFdpekZpMjUwIHNlbmQgdGhpcyBkYXRhIHRvIHBlZXIgc3lzdGVtXG5bT0tdXG5cbnswLDE5Mi4xNjguMTIuMjMsNTAwMCwxMX1IaSBXaXpGaTI1MCAgKCBSZWNlaXZpbmcgZGF0YSBmcm9tIHBlYXIgc3lzdGVtIClcbiIpKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlLTQifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJJbiA8IEFUIENvbW1hbmQgTW9kZT4sIFRDUCBjb25uZWN0aW9uIGNhbiBiZSBjbG9zZWQgdGhyb3VnaCA8IEFUK1NNR01UPUNJRD4gb3IgPCBBVCtTTUdNVD1BTEw+IGNvbW1hbmQuIiksbWR4KCJoNCIseyJpZCI6ImNoZWNraW5nLXNvY2tldC1zdGF0dXMtNCJ9LCJDaGVja2luZyBTb2NrZXQgU3RhdHVzIiksbWR4KCJwIixudWxsLCJJbiA8IEFUIENvbW1hbmQgTW9kZT4sIEluZm9ybWF0aW9uIG9mIGNvbm5lY3RlZCBzb2NrZXRzIGFyZSBzaG93biBieSB1c2luZyA8IEFUK1NNR01UPT8+IGNvbW1hbmQuIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJBVCtTTUdNVD0/XG5OdW1iZXIgb2YgU29ja2V0cyA6IDEgKFNDSUQvU29ja2V0L01vZGUvUmVtb3RlL0xvY2FsL0RhdGFNb2RlKVxuMC9UQ04vMTkyLjE2OC4xMi4yMzo1MDAwLzUwMDEvMFxuW09LXVxuIikpLG1keCgiaDIiLHsiaWQiOiJtZXRob2Qtb2Ytc2V0dGluZy10Y3Atc2VydmVyLWFuZC1leGNoYW5naW5nLWRhdGEtaW4tY29tbWFuZC1tb2RlIn0sIk1ldGhvZCBvZiBzZXR0aW5nIFRDUCBTZXJ2ZXIgYW5kIGV4Y2hhbmdpbmcgZGF0YSBpbiBDb21tYW5kIE1vZGUiKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LW9wZW4tNSJ9LCJTb2NrZXQgT3BlbiIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byBzZXQgPCBUQ1AgU2VydmVyPiBpbiA8IENvbW1hbmQgTW9kZT4gYW5kIGNvbW11bmljYXRlIHRvIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyB0aGUgZXhhbXBsZSBmb3Igc2V0dGluZyBUQ1AgU2VydmVyIG9uIHRoZSBDb21tYW5kIE1vZGUuIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCA8IEFUK1NDT04+IGNvbW1hbmQsIHJlZmVyIHRvIEFUK1NDT04gYW5kIFNvY2tldCBPcGVuLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICAgKiBNb2RlIDogQ29tbWFuZCBNb2RlLCBUQ1AgU2VydmVyXG4gICAqIExvY2FsIFBvcnQgOiA1MDAwXG5cblxuICBBUCBBc3NvY2lhdGlvbiAgICAgICAgICAgICAgKCBSZWZlciB0byBBc3NvY2lhdGlvbiAmIERpc2Fzc29jaWF0aW9uIEV4YW1wbGUgKVxuXG4gIEFUK1NDT049TyxUU04sICwgLDUwMDAsMCAgICAgICAgKCBBVCBjb21tYW5kIGxpc3RlbmluZyB3aXRoIGEgVENQIFNlcnZlciBTb2NrZXQgKVxuICBbT0tdXG5cbiAgW0NPTk5FQ1QgMF0gXG4iKSksbWR4KCJoNCIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tNSJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBpdHMgcGVlciBzeXN0ZW0gaXMgdGhlIHNhbWUgd2l0aCBwcmV2aW91cyBFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtLiIpLG1keCgiaDQiLHsiaWQiOiJzb2NrZXQtY2xvc2UtNSJ9LCJTb2NrZXQgQ2xvc2UiKSxtZHgoInAiLG51bGwsIkNsb3Npbmcgc29ja2V0IGNvbm5lY3Rpb24gaXMgdGhlIHNhbWUgd2l0aCBwcmV2aW91cyBTb2NrZXQgQ2xvc2UuIiksbWR4KCJoMiIseyJpZCI6Im1ldGhvZC1vZi1zZXR0aW5nLXVkcC1jbGllbnQtYW5kLWV4Y2hhbmdpbmctZGF0YS1pbi1jb21tYW5kLW1vZGUifSwiTWV0aG9kIG9mIHNldHRpbmcgVURQIENsaWVudCBhbmQgZXhjaGFuZ2luZyBkYXRhIGluIENvbW1hbmQgTW9kZSIpLG1keCgiaDQiLHsiaWQiOiJzb2NrZXQtb3Blbi02In0sIlNvY2tldCBPcGVuIiksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgaG93IHRvIHNldCA8IFVEUCBDbGllbnQ+IGluIDwgQ29tbWFuZCBNb2RlPiBhbmQgY29tbXVuaWNhdGUgdG8gcGVlciBzeXN0ZW0uIEJlbG93IGlzIGFuIGV4YW1wbGUgZm9yIHNldHRpbmcgVURQIENsaWVudCBvbiBDb21tYW5kIE1vZGUuIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCA8IEFUK1NDT04+IGNvbW1hbmQsIHJlZmVyIHRvIEFUK1NDT04gYW5kIFNvY2tldCBPcGVuLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICAgICAqIE1vZGUgOiBDb21tYW5kIE1vZGUsIFVEUCBDbGllbnRcbiAgICAgKiBSZW1vdGUgSVAgOiAxOTIuMTY4LjEyLjIzXG4gICAgICogUmVtb3RlIFBvcnQgOiA1MDAxXG4gICAgICogTG9jYWwgUG9ydCA6IDUwMDBcblxuXG4gIEFQIEFzc29jaWF0aW9uICAgICAgICAgICAgICAoIFJlZmVyIHRvIEFzc29jaWF0aW9uICYgRGlzYXNzb2NpYXRpb24gRXhhbXBsZSApXG5cbiAgQVQrU0NPTj1PLFVDTiwxOTIuMTY4LjEyLjIzLDUwMDEsNTAwMCwwIFxuICBbT0tdXG5cbiAgW0NPTk5FQ1QgMF0gICAgICAgICAgICAgICAgICAgICAgICAgIDwgPSBBdCB0aGlzIHBvaW50LCBhIFVEUCBjb25uZWN0aW9uIGlzIGRvbmUgXG4iKSksbWR4KCJoNCIseyJpZCI6ImV4Y2hhbmdpbmctZGF0YS13aXRoLWEtcGVlci1zeXN0ZW0tNiJ9LCJFeGNoYW5naW5nIGRhdGEgd2l0aCBhIHBlZXIgc3lzdGVtIiksbWR4KCJwIixudWxsLCJFeGNoYW5naW5nIGRhdGEgd2l0aCBpdHMgcGVlciBzeXN0ZW0gaXMgdGhlIHNhbWUgYXMgcHJldmlvdXMgRXhjaGFuZ2luZyBkYXRhIHdpdGggYSBwZWVyIHN5c3RlbS4iKSxtZHgoImg0Iix7ImlkIjoic29ja2V0LWNsb3NlLTYifSwiU29ja2V0IENsb3NlIiksbWR4KCJwIixudWxsLCJDbG9zaW5nIHNvY2tldCBjb25uZWN0aW9uIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzIFNvY2tldCBDbG9zZS4iKSxtZHgoImgyIix7ImlkIjoibWV0aG9kLW9mLXNldHRpbmctdWRwLXNlcnZlci1hbmQtZXhjaGFuZ2luZy1kYXRhLWluLWNvbW1hbmQtbW9kZSJ9LCJNZXRob2Qgb2Ygc2V0dGluZyBVRFAgU2VydmVyIGFuZCBleGNoYW5naW5nIGRhdGEgaW4gQ29tbWFuZCBNb2RlIiksbWR4KCJoNCIseyJpZCI6InNvY2tldC1vcGVuLTcifSwiU29ja2V0IE9wZW4iKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gb3BlbiA8IFVEUCBTZXJ2ZXIgU29ja2V0PiBpbiBDb21tYW5kIE1vZGUgYW5kIGNvbW11bmljYXRlIHRvIHBlZXIgc3lzdGVtLiBCZWxvdyBpcyBhbiBleGFtcGxlIGZvciBzZXR0aW5nIFVEUCBTZXJ2ZXIgb24gQ29tbWFuZCBNb2RlLiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgPCBBVCtTQ09OPiBjb21tYW5kLCByZWZlciB0byBBVCtTQ09OIGFuZCBTb2NrZXQgT3Blbi4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiAgICogTW9kZSA6IENvbW1hbmQgTW9kZSwgVURQIFNlcnZlclxuICAgKiBMb2NhbCBQb3J0IDogNTAwMFxuXG5cbiAgQVAgQXNzb2NpYXRpb24gICAgICAgICAgICAgICggUmVmZXIgdG8gQXNzb2NpYXRpb24gJiBEaXNhc3NvY2lhdGlvbiBFeGFtcGxlIClcblxuICBBVCtTQ09OPU8sVVNOLCAsICw1MDAwLDAgXG4gIFtPS11cblxuICBbQ09OTkVDVCAwXSBcbiIpKSxtZHgoImg0Iix7ImlkIjoiZXhjaGFuZ2luZy1kYXRhLXdpdGgtYS1wZWVyLXN5c3RlbS03In0sIkV4Y2hhbmdpbmcgZGF0YSB3aXRoIGEgcGVlciBzeXN0ZW0iKSxtZHgoInAiLG51bGwsIjwgVURQIFNlcnZlciBNb2RlPiBvZiBXaXpGaTI1MCBjYW4gY29ubmVjdCBVRFAgY29ubmVjdGlvbiB3aXRob3V0IHBlZXIgc3lzdGVtIGluZm9ybWF0aW9uIGxpa2UgSVAgYWRkcmVzcyBhbmQgcG9ydCBudW1iZXIuIEJlZm9yZSBwZWVyIHN5c3RlbSBpcyBjb25uZWN0ZWQgdG8gV2l6RmkyNTAsIFdpekZpMjUwIGRvZXMgbm90IHNlbmQgZGF0YSB0byBwZWVyIHN5c3RlbS4gU28geW91IHNob3VsZCBiZSBjYXJlZnVsIHdoZW4gdXNpbmcgPCBVRFAgU2VydmVyIE1vZGU+LiIpLG1keCgicCIsbnVsbCwiezAsMTkyLjE2OC4xMi4yMyw1MDAxLDExfUhpIFdpekZpMjUwICAoIFJlY2VpdmluZyBkYXRhIGZyb20gcGVlciBzeXN0ZW0gKSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICBBVCtTU0VORD0wLCwsNSAgICAgICAgICAgICAgICAgICAgICggU2VuZGluZyBkYXRhIHRvIGEgU29ja2V0IHdpdGggQ0lEIDAgKVxuICBIZWxsbyAgICAgICAgICAgPCA9IFdoZW4gc2VyaWFsIGRhdGEgaXMgNWJ5dGUsIFdpekZpMjUwIHNlbmQgdGhpcyBkYXRhIHRvIHBlZXIgc3lzdGVtXG4gIFtPSyBdXG4iKSksbWR4KCJoMiIseyJpZCI6ImF0c2NvbiJ9LCJBVCtTQ09OIiksbWR4KCJwIixudWxsLCJBVCtTQ09OPTwgT3BlblR5cGU+LDwgU29ja2V0VHlwZT4sPCBSZW1vdGVJUD4sPCBSZW1vdGVQb3J0Piw8IExvY2FsUG9ydD4sPCBEYXRhTW9kZT4iKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyB0aGUgdXNhZ2Ugb2YgPCBPcGVuIFR5cGU+IHBhcmFtZXRlciBvZiA8IEFUK1NDT04+IGNvbW1hbmQuIFRoaXMgdGFibGUgZGVzY3JpYmVzIHZhbHVlcyBvZiA8IE9wZW4gVHlwZT4gcGFyYW1ldGVyLiIpLG1keCgicCIsbnVsbCwiUGFyYW1ldGVyXHRNZWFuaW5nXG5TXHRSZWdpc3RlciBhcyBhIFNlcnZpY2Vcbk9cdE9wZW4gYXQgT25jZVxuU09cdE9wZW4gYXQgT25jZSAmIFJlZ2lzdGVyIGFzIGEgU2VydmljZVxuPCBTPiA6IFJlZ2lzdGVyIGFzIGEgU2VydmljZVxuV2hlbiB1c2luZyB0aGlzIHBhcmFtZXRlciwgV2l6RmkyNTAgd2lsbCB0cnkgdG8gY29ubmVjdCB0byBwZWVyIHN5c3RlbSB1c2luZyBUQ1Agb3IgVURQIHdoZW4gcG93ZXIgaXMgb24uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgIEFUK1dMRUFWRVxuICBbT0tdXG5cbiAgQVQrV1NFVD0wLFdpekZpRGVtb0FQXG4gIFtPS11cblxuICBBVCtXU0VDPTAsV1BBMiwxMjM0NTY3OFxuICBbT0tdXG5cbiAgQVQrV05FVD0xXG4gIFtPS11cblxuICBBVCtTQ09OPVMsVFNOLCwsNTAwMCwwXG4gIFtPS11cblxuICBBVCtNUFJPRj1TXG4gIFtPS11cblxuICBBVCtNUkVTRVRcbiAgW09LXVxuICBXaXpGaTI1MCBWZXJzaW9uIDAuOS4wLjAgKFdJWm5ldCBDby5MdGQpXG4gIEpvaW5pbmcgOiBXaXpGaURlbW9BUFxuICBTdWNjZXNzZnVsbHkgam9pbmVkIDogV2l6RmlEZW1vQVBcblxuICBbTGluay1VcCBFdmVudF1cbiAgICBJUCBBZGRyICAgIDogMTkyLjE2OC4xMi4xMFxuICAgIEdhdGV3YXkgICAgOiAxOTIuMTY4LjEyLjFcblxuICBBVCtTTUdNVD0/XG4gIE51bWJlciBvZiBTb2NrZXRzIDogMSAoU0NJRC9Nb2RlL1JlbW90ZS9Mb2NhbC9EYXRhTW9kZSlcbiAgMC9UU04vMC4wLjAuMDowLzUwMDAvMFxuICBbT0tdXG4iKSksbWR4KCJwIixudWxsLCI8IE8+IDogT3BlbiBhdCBPbmNlXG5XaGVuIHVzaW5nIHRoaXMgcGFyYW1ldGVyLCBXaXpGaTI1MCB3aWxsIHRyeSB0byBjb25uZWN0IHRvIHBlZXIgc3lzdGVtIHVzaW5nIFRDUCBvciBVRFAgd2hlbiBlbnRlciB0aGUgPCBBVCtTQ09OPiBjb21tYW5kLiBGb3IgdXNpbmcgdGhpcyBwYXJhbWV0ZXIsIFdpekZpMjUwIHNob3VsZCBiZSBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBBUCBvciBydW5uaW5nIEFQIG1vZGUuIEluIHRoaXMgc2VjdGlvbiwgd2UgaGF2ZSBvbmx5IGV4cGxhaW5lZCBzdGVwcyBpbiBTdGF0aW9uIE1vZGUuIEluIEFQIE1vZGUsIHlvdSBjYW4gdXNlIHRoaXMgY29tbWFuZCBsaWtlIGluIFN0YXRpb24gTW9kZSIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICBBVCtXTEVBVkVcbiAgW09LXVxuXG4gIEFUK1dTRVQ9MCxXaXpGaURlbW9BUFxuICBbT0tdXG5cbiAgQVQrV1NFQz0wLFdQQTIsMTIzNDU2NzhcbiAgW09LXVxuXG4gIEFUK1dORVQ9MVxuICBbT0tdXG5cbiAgQVQrV0pPSU5cbiAgSm9pbmluZyA6IFdpekZpRGVtb0FQXG4gIFN1Y2Nlc3NmdWxseSBqb2luZWQgOiBXaXpGaURlbW9BUFxuXG4gIFtMaW5rLVVwIEV2ZW50XVxuICAgIElQIEFkZHIgICAgOiAxOTIuMTY4LjEyLjEwXG4gICAgR2F0ZXdheSAgICA6IDE5Mi4xNjguMTIuMVxuICBbT0tdXG5cbiAgQVQrU0NPTj1PLFRDTiwxOTIuMTY4LjEyLjIzLDUwMDAsLDBcbiAgW09LXVxuIikpLG1keCgicCIsbnVsbCwiW0NPTk5FQ1QgMF0iLCJcbjwgU08+IE9wZW4gYXQgT25jZSAmIFJlZ2lzdGVyIGFzIGEgU2VydmljZVxuV2hlbiB1c2luZyB0aGlzIHBhcmFtZXRlciwgeW91IGNhbiB1c2UgZnVuY3Rpb25zIG9mIDwgUz4gYW5kIDwgTz4gYXQgdGhlIHNhbWUgdGltZS4gV2hlbiB1c2luZyB0aGlzIHBhcmFtZXRlciwgV2l6RmkyNTAgd2lsbCB0cnkgdG8gY29ubmVjdCB0byBwZWVyIHN5c3RlbSBtb21lbnRhcmlseS4gQW5kIGlmIHlvdSByZXN0YXJ0IFdpekZpMjUwLCBXaXpGaTI1MCB3aWxsIHRyeSB0byBjb25uZWN0IHRvIEFQIGFuZCBwZWVyIHN5c3RlbS4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiAgQVQrV0xFQVZFXG4gIFtPS11cblxuICBBVCtXU0VUPTAsV2l6RmlEZW1vQVBcbiAgW09LXVxuXG4gIEFUK1dTRUM9MCxXUEEyLDEyMzQ1Njc4XG4gIFtPS11cblxuICBBVCtXTkVUPTFcbiAgW09LXVxuXG4gIEFUK1dKT0lOXG4gIEpvaW5pbmcgOiBXaXpGaURlbW9BUFxuICBTdWNjZXNzZnVsbHkgam9pbmVkIDogV2l6RmlEZW1vQVBcblxuICBbTGluay1VcCBFdmVudF1cbiAgICBJUCBBZGRyICAgIDogMTkyLjE2OC4xMi4xMFxuICAgIEdhdGV3YXkgICAgOiAxOTIuMTY4LjEyLjFcbiAgW09LXVxuXG4gIEFUK1NDT049U08sVENOLDE5Mi4xNjguMTIuMjMsNTAwMCwsMFxuICBbT0tdXG4gIFtDT05ORUNUIDBdXG5cbiAgQVQrTVBST0Y9U1xuICBbT0tdXG5cbiAgQVQrTVJFU0VUXG4gIFtPS11cblxuICBXaXpGaTI1MCBWZXJzaW9uIDAuOS4wLjAgKFdJWm5ldCBDby5MdGQpXG4gIEpvaW5pbmcgOiBXaXpGaURlbW9BUFxuICBTdWNjZXNzZnVsbHkgam9pbmVkIDogV2l6RmlEZW1vQVBcblxuICBbTGluay1VcCBFdmVudF1cbiAgICBJUCBBZGRyICAgIDogMTkyLjE2OC4xMi4xMFxuICAgIEdhdGV3YXkgICAgOiAxOTIuMTY4LjEyLjFcblxuICBbQ09OTkVDVCAwXVxuIikpLG1keCgiaDIiLHsiaWQiOiJleGFtcGxlLW9mLXNzbC1jb25uZWN0aW9uIn0sIkV4YW1wbGUgb2YgU1NMIENvbm5lY3Rpb24iKSxtZHgoInAiLG51bGwsIlRoaXMgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gY29ubmVjdCB0byBhbmQgY29tbXVuaWNhdGUgd2l0aCBTU0wgc2VydmVyLiBUbyBjb25uZWN0IHRvIFNTTCBzZXJ2ZXIsIHVzZSA8IFRDUyhUQ1AgQ2xpZW50IFNTTCk+IC8gPCBUU1MoVENQIFNlcnZlciBTU0wpPiBwYXJhbWV0ZXIgb2YgPCBBVCtTQ09OPiBjb21tYW5kLiAoIFdoZW4gdXNpbmcgVURQLCBXaXpGaTI1MCBjYW5ub3QgdXNlIFNTTCBDb25uZWN0aW9uLiApIEluIG9yZGVyIHRvIHVzZSBTU0wgY29ubmVjdGlvbiwgeW91IGNhbiB1c2UgQVQgY29tbWFuZCBhcyBiZWxvdy4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiAgQVQrU0NPTj1TTyxUQ1MsMTk5LjU5LjE0OC4yMTIsNDQzLDUwMDAsMFxuICBbT0tdXG5cbiAgW0NPTk5FQ1QgMF1cbiAgQVQrU1NFTkQ9MCwsLDE4XG4gIEdFVCAvIEhUVFAvMS4xezB4MGR9ezB4MGF9XG4gIHsweDBkfXsweDBhfVxuICBbT0tdXG4gIFxuIikpLG1keCgicCIsbnVsbCwiezAsMTczLjE5NC4zMy4zOCw0NDMsOTkwfUhUVFAvMS4xIDMwMiBGb3VuZFxuTG9jYXRpb246ICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vd3d3Lmdvb2dsZS5jby5rci8ifSksImh0dHBzOi8vd3d3Lmdvb2dsZS5jby5rci8iKSwiXG5DYWNoZS1Db250cm9sOiBwcml2YXRlXG5Db250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFxuU2V0LUNvb2tpZTogUFJFRj1JRD0zZTY0ZDgxZmI5N2M3ZTZjOkZGPTA6VE09MTM3MTU1MzIzNjpMTT0xMzcxNTUzMjM2OlM9SDNOS3lTRDYzVXdlbEZfejsgZXhwaXJlcz1UaHUsIDE4LUp1bi0yMDE1IDExOjAwOjM2IEdNVDsgcGF0aD0vOyBkb21haW49Lmdvb2dsZS5jb21cblNldC1Db29raWU6IE5JRD02Nz12dHpZWHo1bXN4Ull6Ty1Lekg1RUtnY25BQkU0X1lPY2JVRzFSR1h1ZmlRTTJQTmM4NGd5cjhPMTJWTmtPT2FwOE1VQ21HTlFmbmZzR01hclNTOUpsa2I3TWlaZElReHJKZy1GTDF1S1VxZ1NCQTJDR0lFcUk1c3lyS25OVzJZSzsgZXhwaXJlcz1XZWQsIDE4LURlYy0yMDEzIDExOjAwOjM2IEdNVDsgcGF0aD0vOyBkb21haW49Lmdvb2dsZS5jb207IEh0dHBPbmx5XG5QM1A6IENQPVwiVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5ISBTZWUgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cDovL3d3dy5nb29nbGUuY29tL3N1cHBvcnQvYWNjb3VudHMvYmluL2Fuc3dlci5weT9obD1lbiZhbnN3ZXI9MTUxNjU3In0pLCJodHRwOi8vd3d3Lmdvb2dsZS5jb20vc3VwcG9ydC9hY2NvdW50cy9iaW4vYW5zd2VyLnB5P2hsPWVuJmFuc3dlcj0xNTE2NTciKSwiIGZvciBtb3JlIGluZm8uXCJcbkRhdGU6IFR1ZSwgMTggSnVuIDIwMTMgMTE6MDA6MzYgR01UXG5TZXJ2ZXI6IGd3c1xuQ29udGVudC1MZW5ndGg6IDIyMlxuWC1YU1MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9ja1xuWC1GcmFtZS1PcHRpb25zOiBTQU1FT1JJR0lOIiksbWR4KCJwIixudWxsLCI8IEhUTUw+PCBIRUFEPjwgbWV0YSBodHRwLWVxdWl2PVwiY29udGVudC10eXBlXCIgY29udGVudD1cInRleHQvaHRtbDtjaGFyc2V0PXV0Zi04XCI+PCBUSVRMRT4zMDIgTW92ZWQ8IC9USVRMRT48IC9IRUFEPjwgQk9EWT48IEgxPjMwMiBNb3ZlZDwgL0gxPlRoZSBkb2N1bWVudCBoYXMgbW92ZWQ8IEEgSFJFRj1cIiIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vd3d3Lmdvb2dsZS5jby5rci8lMjIlM0VoZXJlIn0pLCJodHRwczovL3d3dy5nb29nbGUuY28ua3IvXCI+aGVyZSIpLCI8IC9BPi5cbjwgL0JPRFk+PCAvSFRNTD5cbiIsIltESVNDT05ORUNUIDBdIiksbWR4KCJoMiIseyJpZCI6ImV4YW1wbGUtb2YtbXVsdGktc29ja2V0LWNvbm5lY3Rpb24ifSwiRXhhbXBsZSBvZiBNdWx0aSBTb2NrZXQgQ29ubmVjdGlvbiIpLG1keCgicCIsbnVsbCwiVGhpcyBzZWN0aW9uIGV4cGxhaW5zIGhvdyB0byB1c2UgPCBNdWx0aSBTb2NrZXQgQ29ubmVjdGlvbj4gZnVuY3Rpb24uIFdpekZpMjUwIGNhbiB1c2UgbWF4IDggVENQIG9yIFVEUCBzb2NrZXRzLiBJbiBvcmRlciB0byB1c2UgPCBNdWx0aSBTb2NrZXQgQ29ubmVjdGlvbj4gZnVuY3Rpb24sIHlvdSBjYW4gdXNlIEFUIGNvbW1hbmQgYXMgYmVsb3cuIEluIHRoaXMgZXhhbXBsZSwgdGhlIHBlZXIgc3lzdGVtIHdhcyBydW5uaW5nIGEgbG9vcCBiYWNrIHByb2dyYW0uIFNvIGlmIHBlZXIgc3lzdGVtIHJlY2VpdmVkIGRhdGEgZnJvbSBXaXpGaTI1MCwgcGVlciBzeXN0ZW0gd2lsbCBzZW5kIHJlY2VpdmVkIGRhdGEgdG8gV2l6RmkyNTAuIiksbWR4KCJoNCIseyJpZCI6ImFwLWFzc29jaWF0aW9uIn0sIkFQIEFzc29jaWF0aW9uIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgIEFUK1NDT049TyxUQ04sMTkyLjE2OC4xMi4yMyw1MDAwLDUwMDEsMFxuICBbT0tdXG5cbiAgW0NPTk5FQ1QgMF1cbiAgQVQrU0NPTj1PLFRTTiwsLDYwMDAsMFxuICBbT0tdXG5cbiAgW0NPTk5FQ1QgMV1cbiAgQVQrU0NPTj1PLFVDTiwxOTIuMTY4LjEyLjIzLDcwMDAsNzAwMCwwXG4gIFtPS11cblxuICBbQ09OTkVDVCAyXVxuICBBVCtTQ09OPU8sVVNOLCwsODAwMCwwXG4gIFtPS11cblxuICBbQ09OTkVDVCAzXVxuICBBVCtTTUdNVD0/XG4gIE51bWJlciBvZiBTb2NrZXRzIDogNCAoU0NJRC9Tb2NrZXQvTW9kZS9SZW1vdGUvTG9jYWwvRGF0YU1vZGUpXG4gIDAvVENOLzE5Mi4xNjguMTIuMjM6NTAwMC81MDAxLzBcbiAgMS9UU04vMTkyLjE2OC4xMi4yMzo1ODc2OS82MDAwLzBcbiAgMi9VQ04vMTkyLjE2OC4xMi4yMzo3MDAwLzcwMDAvMFxuICAzL1VTTi8wLjAuMC4wOi84MDAwLzBcbiAgW09LXVxuXG4gIEFUK1NTRU5EPTAsLCwxNlxuICBIZWxsb19UQ1BfQ2xpZW50XG4gIFtPS11cblxuICB7MCwxOTIuMTY4LjEyLjIzLDUwMDAsMTZ9SGVsbG9fVENQX0NsaWVudFxuXG4gIEFUK1NTRU5EPTEsLCwxNlxuICBIZWxsb19UQ1BfU2VydmVyXG4gIFtPS11cblxuICB7MSwxOTIuMTY4LjEyLjIzLDU4NzY5LDE2fUhlbGxvX1RDUF9TZXJ2ZXJcblxuICBBVCtTU0VORD0yLCwsMTZcbiAgSGVsbG9fVURQX0NsaWVudFxuICBbT0tdXG5cbiAgezIsMTkyLjE2OC4xMi4yMyw3MDAwLDE2fUhlbGxvX1VEUF9DbGllbnRcbiAgezMsMTkyLjE2OC4xMi4yMyw4MDAwLDE2fUhlbGxvX1VEUF9TZXJ2ZXJcbiAgQVQrU1NFTkQ9MywsLDE2XG4gIEhlbGxvX1VEUF9TZXJ2ZXJcbiAgW09LXVxuIikpLG1keCgiaDIiLHsiaWQiOiJhaXItY29tbWFuZC1tb2RlLS0td2l6ZmkyNTBhaXJjbWQifSwiQWlyIENvbW1hbmQgbW9kZSAtIFdpekZpMjUwQWlyQ21kIiksbWR4KCJwIixudWxsLCJUaGlzIHNlY3Rpb24gZXhwbGFpbnMgaG93IHRvIG9wZXJhdGUgQWlyLWNvbW1hbmQtbW9kZSBvZiBXaXpGaTI1MC4gV2l0aCB0aGlzIEFpci1jb21tYW5kLW1vZGUgaW5jbHVkZWQgaW4gdGhlIFdpekZpMjUwLCB5b3UgY2FuIGlzc3VlIEFUIGNvbW1hbmRzIHRvIHRoZSBtb2R1bGUgdmlhIFdpRmksIHdoaWxlIHRoZSBXaXpGaTI1MCBpcyBpbiB0aGUgVENQIHNlcnZlciBvciBVRFAgc2VydmVyIG9wZXJhdGlvbiBtb2RlLiIpLG1keCgicCIsbnVsbCwiUGxlYXNlIGhhdmUgYSBsb29rIGF0IHRoZSBmb2xsb3dpbmcgaGludHM6IiksbWR4KCJwIixudWxsLCJBaXItY29tbWFuZC1tb2RlIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNvbmZpZ3VyYXRpb24gb2YgV2l6RmkyNTAuIEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGNvbW1hbmQgbW9kZSBmb3Igb3RoZXIgcHVycG9wc2VzLlxuVGhlIEFpci1jb21tYW5kLW1vZGUgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHN0YXJ0ZWQsIHdoZW4gdGhlIG1vZHVsZSBXaXpGaTI1MCB3aWxsIGJlIGJvb3RlZCBpbnRvIHRoZSBBUCBtb2RlLiBUaGUgbW9kdWxlIGNhbiB0aGVuIGJlIGNvbmZpZ3VyZWQgb24gdGhlIHBvcnQgNTAwMDEgb24gaXRzIElQIGFkZHJlc3MuXG5UaGUgQVQgY29tbWFuZCBjb25zaXN0cyBvZiBmb2xsb3dpbmcgcGFydHM6IENvbW1hbmQgaGVhZGVyIChXaXpGaTI1MEFpckNtZDopLCBBVCBjb21tYW5kIChmb3IgZXhhbXBsZTogQVQpIGFuZCBDYXJyaWFnZSBSZXR1cm4gKFxccikuIiksbWR4KCJwIixudWxsLCJUaGUgY29tbWFuZCBzaG91bGQgYmUgc2VudCB3aXRoIHRoZXNlIGNvbmRpdGlvbnM6IiksbWR4KCJwIixudWxsLCJUaGUgY29tbWFuZCBoZWFkZXIgXHUyMDFDV2l6RmkyNTBBaXJDbWQ6XHUyMDFEIGlzIGNhc2Ugc2Vuc2l0aXZlIGFuZCBoYXMgdG8gYmUgc2VudCBpbiB0aGlzIGtpbmQuIEl0IGlzIDE1IEJ5dGVzIGxvbmcuXG5BIDwgQ2FycmlhZ2UgUmV0dXJuLCAweDFkPiBoYXMgdG8gZm9sbG93IHRoZSBBVCBjb21tYW5kIGRpcmVjdGx5LlxuQWlyLWNvbW1hbmQgaGVhZGVyLCBBVCBjb21tYW5kIGFuZCBDYXJyaWFnZSBSZXR1cm4gc2hvdWxkIGJlIGNvbWJpbmVkIGludG8gb25lIHBhY2tldC5cbkV4YW1wbGUgdXNhZ2Ugb2YgdGhlIFdpekZpMjUwQWlyQ21kOiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICBBVCtXU0VUPTEsV2l6RmkyNTBfQUlSQ01EXG4gIFtPS11cbiAgQVQrV1NFQz0xLFdQQTIsMTIzNDU2Nzg5XG4gIFtPS11cbiAgQVQrV05FVD0wLDE5Mi4xNjguMTEuMSwyNTUuMjU1LjI1NS4wLDE5Mi4xNjguMTEuMVxuICBbT0tdXG4gIEFUK1dKT0lOXG5cbiAgW0xpbmstVXAgRXZlbnRdXG4gICAgSVAgQWRkciAgICA6IDE5Mi4xNjguMTEuMVxuICAgIEdhdGV3YXkgICAgOiAxOTIuMTY4LjExLjFcbiAgW09LXVxuXG4gIEFUK01BSVJDTUQ9TyxULDUwMDAxLDBcbiAgW09LXVxuIikpLG1keCgicCIsbnVsbCwiTm93LCBUQ1AgQ2xpZW50IGNhbiBjb25uZWN0IHRvIHRoZSBXaXpGaTI1MCBhbmQgaXNzdWUgdGhlIEFUIGNvbW1hbmRzIHZpYSBXaUZpIGFzIGJlbG93LiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiICAoVENQIENsaWVudCBUWCkgXG4gIFdpekZpMjUwQWlyQ21kOkFUK01JTkZPXFxyICgyNCBCeXRlKVxuICAoUlgpIFxuICBGVyB2ZXJzaW9uL0hXIHZlcnNpb25cbiAgMS4wLjEuOC9XaXpGaTI1MCBSZXYgMS4wXG4gIFtPS11cblxuICAoVENQIENsaWVudCBUWCkgXG4gIFdpekZpMjUwQWlyQ21kOkFUK1dTRUM9P1xcciAoMjUgQnl0ZSlcbiAgKFJYKSBcbiAgMSxXUEEyLDEyMzQ1Njc4OVxuICBbT0tdXG5cbiAgKFRDUCBDbGllbnQgVFgpIFxuICBXaXpGaTI1MEFpckNtZDpBVCtXU0VDPTEsV1BBMixhYWFhYmJiYlxcciAoMzkgQnl0ZSlcbiAgKFJYKSBcbiAgW09LXVxuXG4gIChUQ1AgQ2xpZW50IFRYKSBcbiAgV2l6RmkyNTBBaXJDbWQ6QVQrTU1BQz0/XFxyICgyNSBCeXRlKVxuICAoUlgpIFxuICAwMDowODpEQzowMDo1NTo3NlxuICBbT0tdXG4iKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}